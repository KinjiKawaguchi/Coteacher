// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/response.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResponseService_GetNumberOfResponsesByStudentID_FullMethodName = "/coteacher.v1.ResponseService/GetNumberOfResponsesByStudentID"
	ResponseService_GetNumberOfResponsesByFormID_FullMethodName    = "/coteacher.v1.ResponseService/GetNumberOfResponsesByFormID"
	ResponseService_GetResponseListByFormID_FullMethodName         = "/coteacher.v1.ResponseService/GetResponseListByFormID"
	ResponseService_SubmitResponse_FullMethodName                  = "/coteacher.v1.ResponseService/SubmitResponse"
	ResponseService_SubmitAIResponse_FullMethodName                = "/coteacher.v1.ResponseService/SubmitAIResponse"
	ResponseService_CreateDataset_FullMethodName                   = "/coteacher.v1.ResponseService/CreateDataset"
)

// ResponseServiceClient is the client API for ResponseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponseServiceClient interface {
	GetNumberOfResponsesByStudentID(ctx context.Context, in *GetNumberOfResponsesByStudentIDRequest, opts ...grpc.CallOption) (*GetNumberOfResponsesByStudentIDResponse, error)
	GetNumberOfResponsesByFormID(ctx context.Context, in *GetNumberOfResponsesByFormIDRequest, opts ...grpc.CallOption) (*GetNumberOfResponsesByFormIDResponse, error)
	GetResponseListByFormID(ctx context.Context, in *GetResponseListByFormIDRequest, opts ...grpc.CallOption) (*GetResponseListByFormIDResponse, error)
	SubmitResponse(ctx context.Context, in *SubmitResponseRequest, opts ...grpc.CallOption) (*SubmitResponseResponse, error)
	SubmitAIResponse(ctx context.Context, in *SubmitAIResponseRequest, opts ...grpc.CallOption) (*SubmitAIResponseResponse, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
}

type responseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResponseServiceClient(cc grpc.ClientConnInterface) ResponseServiceClient {
	return &responseServiceClient{cc}
}

func (c *responseServiceClient) GetNumberOfResponsesByStudentID(ctx context.Context, in *GetNumberOfResponsesByStudentIDRequest, opts ...grpc.CallOption) (*GetNumberOfResponsesByStudentIDResponse, error) {
	out := new(GetNumberOfResponsesByStudentIDResponse)
	err := c.cc.Invoke(ctx, ResponseService_GetNumberOfResponsesByStudentID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) GetNumberOfResponsesByFormID(ctx context.Context, in *GetNumberOfResponsesByFormIDRequest, opts ...grpc.CallOption) (*GetNumberOfResponsesByFormIDResponse, error) {
	out := new(GetNumberOfResponsesByFormIDResponse)
	err := c.cc.Invoke(ctx, ResponseService_GetNumberOfResponsesByFormID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) GetResponseListByFormID(ctx context.Context, in *GetResponseListByFormIDRequest, opts ...grpc.CallOption) (*GetResponseListByFormIDResponse, error) {
	out := new(GetResponseListByFormIDResponse)
	err := c.cc.Invoke(ctx, ResponseService_GetResponseListByFormID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) SubmitResponse(ctx context.Context, in *SubmitResponseRequest, opts ...grpc.CallOption) (*SubmitResponseResponse, error) {
	out := new(SubmitResponseResponse)
	err := c.cc.Invoke(ctx, ResponseService_SubmitResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) SubmitAIResponse(ctx context.Context, in *SubmitAIResponseRequest, opts ...grpc.CallOption) (*SubmitAIResponseResponse, error) {
	out := new(SubmitAIResponseResponse)
	err := c.cc.Invoke(ctx, ResponseService_SubmitAIResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, ResponseService_CreateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponseServiceServer is the server API for ResponseService service.
// All implementations should embed UnimplementedResponseServiceServer
// for forward compatibility
type ResponseServiceServer interface {
	GetNumberOfResponsesByStudentID(context.Context, *GetNumberOfResponsesByStudentIDRequest) (*GetNumberOfResponsesByStudentIDResponse, error)
	GetNumberOfResponsesByFormID(context.Context, *GetNumberOfResponsesByFormIDRequest) (*GetNumberOfResponsesByFormIDResponse, error)
	GetResponseListByFormID(context.Context, *GetResponseListByFormIDRequest) (*GetResponseListByFormIDResponse, error)
	SubmitResponse(context.Context, *SubmitResponseRequest) (*SubmitResponseResponse, error)
	SubmitAIResponse(context.Context, *SubmitAIResponseRequest) (*SubmitAIResponseResponse, error)
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
}

// UnimplementedResponseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResponseServiceServer struct {
}

func (UnimplementedResponseServiceServer) GetNumberOfResponsesByStudentID(context.Context, *GetNumberOfResponsesByStudentIDRequest) (*GetNumberOfResponsesByStudentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfResponsesByStudentID not implemented")
}
func (UnimplementedResponseServiceServer) GetNumberOfResponsesByFormID(context.Context, *GetNumberOfResponsesByFormIDRequest) (*GetNumberOfResponsesByFormIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfResponsesByFormID not implemented")
}
func (UnimplementedResponseServiceServer) GetResponseListByFormID(context.Context, *GetResponseListByFormIDRequest) (*GetResponseListByFormIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponseListByFormID not implemented")
}
func (UnimplementedResponseServiceServer) SubmitResponse(context.Context, *SubmitResponseRequest) (*SubmitResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResponse not implemented")
}
func (UnimplementedResponseServiceServer) SubmitAIResponse(context.Context, *SubmitAIResponseRequest) (*SubmitAIResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAIResponse not implemented")
}
func (UnimplementedResponseServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}

// UnsafeResponseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponseServiceServer will
// result in compilation errors.
type UnsafeResponseServiceServer interface {
	mustEmbedUnimplementedResponseServiceServer()
}

func RegisterResponseServiceServer(s grpc.ServiceRegistrar, srv ResponseServiceServer) {
	s.RegisterService(&ResponseService_ServiceDesc, srv)
}

func _ResponseService_GetNumberOfResponsesByStudentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfResponsesByStudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).GetNumberOfResponsesByStudentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_GetNumberOfResponsesByStudentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).GetNumberOfResponsesByStudentID(ctx, req.(*GetNumberOfResponsesByStudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponseService_GetNumberOfResponsesByFormID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfResponsesByFormIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).GetNumberOfResponsesByFormID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_GetNumberOfResponsesByFormID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).GetNumberOfResponsesByFormID(ctx, req.(*GetNumberOfResponsesByFormIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponseService_GetResponseListByFormID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseListByFormIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).GetResponseListByFormID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_GetResponseListByFormID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).GetResponseListByFormID(ctx, req.(*GetResponseListByFormIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponseService_SubmitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).SubmitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_SubmitResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).SubmitResponse(ctx, req.(*SubmitResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponseService_SubmitAIResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAIResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).SubmitAIResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_SubmitAIResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).SubmitAIResponse(ctx, req.(*SubmitAIResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponseService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponseService_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponseService_ServiceDesc is the grpc.ServiceDesc for ResponseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.ResponseService",
	HandlerType: (*ResponseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberOfResponsesByStudentID",
			Handler:    _ResponseService_GetNumberOfResponsesByStudentID_Handler,
		},
		{
			MethodName: "GetNumberOfResponsesByFormID",
			Handler:    _ResponseService_GetNumberOfResponsesByFormID_Handler,
		},
		{
			MethodName: "GetResponseListByFormID",
			Handler:    _ResponseService_GetResponseListByFormID_Handler,
		},
		{
			MethodName: "SubmitResponse",
			Handler:    _ResponseService_SubmitResponse_Handler,
		},
		{
			MethodName: "SubmitAIResponse",
			Handler:    _ResponseService_SubmitAIResponse_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _ResponseService_CreateDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/response.proto",
}
