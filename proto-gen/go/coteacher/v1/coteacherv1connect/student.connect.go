// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/student.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StudentServiceName is the fully-qualified name of the StudentService service.
	StudentServiceName = "coteacher.v1.StudentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StudentServiceCheckStudentExistsByIDProcedure is the fully-qualified name of the StudentService's
	// CheckStudentExistsByID RPC.
	StudentServiceCheckStudentExistsByIDProcedure = "/coteacher.v1.StudentService/CheckStudentExistsByID"
	// StudentServiceCheckStudentExistsByEmailProcedure is the fully-qualified name of the
	// StudentService's CheckStudentExistsByEmail RPC.
	StudentServiceCheckStudentExistsByEmailProcedure = "/coteacher.v1.StudentService/CheckStudentExistsByEmail"
	// StudentServiceParticipateClassProcedure is the fully-qualified name of the StudentService's
	// ParticipateClass RPC.
	StudentServiceParticipateClassProcedure = "/coteacher.v1.StudentService/ParticipateClass"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	studentServiceServiceDescriptor                         = v1.File_coteacher_v1_student_proto.Services().ByName("StudentService")
	studentServiceCheckStudentExistsByIDMethodDescriptor    = studentServiceServiceDescriptor.Methods().ByName("CheckStudentExistsByID")
	studentServiceCheckStudentExistsByEmailMethodDescriptor = studentServiceServiceDescriptor.Methods().ByName("CheckStudentExistsByEmail")
	studentServiceParticipateClassMethodDescriptor          = studentServiceServiceDescriptor.Methods().ByName("ParticipateClass")
)

// StudentServiceClient is a client for the coteacher.v1.StudentService service.
type StudentServiceClient interface {
	CheckStudentExistsByID(context.Context, *connect.Request[v1.CheckStudentExistsByIDRequest]) (*connect.Response[v1.CheckStudentExistsByIDResponse], error)
	CheckStudentExistsByEmail(context.Context, *connect.Request[v1.CheckStudentExistsByEmailRequest]) (*connect.Response[v1.CheckStudentExistsByEmailResponse], error)
	ParticipateClass(context.Context, *connect.Request[v1.ParticipateClassRequest]) (*connect.Response[v1.ParticipateClassResponse], error)
}

// NewStudentServiceClient constructs a client for the coteacher.v1.StudentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStudentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StudentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &studentServiceClient{
		checkStudentExistsByID: connect.NewClient[v1.CheckStudentExistsByIDRequest, v1.CheckStudentExistsByIDResponse](
			httpClient,
			baseURL+StudentServiceCheckStudentExistsByIDProcedure,
			connect.WithSchema(studentServiceCheckStudentExistsByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkStudentExistsByEmail: connect.NewClient[v1.CheckStudentExistsByEmailRequest, v1.CheckStudentExistsByEmailResponse](
			httpClient,
			baseURL+StudentServiceCheckStudentExistsByEmailProcedure,
			connect.WithSchema(studentServiceCheckStudentExistsByEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		participateClass: connect.NewClient[v1.ParticipateClassRequest, v1.ParticipateClassResponse](
			httpClient,
			baseURL+StudentServiceParticipateClassProcedure,
			connect.WithSchema(studentServiceParticipateClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// studentServiceClient implements StudentServiceClient.
type studentServiceClient struct {
	checkStudentExistsByID    *connect.Client[v1.CheckStudentExistsByIDRequest, v1.CheckStudentExistsByIDResponse]
	checkStudentExistsByEmail *connect.Client[v1.CheckStudentExistsByEmailRequest, v1.CheckStudentExistsByEmailResponse]
	participateClass          *connect.Client[v1.ParticipateClassRequest, v1.ParticipateClassResponse]
}

// CheckStudentExistsByID calls coteacher.v1.StudentService.CheckStudentExistsByID.
func (c *studentServiceClient) CheckStudentExistsByID(ctx context.Context, req *connect.Request[v1.CheckStudentExistsByIDRequest]) (*connect.Response[v1.CheckStudentExistsByIDResponse], error) {
	return c.checkStudentExistsByID.CallUnary(ctx, req)
}

// CheckStudentExistsByEmail calls coteacher.v1.StudentService.CheckStudentExistsByEmail.
func (c *studentServiceClient) CheckStudentExistsByEmail(ctx context.Context, req *connect.Request[v1.CheckStudentExistsByEmailRequest]) (*connect.Response[v1.CheckStudentExistsByEmailResponse], error) {
	return c.checkStudentExistsByEmail.CallUnary(ctx, req)
}

// ParticipateClass calls coteacher.v1.StudentService.ParticipateClass.
func (c *studentServiceClient) ParticipateClass(ctx context.Context, req *connect.Request[v1.ParticipateClassRequest]) (*connect.Response[v1.ParticipateClassResponse], error) {
	return c.participateClass.CallUnary(ctx, req)
}

// StudentServiceHandler is an implementation of the coteacher.v1.StudentService service.
type StudentServiceHandler interface {
	CheckStudentExistsByID(context.Context, *connect.Request[v1.CheckStudentExistsByIDRequest]) (*connect.Response[v1.CheckStudentExistsByIDResponse], error)
	CheckStudentExistsByEmail(context.Context, *connect.Request[v1.CheckStudentExistsByEmailRequest]) (*connect.Response[v1.CheckStudentExistsByEmailResponse], error)
	ParticipateClass(context.Context, *connect.Request[v1.ParticipateClassRequest]) (*connect.Response[v1.ParticipateClassResponse], error)
}

// NewStudentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStudentServiceHandler(svc StudentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	studentServiceCheckStudentExistsByIDHandler := connect.NewUnaryHandler(
		StudentServiceCheckStudentExistsByIDProcedure,
		svc.CheckStudentExistsByID,
		connect.WithSchema(studentServiceCheckStudentExistsByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentServiceCheckStudentExistsByEmailHandler := connect.NewUnaryHandler(
		StudentServiceCheckStudentExistsByEmailProcedure,
		svc.CheckStudentExistsByEmail,
		connect.WithSchema(studentServiceCheckStudentExistsByEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentServiceParticipateClassHandler := connect.NewUnaryHandler(
		StudentServiceParticipateClassProcedure,
		svc.ParticipateClass,
		connect.WithSchema(studentServiceParticipateClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.StudentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StudentServiceCheckStudentExistsByIDProcedure:
			studentServiceCheckStudentExistsByIDHandler.ServeHTTP(w, r)
		case StudentServiceCheckStudentExistsByEmailProcedure:
			studentServiceCheckStudentExistsByEmailHandler.ServeHTTP(w, r)
		case StudentServiceParticipateClassProcedure:
			studentServiceParticipateClassHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStudentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStudentServiceHandler struct{}

func (UnimplementedStudentServiceHandler) CheckStudentExistsByID(context.Context, *connect.Request[v1.CheckStudentExistsByIDRequest]) (*connect.Response[v1.CheckStudentExistsByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentService.CheckStudentExistsByID is not implemented"))
}

func (UnimplementedStudentServiceHandler) CheckStudentExistsByEmail(context.Context, *connect.Request[v1.CheckStudentExistsByEmailRequest]) (*connect.Response[v1.CheckStudentExistsByEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentService.CheckStudentExistsByEmail is not implemented"))
}

func (UnimplementedStudentServiceHandler) ParticipateClass(context.Context, *connect.Request[v1.ParticipateClassRequest]) (*connect.Response[v1.ParticipateClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentService.ParticipateClass is not implemented"))
}
