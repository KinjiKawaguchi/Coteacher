// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/class.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClassServiceName is the fully-qualified name of the ClassService service.
	ClassServiceName = "coteacher.v1.ClassService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClassServiceCreateClassProcedure is the fully-qualified name of the ClassService's CreateClass
	// RPC.
	ClassServiceCreateClassProcedure = "/coteacher.v1.ClassService/CreateClass"
	// ClassServiceGetClassByIDProcedure is the fully-qualified name of the ClassService's GetClassByID
	// RPC.
	ClassServiceGetClassByIDProcedure = "/coteacher.v1.ClassService/GetClassByID"
	// ClassServiceGetClassListByTeacherIDProcedure is the fully-qualified name of the ClassService's
	// GetClassListByTeacherID RPC.
	ClassServiceGetClassListByTeacherIDProcedure = "/coteacher.v1.ClassService/GetClassListByTeacherID"
	// ClassServiceUpdateClassProcedure is the fully-qualified name of the ClassService's UpdateClass
	// RPC.
	ClassServiceUpdateClassProcedure = "/coteacher.v1.ClassService/UpdateClass"
	// ClassServiceDeleteClassProcedure is the fully-qualified name of the ClassService's DeleteClass
	// RPC.
	ClassServiceDeleteClassProcedure = "/coteacher.v1.ClassService/DeleteClass"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	classServiceServiceDescriptor                       = v1.File_coteacher_v1_class_proto.Services().ByName("ClassService")
	classServiceCreateClassMethodDescriptor             = classServiceServiceDescriptor.Methods().ByName("CreateClass")
	classServiceGetClassByIDMethodDescriptor            = classServiceServiceDescriptor.Methods().ByName("GetClassByID")
	classServiceGetClassListByTeacherIDMethodDescriptor = classServiceServiceDescriptor.Methods().ByName("GetClassListByTeacherID")
	classServiceUpdateClassMethodDescriptor             = classServiceServiceDescriptor.Methods().ByName("UpdateClass")
	classServiceDeleteClassMethodDescriptor             = classServiceServiceDescriptor.Methods().ByName("DeleteClass")
)

// ClassServiceClient is a client for the coteacher.v1.ClassService service.
type ClassServiceClient interface {
	CreateClass(context.Context, *connect.Request[v1.CreateClassRequest]) (*connect.Response[v1.CreateClassResponse], error)
	GetClassByID(context.Context, *connect.Request[v1.GetClassByIDRequest]) (*connect.Response[v1.GetClassByIDResponse], error)
	GetClassListByTeacherID(context.Context, *connect.Request[v1.GetClassListByTeacherIDRequest]) (*connect.Response[v1.GetClassListByTeacherIDResponse], error)
	UpdateClass(context.Context, *connect.Request[v1.UpdateClassRequest]) (*connect.Response[v1.UpdateClassResponse], error)
	DeleteClass(context.Context, *connect.Request[v1.DeleteClassRequest]) (*connect.Response[v1.DeleteClassResponse], error)
}

// NewClassServiceClient constructs a client for the coteacher.v1.ClassService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClassServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClassServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &classServiceClient{
		createClass: connect.NewClient[v1.CreateClassRequest, v1.CreateClassResponse](
			httpClient,
			baseURL+ClassServiceCreateClassProcedure,
			connect.WithSchema(classServiceCreateClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getClassByID: connect.NewClient[v1.GetClassByIDRequest, v1.GetClassByIDResponse](
			httpClient,
			baseURL+ClassServiceGetClassByIDProcedure,
			connect.WithSchema(classServiceGetClassByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getClassListByTeacherID: connect.NewClient[v1.GetClassListByTeacherIDRequest, v1.GetClassListByTeacherIDResponse](
			httpClient,
			baseURL+ClassServiceGetClassListByTeacherIDProcedure,
			connect.WithSchema(classServiceGetClassListByTeacherIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateClass: connect.NewClient[v1.UpdateClassRequest, v1.UpdateClassResponse](
			httpClient,
			baseURL+ClassServiceUpdateClassProcedure,
			connect.WithSchema(classServiceUpdateClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteClass: connect.NewClient[v1.DeleteClassRequest, v1.DeleteClassResponse](
			httpClient,
			baseURL+ClassServiceDeleteClassProcedure,
			connect.WithSchema(classServiceDeleteClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// classServiceClient implements ClassServiceClient.
type classServiceClient struct {
	createClass             *connect.Client[v1.CreateClassRequest, v1.CreateClassResponse]
	getClassByID            *connect.Client[v1.GetClassByIDRequest, v1.GetClassByIDResponse]
	getClassListByTeacherID *connect.Client[v1.GetClassListByTeacherIDRequest, v1.GetClassListByTeacherIDResponse]
	updateClass             *connect.Client[v1.UpdateClassRequest, v1.UpdateClassResponse]
	deleteClass             *connect.Client[v1.DeleteClassRequest, v1.DeleteClassResponse]
}

// CreateClass calls coteacher.v1.ClassService.CreateClass.
func (c *classServiceClient) CreateClass(ctx context.Context, req *connect.Request[v1.CreateClassRequest]) (*connect.Response[v1.CreateClassResponse], error) {
	return c.createClass.CallUnary(ctx, req)
}

// GetClassByID calls coteacher.v1.ClassService.GetClassByID.
func (c *classServiceClient) GetClassByID(ctx context.Context, req *connect.Request[v1.GetClassByIDRequest]) (*connect.Response[v1.GetClassByIDResponse], error) {
	return c.getClassByID.CallUnary(ctx, req)
}

// GetClassListByTeacherID calls coteacher.v1.ClassService.GetClassListByTeacherID.
func (c *classServiceClient) GetClassListByTeacherID(ctx context.Context, req *connect.Request[v1.GetClassListByTeacherIDRequest]) (*connect.Response[v1.GetClassListByTeacherIDResponse], error) {
	return c.getClassListByTeacherID.CallUnary(ctx, req)
}

// UpdateClass calls coteacher.v1.ClassService.UpdateClass.
func (c *classServiceClient) UpdateClass(ctx context.Context, req *connect.Request[v1.UpdateClassRequest]) (*connect.Response[v1.UpdateClassResponse], error) {
	return c.updateClass.CallUnary(ctx, req)
}

// DeleteClass calls coteacher.v1.ClassService.DeleteClass.
func (c *classServiceClient) DeleteClass(ctx context.Context, req *connect.Request[v1.DeleteClassRequest]) (*connect.Response[v1.DeleteClassResponse], error) {
	return c.deleteClass.CallUnary(ctx, req)
}

// ClassServiceHandler is an implementation of the coteacher.v1.ClassService service.
type ClassServiceHandler interface {
	CreateClass(context.Context, *connect.Request[v1.CreateClassRequest]) (*connect.Response[v1.CreateClassResponse], error)
	GetClassByID(context.Context, *connect.Request[v1.GetClassByIDRequest]) (*connect.Response[v1.GetClassByIDResponse], error)
	GetClassListByTeacherID(context.Context, *connect.Request[v1.GetClassListByTeacherIDRequest]) (*connect.Response[v1.GetClassListByTeacherIDResponse], error)
	UpdateClass(context.Context, *connect.Request[v1.UpdateClassRequest]) (*connect.Response[v1.UpdateClassResponse], error)
	DeleteClass(context.Context, *connect.Request[v1.DeleteClassRequest]) (*connect.Response[v1.DeleteClassResponse], error)
}

// NewClassServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClassServiceHandler(svc ClassServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	classServiceCreateClassHandler := connect.NewUnaryHandler(
		ClassServiceCreateClassProcedure,
		svc.CreateClass,
		connect.WithSchema(classServiceCreateClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	classServiceGetClassByIDHandler := connect.NewUnaryHandler(
		ClassServiceGetClassByIDProcedure,
		svc.GetClassByID,
		connect.WithSchema(classServiceGetClassByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	classServiceGetClassListByTeacherIDHandler := connect.NewUnaryHandler(
		ClassServiceGetClassListByTeacherIDProcedure,
		svc.GetClassListByTeacherID,
		connect.WithSchema(classServiceGetClassListByTeacherIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	classServiceUpdateClassHandler := connect.NewUnaryHandler(
		ClassServiceUpdateClassProcedure,
		svc.UpdateClass,
		connect.WithSchema(classServiceUpdateClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	classServiceDeleteClassHandler := connect.NewUnaryHandler(
		ClassServiceDeleteClassProcedure,
		svc.DeleteClass,
		connect.WithSchema(classServiceDeleteClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.ClassService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClassServiceCreateClassProcedure:
			classServiceCreateClassHandler.ServeHTTP(w, r)
		case ClassServiceGetClassByIDProcedure:
			classServiceGetClassByIDHandler.ServeHTTP(w, r)
		case ClassServiceGetClassListByTeacherIDProcedure:
			classServiceGetClassListByTeacherIDHandler.ServeHTTP(w, r)
		case ClassServiceUpdateClassProcedure:
			classServiceUpdateClassHandler.ServeHTTP(w, r)
		case ClassServiceDeleteClassProcedure:
			classServiceDeleteClassHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClassServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClassServiceHandler struct{}

func (UnimplementedClassServiceHandler) CreateClass(context.Context, *connect.Request[v1.CreateClassRequest]) (*connect.Response[v1.CreateClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.ClassService.CreateClass is not implemented"))
}

func (UnimplementedClassServiceHandler) GetClassByID(context.Context, *connect.Request[v1.GetClassByIDRequest]) (*connect.Response[v1.GetClassByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.ClassService.GetClassByID is not implemented"))
}

func (UnimplementedClassServiceHandler) GetClassListByTeacherID(context.Context, *connect.Request[v1.GetClassListByTeacherIDRequest]) (*connect.Response[v1.GetClassListByTeacherIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.ClassService.GetClassListByTeacherID is not implemented"))
}

func (UnimplementedClassServiceHandler) UpdateClass(context.Context, *connect.Request[v1.UpdateClassRequest]) (*connect.Response[v1.UpdateClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.ClassService.UpdateClass is not implemented"))
}

func (UnimplementedClassServiceHandler) DeleteClass(context.Context, *connect.Request[v1.DeleteClassRequest]) (*connect.Response[v1.DeleteClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.ClassService.DeleteClass is not implemented"))
}
