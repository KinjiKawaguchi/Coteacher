// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/form.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FormService_CreateForm_FullMethodName           = "/coteacher.v1.FormService/CreateForm"
	FormService_GetFormByID_FullMethodName          = "/coteacher.v1.FormService/GetFormByID"
	FormService_GetFormListByClassID_FullMethodName = "/coteacher.v1.FormService/GetFormListByClassID"
	FormService_UpdateForm_FullMethodName           = "/coteacher.v1.FormService/UpdateForm"
	FormService_DeleteForm_FullMethodName           = "/coteacher.v1.FormService/DeleteForm"
)

// FormServiceClient is the client API for FormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormServiceClient interface {
	CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error)
	GetFormByID(ctx context.Context, in *GetFormByIDRequest, opts ...grpc.CallOption) (*GetFormByIDResponse, error)
	GetFormListByClassID(ctx context.Context, in *GetFormListByClassIDRequest, opts ...grpc.CallOption) (*GetFormListByClassIDResponse, error)
	UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*UpdateFormResponse, error)
	DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*DeleteFormResponse, error)
}

type formServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormServiceClient(cc grpc.ClientConnInterface) FormServiceClient {
	return &formServiceClient{cc}
}

func (c *formServiceClient) CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error) {
	out := new(CreateFormResponse)
	err := c.cc.Invoke(ctx, FormService_CreateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormByID(ctx context.Context, in *GetFormByIDRequest, opts ...grpc.CallOption) (*GetFormByIDResponse, error) {
	out := new(GetFormByIDResponse)
	err := c.cc.Invoke(ctx, FormService_GetFormByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormListByClassID(ctx context.Context, in *GetFormListByClassIDRequest, opts ...grpc.CallOption) (*GetFormListByClassIDResponse, error) {
	out := new(GetFormListByClassIDResponse)
	err := c.cc.Invoke(ctx, FormService_GetFormListByClassID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*UpdateFormResponse, error) {
	out := new(UpdateFormResponse)
	err := c.cc.Invoke(ctx, FormService_UpdateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*DeleteFormResponse, error) {
	out := new(DeleteFormResponse)
	err := c.cc.Invoke(ctx, FormService_DeleteForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServiceServer is the server API for FormService service.
// All implementations should embed UnimplementedFormServiceServer
// for forward compatibility
type FormServiceServer interface {
	CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error)
	GetFormByID(context.Context, *GetFormByIDRequest) (*GetFormByIDResponse, error)
	GetFormListByClassID(context.Context, *GetFormListByClassIDRequest) (*GetFormListByClassIDResponse, error)
	UpdateForm(context.Context, *UpdateFormRequest) (*UpdateFormResponse, error)
	DeleteForm(context.Context, *DeleteFormRequest) (*DeleteFormResponse, error)
}

// UnimplementedFormServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFormServiceServer struct {
}

func (UnimplementedFormServiceServer) CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (UnimplementedFormServiceServer) GetFormByID(context.Context, *GetFormByIDRequest) (*GetFormByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormByID not implemented")
}
func (UnimplementedFormServiceServer) GetFormListByClassID(context.Context, *GetFormListByClassIDRequest) (*GetFormListByClassIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormListByClassID not implemented")
}
func (UnimplementedFormServiceServer) UpdateForm(context.Context, *UpdateFormRequest) (*UpdateFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForm not implemented")
}
func (UnimplementedFormServiceServer) DeleteForm(context.Context, *DeleteFormRequest) (*DeleteFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForm not implemented")
}

// UnsafeFormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServiceServer will
// result in compilation errors.
type UnsafeFormServiceServer interface {
	mustEmbedUnimplementedFormServiceServer()
}

func RegisterFormServiceServer(s grpc.ServiceRegistrar, srv FormServiceServer) {
	s.RegisterService(&FormService_ServiceDesc, srv)
}

func _FormService_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateForm(ctx, req.(*CreateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormByID(ctx, req.(*GetFormByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormListByClassID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormListByClassIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormListByClassID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormListByClassID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormListByClassID(ctx, req.(*GetFormListByClassIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_UpdateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).UpdateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_UpdateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).UpdateForm(ctx, req.(*UpdateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteForm(ctx, req.(*DeleteFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormService_ServiceDesc is the grpc.ServiceDesc for FormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.FormService",
	HandlerType: (*FormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateForm",
			Handler:    _FormService_CreateForm_Handler,
		},
		{
			MethodName: "GetFormByID",
			Handler:    _FormService_GetFormByID_Handler,
		},
		{
			MethodName: "GetFormListByClassID",
			Handler:    _FormService_GetFormListByClassID_Handler,
		},
		{
			MethodName: "UpdateForm",
			Handler:    _FormService_UpdateForm_Handler,
		},
		{
			MethodName: "DeleteForm",
			Handler:    _FormService_DeleteForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/form.proto",
}
