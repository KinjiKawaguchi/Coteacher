// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/class.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClassService_GetClassByID_FullMethodName        = "/coteacher.v1.ClassService/GetClassByID"
	ClassService_GetClassByTeacherID_FullMethodName = "/coteacher.v1.ClassService/GetClassByTeacherID"
	ClassService_CreateClass_FullMethodName         = "/coteacher.v1.ClassService/CreateClass"
)

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	GetClassByID(ctx context.Context, in *GetClassByIDRequest, opts ...grpc.CallOption) (*GetClassByIDResponse, error)
	GetClassByTeacherID(ctx context.Context, in *GetClassByTeacherIDRequest, opts ...grpc.CallOption) (*GetClassByTeacherIDResponse, error)
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) GetClassByID(ctx context.Context, in *GetClassByIDRequest, opts ...grpc.CallOption) (*GetClassByIDResponse, error) {
	out := new(GetClassByIDResponse)
	err := c.cc.Invoke(ctx, ClassService_GetClassByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) GetClassByTeacherID(ctx context.Context, in *GetClassByTeacherIDRequest, opts ...grpc.CallOption) (*GetClassByTeacherIDResponse, error) {
	out := new(GetClassByTeacherIDResponse)
	err := c.cc.Invoke(ctx, ClassService_GetClassByTeacherID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error) {
	out := new(CreateClassResponse)
	err := c.cc.Invoke(ctx, ClassService_CreateClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations should embed UnimplementedClassServiceServer
// for forward compatibility
type ClassServiceServer interface {
	GetClassByID(context.Context, *GetClassByIDRequest) (*GetClassByIDResponse, error)
	GetClassByTeacherID(context.Context, *GetClassByTeacherIDRequest) (*GetClassByTeacherIDResponse, error)
	CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error)
}

// UnimplementedClassServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassServiceServer struct {
}

func (UnimplementedClassServiceServer) GetClassByID(context.Context, *GetClassByIDRequest) (*GetClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassByID not implemented")
}
func (UnimplementedClassServiceServer) GetClassByTeacherID(context.Context, *GetClassByTeacherIDRequest) (*GetClassByTeacherIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassByTeacherID not implemented")
}
func (UnimplementedClassServiceServer) CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	s.RegisterService(&ClassService_ServiceDesc, srv)
}

func _ClassService_GetClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).GetClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_GetClassByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).GetClassByID(ctx, req.(*GetClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_GetClassByTeacherID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassByTeacherIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).GetClassByTeacherID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_GetClassByTeacherID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).GetClassByTeacherID(ctx, req.(*GetClassByTeacherIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_CreateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassService_ServiceDesc is the grpc.ServiceDesc for ClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassByID",
			Handler:    _ClassService_GetClassByID_Handler,
		},
		{
			MethodName: "GetClassByTeacherID",
			Handler:    _ClassService_GetClassByTeacherID_Handler,
		},
		{
			MethodName: "CreateClass",
			Handler:    _ClassService_CreateClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/class.proto",
}
