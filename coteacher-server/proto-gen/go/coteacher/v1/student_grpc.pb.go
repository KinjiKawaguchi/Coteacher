// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/student.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StudentService_CheckStudentExistsByID_FullMethodName    = "/coteacher.v1.StudentService/CheckStudentExistsByID"
	StudentService_CheckStudentExistsByEmail_FullMethodName = "/coteacher.v1.StudentService/CheckStudentExistsByEmail"
	StudentService_ParticipateClass_FullMethodName          = "/coteacher.v1.StudentService/ParticipateClass"
	StudentService_QuitClass_FullMethodName                 = "/coteacher.v1.StudentService/QuitClass"
)

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	CheckStudentExistsByID(ctx context.Context, in *CheckStudentExistsByIDRequest, opts ...grpc.CallOption) (*CheckStudentExistsByIDResponse, error)
	CheckStudentExistsByEmail(ctx context.Context, in *CheckStudentExistsByEmailRequest, opts ...grpc.CallOption) (*CheckStudentExistsByEmailResponse, error)
	ParticipateClass(ctx context.Context, in *ParticipateClassRequest, opts ...grpc.CallOption) (*ParticipateClassResponse, error)
	QuitClass(ctx context.Context, in *QuitClassRequest, opts ...grpc.CallOption) (*QuitClassResponse, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) CheckStudentExistsByID(ctx context.Context, in *CheckStudentExistsByIDRequest, opts ...grpc.CallOption) (*CheckStudentExistsByIDResponse, error) {
	out := new(CheckStudentExistsByIDResponse)
	err := c.cc.Invoke(ctx, StudentService_CheckStudentExistsByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) CheckStudentExistsByEmail(ctx context.Context, in *CheckStudentExistsByEmailRequest, opts ...grpc.CallOption) (*CheckStudentExistsByEmailResponse, error) {
	out := new(CheckStudentExistsByEmailResponse)
	err := c.cc.Invoke(ctx, StudentService_CheckStudentExistsByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) ParticipateClass(ctx context.Context, in *ParticipateClassRequest, opts ...grpc.CallOption) (*ParticipateClassResponse, error) {
	out := new(ParticipateClassResponse)
	err := c.cc.Invoke(ctx, StudentService_ParticipateClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) QuitClass(ctx context.Context, in *QuitClassRequest, opts ...grpc.CallOption) (*QuitClassResponse, error) {
	out := new(QuitClassResponse)
	err := c.cc.Invoke(ctx, StudentService_QuitClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations should embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	CheckStudentExistsByID(context.Context, *CheckStudentExistsByIDRequest) (*CheckStudentExistsByIDResponse, error)
	CheckStudentExistsByEmail(context.Context, *CheckStudentExistsByEmailRequest) (*CheckStudentExistsByEmailResponse, error)
	ParticipateClass(context.Context, *ParticipateClassRequest) (*ParticipateClassResponse, error)
	QuitClass(context.Context, *QuitClassRequest) (*QuitClassResponse, error)
}

// UnimplementedStudentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) CheckStudentExistsByID(context.Context, *CheckStudentExistsByIDRequest) (*CheckStudentExistsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStudentExistsByID not implemented")
}
func (UnimplementedStudentServiceServer) CheckStudentExistsByEmail(context.Context, *CheckStudentExistsByEmailRequest) (*CheckStudentExistsByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStudentExistsByEmail not implemented")
}
func (UnimplementedStudentServiceServer) ParticipateClass(context.Context, *ParticipateClassRequest) (*ParticipateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateClass not implemented")
}
func (UnimplementedStudentServiceServer) QuitClass(context.Context, *QuitClassRequest) (*QuitClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitClass not implemented")
}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_CheckStudentExistsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStudentExistsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).CheckStudentExistsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_CheckStudentExistsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).CheckStudentExistsByID(ctx, req.(*CheckStudentExistsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_CheckStudentExistsByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStudentExistsByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).CheckStudentExistsByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_CheckStudentExistsByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).CheckStudentExistsByEmail(ctx, req.(*CheckStudentExistsByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ParticipateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ParticipateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_ParticipateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ParticipateClass(ctx, req.(*ParticipateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_QuitClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).QuitClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_QuitClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).QuitClass(ctx, req.(*QuitClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStudentExistsByID",
			Handler:    _StudentService_CheckStudentExistsByID_Handler,
		},
		{
			MethodName: "CheckStudentExistsByEmail",
			Handler:    _StudentService_CheckStudentExistsByEmail_Handler,
		},
		{
			MethodName: "ParticipateClass",
			Handler:    _StudentService_ParticipateClass_Handler,
		},
		{
			MethodName: "QuitClass",
			Handler:    _StudentService_QuitClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/student.proto",
}
