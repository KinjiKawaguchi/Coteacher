// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/user.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "coteacher.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/coteacher.v1.UserService/CreateUser"
	// UserServiceGetUserByIDProcedure is the fully-qualified name of the UserService's GetUserByID RPC.
	UserServiceGetUserByIDProcedure = "/coteacher.v1.UserService/GetUserByID"
	// UserServiceGetUserByEmailProcedure is the fully-qualified name of the UserService's
	// GetUserByEmail RPC.
	UserServiceGetUserByEmailProcedure = "/coteacher.v1.UserService/GetUserByEmail"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/coteacher.v1.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/coteacher.v1.UserService/DeleteUser"
	// UserServiceCheckUserExistsByEmailProcedure is the fully-qualified name of the UserService's
	// CheckUserExistsByEmail RPC.
	UserServiceCheckUserExistsByEmailProcedure = "/coteacher.v1.UserService/CheckUserExistsByEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor                      = v1.File_coteacher_v1_user_proto.Services().ByName("UserService")
	userServiceCreateUserMethodDescriptor             = userServiceServiceDescriptor.Methods().ByName("CreateUser")
	userServiceGetUserByIDMethodDescriptor            = userServiceServiceDescriptor.Methods().ByName("GetUserByID")
	userServiceGetUserByEmailMethodDescriptor         = userServiceServiceDescriptor.Methods().ByName("GetUserByEmail")
	userServiceUpdateUserMethodDescriptor             = userServiceServiceDescriptor.Methods().ByName("UpdateUser")
	userServiceDeleteUserMethodDescriptor             = userServiceServiceDescriptor.Methods().ByName("DeleteUser")
	userServiceCheckUserExistsByEmailMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("CheckUserExistsByEmail")
)

// UserServiceClient is a client for the coteacher.v1.UserService service.
type UserServiceClient interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error)
	GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.GetUserByEmailResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	CheckUserExistsByEmail(context.Context, *connect.Request[v1.CheckUserExistsByEmailRequest]) (*connect.Response[v1.CheckUserExistsByEmailResponse], error)
}

// NewUserServiceClient constructs a client for the coteacher.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserByID: connect.NewClient[v1.GetUserByIDRequest, v1.GetUserByIDResponse](
			httpClient,
			baseURL+UserServiceGetUserByIDProcedure,
			connect.WithSchema(userServiceGetUserByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserByEmail: connect.NewClient[v1.GetUserByEmailRequest, v1.GetUserByEmailResponse](
			httpClient,
			baseURL+UserServiceGetUserByEmailProcedure,
			connect.WithSchema(userServiceGetUserByEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkUserExistsByEmail: connect.NewClient[v1.CheckUserExistsByEmailRequest, v1.CheckUserExistsByEmailResponse](
			httpClient,
			baseURL+UserServiceCheckUserExistsByEmailProcedure,
			connect.WithSchema(userServiceCheckUserExistsByEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser             *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUserByID            *connect.Client[v1.GetUserByIDRequest, v1.GetUserByIDResponse]
	getUserByEmail         *connect.Client[v1.GetUserByEmailRequest, v1.GetUserByEmailResponse]
	updateUser             *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser             *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	checkUserExistsByEmail *connect.Client[v1.CheckUserExistsByEmailRequest, v1.CheckUserExistsByEmailResponse]
}

// CreateUser calls coteacher.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUserByID calls coteacher.v1.UserService.GetUserByID.
func (c *userServiceClient) GetUserByID(ctx context.Context, req *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error) {
	return c.getUserByID.CallUnary(ctx, req)
}

// GetUserByEmail calls coteacher.v1.UserService.GetUserByEmail.
func (c *userServiceClient) GetUserByEmail(ctx context.Context, req *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.GetUserByEmailResponse], error) {
	return c.getUserByEmail.CallUnary(ctx, req)
}

// UpdateUser calls coteacher.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls coteacher.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// CheckUserExistsByEmail calls coteacher.v1.UserService.CheckUserExistsByEmail.
func (c *userServiceClient) CheckUserExistsByEmail(ctx context.Context, req *connect.Request[v1.CheckUserExistsByEmailRequest]) (*connect.Response[v1.CheckUserExistsByEmailResponse], error) {
	return c.checkUserExistsByEmail.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the coteacher.v1.UserService service.
type UserServiceHandler interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error)
	GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.GetUserByEmailResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	CheckUserExistsByEmail(context.Context, *connect.Request[v1.CheckUserExistsByEmailRequest]) (*connect.Response[v1.CheckUserExistsByEmailResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserByIDHandler := connect.NewUnaryHandler(
		UserServiceGetUserByIDProcedure,
		svc.GetUserByID,
		connect.WithSchema(userServiceGetUserByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserByEmailHandler := connect.NewUnaryHandler(
		UserServiceGetUserByEmailProcedure,
		svc.GetUserByEmail,
		connect.WithSchema(userServiceGetUserByEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCheckUserExistsByEmailHandler := connect.NewUnaryHandler(
		UserServiceCheckUserExistsByEmailProcedure,
		svc.CheckUserExistsByEmail,
		connect.WithSchema(userServiceCheckUserExistsByEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserByIDProcedure:
			userServiceGetUserByIDHandler.ServeHTTP(w, r)
		case UserServiceGetUserByEmailProcedure:
			userServiceGetUserByEmailHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceCheckUserExistsByEmailProcedure:
			userServiceCheckUserExistsByEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.GetUserByID is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByEmail(context.Context, *connect.Request[v1.GetUserByEmailRequest]) (*connect.Response[v1.GetUserByEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.GetUserByEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) CheckUserExistsByEmail(context.Context, *connect.Request[v1.CheckUserExistsByEmailRequest]) (*connect.Response[v1.CheckUserExistsByEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.UserService.CheckUserExistsByEmail is not implemented"))
}
