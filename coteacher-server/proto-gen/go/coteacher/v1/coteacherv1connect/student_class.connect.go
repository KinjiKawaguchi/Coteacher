// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/student_class.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StudentClassServiceName is the fully-qualified name of the StudentClassService service.
	StudentClassServiceName = "coteacher.v1.StudentClassService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StudentClassServiceCreateStudentClassProcedure is the fully-qualified name of the
	// StudentClassService's CreateStudentClass RPC.
	StudentClassServiceCreateStudentClassProcedure = "/coteacher.v1.StudentClassService/CreateStudentClass"
	// StudentClassServiceGetStudentListByClassIDProcedure is the fully-qualified name of the
	// StudentClassService's GetStudentListByClassID RPC.
	StudentClassServiceGetStudentListByClassIDProcedure = "/coteacher.v1.StudentClassService/GetStudentListByClassID"
	// StudentClassServiceGetClassListByStudentIDProcedure is the fully-qualified name of the
	// StudentClassService's GetClassListByStudentID RPC.
	StudentClassServiceGetClassListByStudentIDProcedure = "/coteacher.v1.StudentClassService/GetClassListByStudentID"
	// StudentClassServiceDeleteStudentClassProcedure is the fully-qualified name of the
	// StudentClassService's DeleteStudentClass RPC.
	StudentClassServiceDeleteStudentClassProcedure = "/coteacher.v1.StudentClassService/DeleteStudentClass"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	studentClassServiceServiceDescriptor                       = v1.File_coteacher_v1_student_class_proto.Services().ByName("StudentClassService")
	studentClassServiceCreateStudentClassMethodDescriptor      = studentClassServiceServiceDescriptor.Methods().ByName("CreateStudentClass")
	studentClassServiceGetStudentListByClassIDMethodDescriptor = studentClassServiceServiceDescriptor.Methods().ByName("GetStudentListByClassID")
	studentClassServiceGetClassListByStudentIDMethodDescriptor = studentClassServiceServiceDescriptor.Methods().ByName("GetClassListByStudentID")
	studentClassServiceDeleteStudentClassMethodDescriptor      = studentClassServiceServiceDescriptor.Methods().ByName("DeleteStudentClass")
)

// StudentClassServiceClient is a client for the coteacher.v1.StudentClassService service.
type StudentClassServiceClient interface {
	CreateStudentClass(context.Context, *connect.Request[v1.CreateStudentClassRequest]) (*connect.Response[v1.CreateStudentClassResponse], error)
	GetStudentListByClassID(context.Context, *connect.Request[v1.GetStudentListByClassIDRequest]) (*connect.Response[v1.GetStudentListByClassIDResponse], error)
	GetClassListByStudentID(context.Context, *connect.Request[v1.GetClassListByStudentIDRequest]) (*connect.Response[v1.GetClassListByStudentIDResponse], error)
	DeleteStudentClass(context.Context, *connect.Request[v1.DeleteStudentClassRequest]) (*connect.Response[v1.DeleteStudentClassResponse], error)
}

// NewStudentClassServiceClient constructs a client for the coteacher.v1.StudentClassService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStudentClassServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StudentClassServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &studentClassServiceClient{
		createStudentClass: connect.NewClient[v1.CreateStudentClassRequest, v1.CreateStudentClassResponse](
			httpClient,
			baseURL+StudentClassServiceCreateStudentClassProcedure,
			connect.WithSchema(studentClassServiceCreateStudentClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStudentListByClassID: connect.NewClient[v1.GetStudentListByClassIDRequest, v1.GetStudentListByClassIDResponse](
			httpClient,
			baseURL+StudentClassServiceGetStudentListByClassIDProcedure,
			connect.WithSchema(studentClassServiceGetStudentListByClassIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getClassListByStudentID: connect.NewClient[v1.GetClassListByStudentIDRequest, v1.GetClassListByStudentIDResponse](
			httpClient,
			baseURL+StudentClassServiceGetClassListByStudentIDProcedure,
			connect.WithSchema(studentClassServiceGetClassListByStudentIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteStudentClass: connect.NewClient[v1.DeleteStudentClassRequest, v1.DeleteStudentClassResponse](
			httpClient,
			baseURL+StudentClassServiceDeleteStudentClassProcedure,
			connect.WithSchema(studentClassServiceDeleteStudentClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// studentClassServiceClient implements StudentClassServiceClient.
type studentClassServiceClient struct {
	createStudentClass      *connect.Client[v1.CreateStudentClassRequest, v1.CreateStudentClassResponse]
	getStudentListByClassID *connect.Client[v1.GetStudentListByClassIDRequest, v1.GetStudentListByClassIDResponse]
	getClassListByStudentID *connect.Client[v1.GetClassListByStudentIDRequest, v1.GetClassListByStudentIDResponse]
	deleteStudentClass      *connect.Client[v1.DeleteStudentClassRequest, v1.DeleteStudentClassResponse]
}

// CreateStudentClass calls coteacher.v1.StudentClassService.CreateStudentClass.
func (c *studentClassServiceClient) CreateStudentClass(ctx context.Context, req *connect.Request[v1.CreateStudentClassRequest]) (*connect.Response[v1.CreateStudentClassResponse], error) {
	return c.createStudentClass.CallUnary(ctx, req)
}

// GetStudentListByClassID calls coteacher.v1.StudentClassService.GetStudentListByClassID.
func (c *studentClassServiceClient) GetStudentListByClassID(ctx context.Context, req *connect.Request[v1.GetStudentListByClassIDRequest]) (*connect.Response[v1.GetStudentListByClassIDResponse], error) {
	return c.getStudentListByClassID.CallUnary(ctx, req)
}

// GetClassListByStudentID calls coteacher.v1.StudentClassService.GetClassListByStudentID.
func (c *studentClassServiceClient) GetClassListByStudentID(ctx context.Context, req *connect.Request[v1.GetClassListByStudentIDRequest]) (*connect.Response[v1.GetClassListByStudentIDResponse], error) {
	return c.getClassListByStudentID.CallUnary(ctx, req)
}

// DeleteStudentClass calls coteacher.v1.StudentClassService.DeleteStudentClass.
func (c *studentClassServiceClient) DeleteStudentClass(ctx context.Context, req *connect.Request[v1.DeleteStudentClassRequest]) (*connect.Response[v1.DeleteStudentClassResponse], error) {
	return c.deleteStudentClass.CallUnary(ctx, req)
}

// StudentClassServiceHandler is an implementation of the coteacher.v1.StudentClassService service.
type StudentClassServiceHandler interface {
	CreateStudentClass(context.Context, *connect.Request[v1.CreateStudentClassRequest]) (*connect.Response[v1.CreateStudentClassResponse], error)
	GetStudentListByClassID(context.Context, *connect.Request[v1.GetStudentListByClassIDRequest]) (*connect.Response[v1.GetStudentListByClassIDResponse], error)
	GetClassListByStudentID(context.Context, *connect.Request[v1.GetClassListByStudentIDRequest]) (*connect.Response[v1.GetClassListByStudentIDResponse], error)
	DeleteStudentClass(context.Context, *connect.Request[v1.DeleteStudentClassRequest]) (*connect.Response[v1.DeleteStudentClassResponse], error)
}

// NewStudentClassServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStudentClassServiceHandler(svc StudentClassServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	studentClassServiceCreateStudentClassHandler := connect.NewUnaryHandler(
		StudentClassServiceCreateStudentClassProcedure,
		svc.CreateStudentClass,
		connect.WithSchema(studentClassServiceCreateStudentClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentClassServiceGetStudentListByClassIDHandler := connect.NewUnaryHandler(
		StudentClassServiceGetStudentListByClassIDProcedure,
		svc.GetStudentListByClassID,
		connect.WithSchema(studentClassServiceGetStudentListByClassIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentClassServiceGetClassListByStudentIDHandler := connect.NewUnaryHandler(
		StudentClassServiceGetClassListByStudentIDProcedure,
		svc.GetClassListByStudentID,
		connect.WithSchema(studentClassServiceGetClassListByStudentIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentClassServiceDeleteStudentClassHandler := connect.NewUnaryHandler(
		StudentClassServiceDeleteStudentClassProcedure,
		svc.DeleteStudentClass,
		connect.WithSchema(studentClassServiceDeleteStudentClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.StudentClassService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StudentClassServiceCreateStudentClassProcedure:
			studentClassServiceCreateStudentClassHandler.ServeHTTP(w, r)
		case StudentClassServiceGetStudentListByClassIDProcedure:
			studentClassServiceGetStudentListByClassIDHandler.ServeHTTP(w, r)
		case StudentClassServiceGetClassListByStudentIDProcedure:
			studentClassServiceGetClassListByStudentIDHandler.ServeHTTP(w, r)
		case StudentClassServiceDeleteStudentClassProcedure:
			studentClassServiceDeleteStudentClassHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStudentClassServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStudentClassServiceHandler struct{}

func (UnimplementedStudentClassServiceHandler) CreateStudentClass(context.Context, *connect.Request[v1.CreateStudentClassRequest]) (*connect.Response[v1.CreateStudentClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentClassService.CreateStudentClass is not implemented"))
}

func (UnimplementedStudentClassServiceHandler) GetStudentListByClassID(context.Context, *connect.Request[v1.GetStudentListByClassIDRequest]) (*connect.Response[v1.GetStudentListByClassIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentClassService.GetStudentListByClassID is not implemented"))
}

func (UnimplementedStudentClassServiceHandler) GetClassListByStudentID(context.Context, *connect.Request[v1.GetClassListByStudentIDRequest]) (*connect.Response[v1.GetClassListByStudentIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentClassService.GetClassListByStudentID is not implemented"))
}

func (UnimplementedStudentClassServiceHandler) DeleteStudentClass(context.Context, *connect.Request[v1.DeleteStudentClassRequest]) (*connect.Response[v1.DeleteStudentClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.StudentClassService.DeleteStudentClass is not implemented"))
}
