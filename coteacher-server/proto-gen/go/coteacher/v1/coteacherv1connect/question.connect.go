// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/question.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/coteacher-server/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QuestionServiceName is the fully-qualified name of the QuestionService service.
	QuestionServiceName = "coteacher.v1.QuestionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QuestionServiceGetQuestionListByFormIdProcedure is the fully-qualified name of the
	// QuestionService's GetQuestionListByFormId RPC.
	QuestionServiceGetQuestionListByFormIdProcedure = "/coteacher.v1.QuestionService/GetQuestionListByFormId"
	// QuestionServiceSaveQuestionListProcedure is the fully-qualified name of the QuestionService's
	// SaveQuestionList RPC.
	QuestionServiceSaveQuestionListProcedure = "/coteacher.v1.QuestionService/SaveQuestionList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	questionServiceServiceDescriptor                       = v1.File_coteacher_v1_question_proto.Services().ByName("QuestionService")
	questionServiceGetQuestionListByFormIdMethodDescriptor = questionServiceServiceDescriptor.Methods().ByName("GetQuestionListByFormId")
	questionServiceSaveQuestionListMethodDescriptor        = questionServiceServiceDescriptor.Methods().ByName("SaveQuestionList")
)

// QuestionServiceClient is a client for the coteacher.v1.QuestionService service.
type QuestionServiceClient interface {
	GetQuestionListByFormId(context.Context, *connect.Request[v1.GetQuestionListByFormIdRequest]) (*connect.Response[v1.GetQuestionListByFormIdResponse], error)
	SaveQuestionList(context.Context, *connect.Request[v1.SaveQuestionListRequest]) (*connect.Response[v1.SaveQuestionListResponse], error)
}

// NewQuestionServiceClient constructs a client for the coteacher.v1.QuestionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuestionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QuestionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &questionServiceClient{
		getQuestionListByFormId: connect.NewClient[v1.GetQuestionListByFormIdRequest, v1.GetQuestionListByFormIdResponse](
			httpClient,
			baseURL+QuestionServiceGetQuestionListByFormIdProcedure,
			connect.WithSchema(questionServiceGetQuestionListByFormIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveQuestionList: connect.NewClient[v1.SaveQuestionListRequest, v1.SaveQuestionListResponse](
			httpClient,
			baseURL+QuestionServiceSaveQuestionListProcedure,
			connect.WithSchema(questionServiceSaveQuestionListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// questionServiceClient implements QuestionServiceClient.
type questionServiceClient struct {
	getQuestionListByFormId *connect.Client[v1.GetQuestionListByFormIdRequest, v1.GetQuestionListByFormIdResponse]
	saveQuestionList        *connect.Client[v1.SaveQuestionListRequest, v1.SaveQuestionListResponse]
}

// GetQuestionListByFormId calls coteacher.v1.QuestionService.GetQuestionListByFormId.
func (c *questionServiceClient) GetQuestionListByFormId(ctx context.Context, req *connect.Request[v1.GetQuestionListByFormIdRequest]) (*connect.Response[v1.GetQuestionListByFormIdResponse], error) {
	return c.getQuestionListByFormId.CallUnary(ctx, req)
}

// SaveQuestionList calls coteacher.v1.QuestionService.SaveQuestionList.
func (c *questionServiceClient) SaveQuestionList(ctx context.Context, req *connect.Request[v1.SaveQuestionListRequest]) (*connect.Response[v1.SaveQuestionListResponse], error) {
	return c.saveQuestionList.CallUnary(ctx, req)
}

// QuestionServiceHandler is an implementation of the coteacher.v1.QuestionService service.
type QuestionServiceHandler interface {
	GetQuestionListByFormId(context.Context, *connect.Request[v1.GetQuestionListByFormIdRequest]) (*connect.Response[v1.GetQuestionListByFormIdResponse], error)
	SaveQuestionList(context.Context, *connect.Request[v1.SaveQuestionListRequest]) (*connect.Response[v1.SaveQuestionListResponse], error)
}

// NewQuestionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuestionServiceHandler(svc QuestionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	questionServiceGetQuestionListByFormIdHandler := connect.NewUnaryHandler(
		QuestionServiceGetQuestionListByFormIdProcedure,
		svc.GetQuestionListByFormId,
		connect.WithSchema(questionServiceGetQuestionListByFormIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	questionServiceSaveQuestionListHandler := connect.NewUnaryHandler(
		QuestionServiceSaveQuestionListProcedure,
		svc.SaveQuestionList,
		connect.WithSchema(questionServiceSaveQuestionListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.QuestionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QuestionServiceGetQuestionListByFormIdProcedure:
			questionServiceGetQuestionListByFormIdHandler.ServeHTTP(w, r)
		case QuestionServiceSaveQuestionListProcedure:
			questionServiceSaveQuestionListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQuestionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuestionServiceHandler struct{}

func (UnimplementedQuestionServiceHandler) GetQuestionListByFormId(context.Context, *connect.Request[v1.GetQuestionListByFormIdRequest]) (*connect.Response[v1.GetQuestionListByFormIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.QuestionService.GetQuestionListByFormId is not implemented"))
}

func (UnimplementedQuestionServiceHandler) SaveQuestionList(context.Context, *connect.Request[v1.SaveQuestionListRequest]) (*connect.Response[v1.SaveQuestionListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.QuestionService.SaveQuestionList is not implemented"))
}
