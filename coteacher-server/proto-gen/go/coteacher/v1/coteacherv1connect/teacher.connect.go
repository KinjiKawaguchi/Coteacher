// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coteacher/v1/teacher.proto

package coteacherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/KinjiKawaguchi/Coteacher/proto-gen/go/coteacher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeacherServiceName is the fully-qualified name of the TeacherService service.
	TeacherServiceName = "coteacher.v1.TeacherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeacherServiceCheckTeacherExistsByIDProcedure is the fully-qualified name of the TeacherService's
	// CheckTeacherExistsByID RPC.
	TeacherServiceCheckTeacherExistsByIDProcedure = "/coteacher.v1.TeacherService/CheckTeacherExistsByID"
	// TeacherServiceCheckTeacherExistsByEmailProcedure is the fully-qualified name of the
	// TeacherService's CheckTeacherExistsByEmail RPC.
	TeacherServiceCheckTeacherExistsByEmailProcedure = "/coteacher.v1.TeacherService/CheckTeacherExistsByEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	teacherServiceServiceDescriptor                         = v1.File_coteacher_v1_teacher_proto.Services().ByName("TeacherService")
	teacherServiceCheckTeacherExistsByIDMethodDescriptor    = teacherServiceServiceDescriptor.Methods().ByName("CheckTeacherExistsByID")
	teacherServiceCheckTeacherExistsByEmailMethodDescriptor = teacherServiceServiceDescriptor.Methods().ByName("CheckTeacherExistsByEmail")
)

// TeacherServiceClient is a client for the coteacher.v1.TeacherService service.
type TeacherServiceClient interface {
	CheckTeacherExistsByID(context.Context, *connect.Request[v1.CheckTeacherExistsByIDRequest]) (*connect.Response[v1.CheckTeacherExistsByIDResponse], error)
	CheckTeacherExistsByEmail(context.Context, *connect.Request[v1.CheckTeacherExistsByEmailRequest]) (*connect.Response[v1.CheckTeacherExistsByEmailResponse], error)
}

// NewTeacherServiceClient constructs a client for the coteacher.v1.TeacherService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeacherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeacherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teacherServiceClient{
		checkTeacherExistsByID: connect.NewClient[v1.CheckTeacherExistsByIDRequest, v1.CheckTeacherExistsByIDResponse](
			httpClient,
			baseURL+TeacherServiceCheckTeacherExistsByIDProcedure,
			connect.WithSchema(teacherServiceCheckTeacherExistsByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkTeacherExistsByEmail: connect.NewClient[v1.CheckTeacherExistsByEmailRequest, v1.CheckTeacherExistsByEmailResponse](
			httpClient,
			baseURL+TeacherServiceCheckTeacherExistsByEmailProcedure,
			connect.WithSchema(teacherServiceCheckTeacherExistsByEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// teacherServiceClient implements TeacherServiceClient.
type teacherServiceClient struct {
	checkTeacherExistsByID    *connect.Client[v1.CheckTeacherExistsByIDRequest, v1.CheckTeacherExistsByIDResponse]
	checkTeacherExistsByEmail *connect.Client[v1.CheckTeacherExistsByEmailRequest, v1.CheckTeacherExistsByEmailResponse]
}

// CheckTeacherExistsByID calls coteacher.v1.TeacherService.CheckTeacherExistsByID.
func (c *teacherServiceClient) CheckTeacherExistsByID(ctx context.Context, req *connect.Request[v1.CheckTeacherExistsByIDRequest]) (*connect.Response[v1.CheckTeacherExistsByIDResponse], error) {
	return c.checkTeacherExistsByID.CallUnary(ctx, req)
}

// CheckTeacherExistsByEmail calls coteacher.v1.TeacherService.CheckTeacherExistsByEmail.
func (c *teacherServiceClient) CheckTeacherExistsByEmail(ctx context.Context, req *connect.Request[v1.CheckTeacherExistsByEmailRequest]) (*connect.Response[v1.CheckTeacherExistsByEmailResponse], error) {
	return c.checkTeacherExistsByEmail.CallUnary(ctx, req)
}

// TeacherServiceHandler is an implementation of the coteacher.v1.TeacherService service.
type TeacherServiceHandler interface {
	CheckTeacherExistsByID(context.Context, *connect.Request[v1.CheckTeacherExistsByIDRequest]) (*connect.Response[v1.CheckTeacherExistsByIDResponse], error)
	CheckTeacherExistsByEmail(context.Context, *connect.Request[v1.CheckTeacherExistsByEmailRequest]) (*connect.Response[v1.CheckTeacherExistsByEmailResponse], error)
}

// NewTeacherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeacherServiceHandler(svc TeacherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teacherServiceCheckTeacherExistsByIDHandler := connect.NewUnaryHandler(
		TeacherServiceCheckTeacherExistsByIDProcedure,
		svc.CheckTeacherExistsByID,
		connect.WithSchema(teacherServiceCheckTeacherExistsByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	teacherServiceCheckTeacherExistsByEmailHandler := connect.NewUnaryHandler(
		TeacherServiceCheckTeacherExistsByEmailProcedure,
		svc.CheckTeacherExistsByEmail,
		connect.WithSchema(teacherServiceCheckTeacherExistsByEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coteacher.v1.TeacherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeacherServiceCheckTeacherExistsByIDProcedure:
			teacherServiceCheckTeacherExistsByIDHandler.ServeHTTP(w, r)
		case TeacherServiceCheckTeacherExistsByEmailProcedure:
			teacherServiceCheckTeacherExistsByEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeacherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeacherServiceHandler struct{}

func (UnimplementedTeacherServiceHandler) CheckTeacherExistsByID(context.Context, *connect.Request[v1.CheckTeacherExistsByIDRequest]) (*connect.Response[v1.CheckTeacherExistsByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.TeacherService.CheckTeacherExistsByID is not implemented"))
}

func (UnimplementedTeacherServiceHandler) CheckTeacherExistsByEmail(context.Context, *connect.Request[v1.CheckTeacherExistsByEmailRequest]) (*connect.Response[v1.CheckTeacherExistsByEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coteacher.v1.TeacherService.CheckTeacherExistsByEmail is not implemented"))
}
