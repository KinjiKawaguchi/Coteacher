// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/teacher.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeacherService_CheckTeacherExistsByID_FullMethodName    = "/coteacher.v1.TeacherService/CheckTeacherExistsByID"
	TeacherService_CheckTeacherExistsByEmail_FullMethodName = "/coteacher.v1.TeacherService/CheckTeacherExistsByEmail"
)

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	CheckTeacherExistsByID(ctx context.Context, in *CheckTeacherExistsByIDRequest, opts ...grpc.CallOption) (*CheckTeacherExistsByIDResponse, error)
	CheckTeacherExistsByEmail(ctx context.Context, in *CheckTeacherExistsByEmailRequest, opts ...grpc.CallOption) (*CheckTeacherExistsByEmailResponse, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) CheckTeacherExistsByID(ctx context.Context, in *CheckTeacherExistsByIDRequest, opts ...grpc.CallOption) (*CheckTeacherExistsByIDResponse, error) {
	out := new(CheckTeacherExistsByIDResponse)
	err := c.cc.Invoke(ctx, TeacherService_CheckTeacherExistsByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) CheckTeacherExistsByEmail(ctx context.Context, in *CheckTeacherExistsByEmailRequest, opts ...grpc.CallOption) (*CheckTeacherExistsByEmailResponse, error) {
	out := new(CheckTeacherExistsByEmailResponse)
	err := c.cc.Invoke(ctx, TeacherService_CheckTeacherExistsByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations should embed UnimplementedTeacherServiceServer
// for forward compatibility
type TeacherServiceServer interface {
	CheckTeacherExistsByID(context.Context, *CheckTeacherExistsByIDRequest) (*CheckTeacherExistsByIDResponse, error)
	CheckTeacherExistsByEmail(context.Context, *CheckTeacherExistsByEmailRequest) (*CheckTeacherExistsByEmailResponse, error)
}

// UnimplementedTeacherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (UnimplementedTeacherServiceServer) CheckTeacherExistsByID(context.Context, *CheckTeacherExistsByIDRequest) (*CheckTeacherExistsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTeacherExistsByID not implemented")
}
func (UnimplementedTeacherServiceServer) CheckTeacherExistsByEmail(context.Context, *CheckTeacherExistsByEmailRequest) (*CheckTeacherExistsByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTeacherExistsByEmail not implemented")
}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_CheckTeacherExistsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTeacherExistsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).CheckTeacherExistsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_CheckTeacherExistsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).CheckTeacherExistsByID(ctx, req.(*CheckTeacherExistsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_CheckTeacherExistsByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTeacherExistsByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).CheckTeacherExistsByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_CheckTeacherExistsByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).CheckTeacherExistsByEmail(ctx, req.(*CheckTeacherExistsByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTeacherExistsByID",
			Handler:    _TeacherService_CheckTeacherExistsByID_Handler,
		},
		{
			MethodName: "CheckTeacherExistsByEmail",
			Handler:    _TeacherService_CheckTeacherExistsByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/teacher.proto",
}
