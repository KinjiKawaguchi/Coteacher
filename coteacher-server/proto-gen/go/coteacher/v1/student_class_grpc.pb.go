// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/student_class.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoTeacherService_GetStudentListByClassID_FullMethodName = "/coteacher.v1.CoTeacherService/GetStudentListByClassID"
	CoTeacherService_GetClassListByStudentID_FullMethodName = "/coteacher.v1.CoTeacherService/GetClassListByStudentID"
	CoTeacherService_CreateStudentClass_FullMethodName      = "/coteacher.v1.CoTeacherService/CreateStudentClass"
	CoTeacherService_DeleteStudentClass_FullMethodName      = "/coteacher.v1.CoTeacherService/DeleteStudentClass"
)

// CoTeacherServiceClient is the client API for CoTeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoTeacherServiceClient interface {
	GetStudentListByClassID(ctx context.Context, in *GetStudentListByClassIDRequest, opts ...grpc.CallOption) (*GetStudentListByClassIDResponse, error)
	GetClassListByStudentID(ctx context.Context, in *GetClassListByStudentIDRequest, opts ...grpc.CallOption) (*GetClassListByStudentIDResponse, error)
	CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error)
	DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error)
}

type coTeacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoTeacherServiceClient(cc grpc.ClientConnInterface) CoTeacherServiceClient {
	return &coTeacherServiceClient{cc}
}

func (c *coTeacherServiceClient) GetStudentListByClassID(ctx context.Context, in *GetStudentListByClassIDRequest, opts ...grpc.CallOption) (*GetStudentListByClassIDResponse, error) {
	out := new(GetStudentListByClassIDResponse)
	err := c.cc.Invoke(ctx, CoTeacherService_GetStudentListByClassID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coTeacherServiceClient) GetClassListByStudentID(ctx context.Context, in *GetClassListByStudentIDRequest, opts ...grpc.CallOption) (*GetClassListByStudentIDResponse, error) {
	out := new(GetClassListByStudentIDResponse)
	err := c.cc.Invoke(ctx, CoTeacherService_GetClassListByStudentID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coTeacherServiceClient) CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error) {
	out := new(CreateStudentClassResponse)
	err := c.cc.Invoke(ctx, CoTeacherService_CreateStudentClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coTeacherServiceClient) DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error) {
	out := new(DeleteStudentClassResponse)
	err := c.cc.Invoke(ctx, CoTeacherService_DeleteStudentClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoTeacherServiceServer is the server API for CoTeacherService service.
// All implementations should embed UnimplementedCoTeacherServiceServer
// for forward compatibility
type CoTeacherServiceServer interface {
	GetStudentListByClassID(context.Context, *GetStudentListByClassIDRequest) (*GetStudentListByClassIDResponse, error)
	GetClassListByStudentID(context.Context, *GetClassListByStudentIDRequest) (*GetClassListByStudentIDResponse, error)
	CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error)
	DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error)
}

// UnimplementedCoTeacherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCoTeacherServiceServer struct {
}

func (UnimplementedCoTeacherServiceServer) GetStudentListByClassID(context.Context, *GetStudentListByClassIDRequest) (*GetStudentListByClassIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentListByClassID not implemented")
}
func (UnimplementedCoTeacherServiceServer) GetClassListByStudentID(context.Context, *GetClassListByStudentIDRequest) (*GetClassListByStudentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassListByStudentID not implemented")
}
func (UnimplementedCoTeacherServiceServer) CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentClass not implemented")
}
func (UnimplementedCoTeacherServiceServer) DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentClass not implemented")
}

// UnsafeCoTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoTeacherServiceServer will
// result in compilation errors.
type UnsafeCoTeacherServiceServer interface {
	mustEmbedUnimplementedCoTeacherServiceServer()
}

func RegisterCoTeacherServiceServer(s grpc.ServiceRegistrar, srv CoTeacherServiceServer) {
	s.RegisterService(&CoTeacherService_ServiceDesc, srv)
}

func _CoTeacherService_GetStudentListByClassID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentListByClassIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoTeacherServiceServer).GetStudentListByClassID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoTeacherService_GetStudentListByClassID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoTeacherServiceServer).GetStudentListByClassID(ctx, req.(*GetStudentListByClassIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoTeacherService_GetClassListByStudentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassListByStudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoTeacherServiceServer).GetClassListByStudentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoTeacherService_GetClassListByStudentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoTeacherServiceServer).GetClassListByStudentID(ctx, req.(*GetClassListByStudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoTeacherService_CreateStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoTeacherServiceServer).CreateStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoTeacherService_CreateStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoTeacherServiceServer).CreateStudentClass(ctx, req.(*CreateStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoTeacherService_DeleteStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoTeacherServiceServer).DeleteStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoTeacherService_DeleteStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoTeacherServiceServer).DeleteStudentClass(ctx, req.(*DeleteStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoTeacherService_ServiceDesc is the grpc.ServiceDesc for CoTeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoTeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.CoTeacherService",
	HandlerType: (*CoTeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentListByClassID",
			Handler:    _CoTeacherService_GetStudentListByClassID_Handler,
		},
		{
			MethodName: "GetClassListByStudentID",
			Handler:    _CoTeacherService_GetClassListByStudentID_Handler,
		},
		{
			MethodName: "CreateStudentClass",
			Handler:    _CoTeacherService_CreateStudentClass_Handler,
		},
		{
			MethodName: "DeleteStudentClass",
			Handler:    _CoTeacherService_DeleteStudentClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/student_class.proto",
}
