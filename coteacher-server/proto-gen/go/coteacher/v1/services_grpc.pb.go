// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coteacher/v1/services.proto

package coteacherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealthcheckService_Unary_FullMethodName                  = "/coteacher.v1.HealthcheckService/Unary"
	HealthcheckService_ServerStreaming_FullMethodName        = "/coteacher.v1.HealthcheckService/ServerStreaming"
	HealthcheckService_ClientStreaming_FullMethodName        = "/coteacher.v1.HealthcheckService/ClientStreaming"
	HealthcheckService_BidirectionalStreaming_FullMethodName = "/coteacher.v1.HealthcheckService/BidirectionalStreaming"
)

// HealthcheckServiceClient is the client API for HealthcheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthcheckServiceClient interface {
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (HealthcheckService_ServerStreamingClient, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HealthcheckService_ClientStreamingClient, error)
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HealthcheckService_BidirectionalStreamingClient, error)
}

type healthcheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthcheckServiceClient(cc grpc.ClientConnInterface) HealthcheckServiceClient {
	return &healthcheckServiceClient{cc}
}

func (c *healthcheckServiceClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, HealthcheckService_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcheckServiceClient) ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (HealthcheckService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthcheckService_ServiceDesc.Streams[0], HealthcheckService_ServerStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &healthcheckServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HealthcheckService_ServerStreamingClient interface {
	Recv() (*ServerStreamingResponse, error)
	grpc.ClientStream
}

type healthcheckServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *healthcheckServiceServerStreamingClient) Recv() (*ServerStreamingResponse, error) {
	m := new(ServerStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthcheckServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HealthcheckService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthcheckService_ServiceDesc.Streams[1], HealthcheckService_ClientStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &healthcheckServiceClientStreamingClient{stream}
	return x, nil
}

type HealthcheckService_ClientStreamingClient interface {
	Send(*ClientStreamingRequest) error
	CloseAndRecv() (*ClientStreamingResponse, error)
	grpc.ClientStream
}

type healthcheckServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *healthcheckServiceClientStreamingClient) Send(m *ClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthcheckServiceClientStreamingClient) CloseAndRecv() (*ClientStreamingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthcheckServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HealthcheckService_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthcheckService_ServiceDesc.Streams[2], HealthcheckService_BidirectionalStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &healthcheckServiceBidirectionalStreamingClient{stream}
	return x, nil
}

type HealthcheckService_BidirectionalStreamingClient interface {
	Send(*BidirectionalStreamingRequest) error
	Recv() (*BidirectionalStreamingResponse, error)
	grpc.ClientStream
}

type healthcheckServiceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *healthcheckServiceBidirectionalStreamingClient) Send(m *BidirectionalStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthcheckServiceBidirectionalStreamingClient) Recv() (*BidirectionalStreamingResponse, error) {
	m := new(BidirectionalStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthcheckServiceServer is the server API for HealthcheckService service.
// All implementations should embed UnimplementedHealthcheckServiceServer
// for forward compatibility
type HealthcheckServiceServer interface {
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	ServerStreaming(*ServerStreamingRequest, HealthcheckService_ServerStreamingServer) error
	ClientStreaming(HealthcheckService_ClientStreamingServer) error
	BidirectionalStreaming(HealthcheckService_BidirectionalStreamingServer) error
}

// UnimplementedHealthcheckServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHealthcheckServiceServer struct {
}

func (UnimplementedHealthcheckServiceServer) Unary(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedHealthcheckServiceServer) ServerStreaming(*ServerStreamingRequest, HealthcheckService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedHealthcheckServiceServer) ClientStreaming(HealthcheckService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedHealthcheckServiceServer) BidirectionalStreaming(HealthcheckService_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}

// UnsafeHealthcheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthcheckServiceServer will
// result in compilation errors.
type UnsafeHealthcheckServiceServer interface {
	mustEmbedUnimplementedHealthcheckServiceServer()
}

func RegisterHealthcheckServiceServer(s grpc.ServiceRegistrar, srv HealthcheckServiceServer) {
	s.RegisterService(&HealthcheckService_ServiceDesc, srv)
}

func _HealthcheckService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcheckServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthcheckService_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcheckServiceServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcheckService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthcheckServiceServer).ServerStreaming(m, &healthcheckServiceServerStreamingServer{stream})
}

type HealthcheckService_ServerStreamingServer interface {
	Send(*ServerStreamingResponse) error
	grpc.ServerStream
}

type healthcheckServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *healthcheckServiceServerStreamingServer) Send(m *ServerStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HealthcheckService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthcheckServiceServer).ClientStreaming(&healthcheckServiceClientStreamingServer{stream})
}

type HealthcheckService_ClientStreamingServer interface {
	SendAndClose(*ClientStreamingResponse) error
	Recv() (*ClientStreamingRequest, error)
	grpc.ServerStream
}

type healthcheckServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *healthcheckServiceClientStreamingServer) SendAndClose(m *ClientStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthcheckServiceClientStreamingServer) Recv() (*ClientStreamingRequest, error) {
	m := new(ClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthcheckService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthcheckServiceServer).BidirectionalStreaming(&healthcheckServiceBidirectionalStreamingServer{stream})
}

type HealthcheckService_BidirectionalStreamingServer interface {
	Send(*BidirectionalStreamingResponse) error
	Recv() (*BidirectionalStreamingRequest, error)
	grpc.ServerStream
}

type healthcheckServiceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *healthcheckServiceBidirectionalStreamingServer) Send(m *BidirectionalStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthcheckServiceBidirectionalStreamingServer) Recv() (*BidirectionalStreamingRequest, error) {
	m := new(BidirectionalStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthcheckService_ServiceDesc is the grpc.ServiceDesc for HealthcheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthcheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.HealthcheckService",
	HandlerType: (*HealthcheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _HealthcheckService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _HealthcheckService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _HealthcheckService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _HealthcheckService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "coteacher/v1/services.proto",
}

const (
	ClassInvitationCodeService_GetClassInvitationCodeByID_FullMethodName          = "/coteacher.v1.ClassInvitationCodeService/GetClassInvitationCodeByID"
	ClassInvitationCodeService_GetClassInvitationCodeListByClassID_FullMethodName = "/coteacher.v1.ClassInvitationCodeService/GetClassInvitationCodeListByClassID"
	ClassInvitationCodeService_CreateClassInvitationCode_FullMethodName           = "/coteacher.v1.ClassInvitationCodeService/CreateClassInvitationCode"
	ClassInvitationCodeService_UpdateClassInvitationCode_FullMethodName           = "/coteacher.v1.ClassInvitationCodeService/UpdateClassInvitationCode"
)

// ClassInvitationCodeServiceClient is the client API for ClassInvitationCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassInvitationCodeServiceClient interface {
	GetClassInvitationCodeByID(ctx context.Context, in *GetClassInvitationCodeByIDRequest, opts ...grpc.CallOption) (*GetClassInvitationCodeByIDResponse, error)
	GetClassInvitationCodeListByClassID(ctx context.Context, in *GetClassInvitationCodeListByClassIDRequest, opts ...grpc.CallOption) (*GetClassInvitationCodeListByClassIDResponse, error)
	CreateClassInvitationCode(ctx context.Context, in *CreateClassInvitationCodeRequest, opts ...grpc.CallOption) (*CreateClassInvitationCodeResponse, error)
	UpdateClassInvitationCode(ctx context.Context, in *UpdateClassInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateClassInvitationCodeResponse, error)
}

type classInvitationCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassInvitationCodeServiceClient(cc grpc.ClientConnInterface) ClassInvitationCodeServiceClient {
	return &classInvitationCodeServiceClient{cc}
}

func (c *classInvitationCodeServiceClient) GetClassInvitationCodeByID(ctx context.Context, in *GetClassInvitationCodeByIDRequest, opts ...grpc.CallOption) (*GetClassInvitationCodeByIDResponse, error) {
	out := new(GetClassInvitationCodeByIDResponse)
	err := c.cc.Invoke(ctx, ClassInvitationCodeService_GetClassInvitationCodeByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInvitationCodeServiceClient) GetClassInvitationCodeListByClassID(ctx context.Context, in *GetClassInvitationCodeListByClassIDRequest, opts ...grpc.CallOption) (*GetClassInvitationCodeListByClassIDResponse, error) {
	out := new(GetClassInvitationCodeListByClassIDResponse)
	err := c.cc.Invoke(ctx, ClassInvitationCodeService_GetClassInvitationCodeListByClassID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInvitationCodeServiceClient) CreateClassInvitationCode(ctx context.Context, in *CreateClassInvitationCodeRequest, opts ...grpc.CallOption) (*CreateClassInvitationCodeResponse, error) {
	out := new(CreateClassInvitationCodeResponse)
	err := c.cc.Invoke(ctx, ClassInvitationCodeService_CreateClassInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInvitationCodeServiceClient) UpdateClassInvitationCode(ctx context.Context, in *UpdateClassInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateClassInvitationCodeResponse, error) {
	out := new(UpdateClassInvitationCodeResponse)
	err := c.cc.Invoke(ctx, ClassInvitationCodeService_UpdateClassInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassInvitationCodeServiceServer is the server API for ClassInvitationCodeService service.
// All implementations should embed UnimplementedClassInvitationCodeServiceServer
// for forward compatibility
type ClassInvitationCodeServiceServer interface {
	GetClassInvitationCodeByID(context.Context, *GetClassInvitationCodeByIDRequest) (*GetClassInvitationCodeByIDResponse, error)
	GetClassInvitationCodeListByClassID(context.Context, *GetClassInvitationCodeListByClassIDRequest) (*GetClassInvitationCodeListByClassIDResponse, error)
	CreateClassInvitationCode(context.Context, *CreateClassInvitationCodeRequest) (*CreateClassInvitationCodeResponse, error)
	UpdateClassInvitationCode(context.Context, *UpdateClassInvitationCodeRequest) (*UpdateClassInvitationCodeResponse, error)
}

// UnimplementedClassInvitationCodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassInvitationCodeServiceServer struct {
}

func (UnimplementedClassInvitationCodeServiceServer) GetClassInvitationCodeByID(context.Context, *GetClassInvitationCodeByIDRequest) (*GetClassInvitationCodeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassInvitationCodeByID not implemented")
}
func (UnimplementedClassInvitationCodeServiceServer) GetClassInvitationCodeListByClassID(context.Context, *GetClassInvitationCodeListByClassIDRequest) (*GetClassInvitationCodeListByClassIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassInvitationCodeListByClassID not implemented")
}
func (UnimplementedClassInvitationCodeServiceServer) CreateClassInvitationCode(context.Context, *CreateClassInvitationCodeRequest) (*CreateClassInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClassInvitationCode not implemented")
}
func (UnimplementedClassInvitationCodeServiceServer) UpdateClassInvitationCode(context.Context, *UpdateClassInvitationCodeRequest) (*UpdateClassInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassInvitationCode not implemented")
}

// UnsafeClassInvitationCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassInvitationCodeServiceServer will
// result in compilation errors.
type UnsafeClassInvitationCodeServiceServer interface {
	mustEmbedUnimplementedClassInvitationCodeServiceServer()
}

func RegisterClassInvitationCodeServiceServer(s grpc.ServiceRegistrar, srv ClassInvitationCodeServiceServer) {
	s.RegisterService(&ClassInvitationCodeService_ServiceDesc, srv)
}

func _ClassInvitationCodeService_GetClassInvitationCodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassInvitationCodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInvitationCodeServiceServer).GetClassInvitationCodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInvitationCodeService_GetClassInvitationCodeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInvitationCodeServiceServer).GetClassInvitationCodeByID(ctx, req.(*GetClassInvitationCodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInvitationCodeService_GetClassInvitationCodeListByClassID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassInvitationCodeListByClassIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInvitationCodeServiceServer).GetClassInvitationCodeListByClassID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInvitationCodeService_GetClassInvitationCodeListByClassID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInvitationCodeServiceServer).GetClassInvitationCodeListByClassID(ctx, req.(*GetClassInvitationCodeListByClassIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInvitationCodeService_CreateClassInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInvitationCodeServiceServer).CreateClassInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInvitationCodeService_CreateClassInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInvitationCodeServiceServer).CreateClassInvitationCode(ctx, req.(*CreateClassInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInvitationCodeService_UpdateClassInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInvitationCodeServiceServer).UpdateClassInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInvitationCodeService_UpdateClassInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInvitationCodeServiceServer).UpdateClassInvitationCode(ctx, req.(*UpdateClassInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassInvitationCodeService_ServiceDesc is the grpc.ServiceDesc for ClassInvitationCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassInvitationCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.ClassInvitationCodeService",
	HandlerType: (*ClassInvitationCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassInvitationCodeByID",
			Handler:    _ClassInvitationCodeService_GetClassInvitationCodeByID_Handler,
		},
		{
			MethodName: "GetClassInvitationCodeListByClassID",
			Handler:    _ClassInvitationCodeService_GetClassInvitationCodeListByClassID_Handler,
		},
		{
			MethodName: "CreateClassInvitationCode",
			Handler:    _ClassInvitationCodeService_CreateClassInvitationCode_Handler,
		},
		{
			MethodName: "UpdateClassInvitationCode",
			Handler:    _ClassInvitationCodeService_UpdateClassInvitationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/services.proto",
}

const (
	ClassService_GetClassByID_FullMethodName            = "/coteacher.v1.ClassService/GetClassByID"
	ClassService_GetClassListByTeacherID_FullMethodName = "/coteacher.v1.ClassService/GetClassListByTeacherID"
	ClassService_CreateClass_FullMethodName             = "/coteacher.v1.ClassService/CreateClass"
)

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	GetClassByID(ctx context.Context, in *GetClassByIDRequest, opts ...grpc.CallOption) (*GetClassByIDResponse, error)
	GetClassListByTeacherID(ctx context.Context, in *GetClassListByTeacherIDRequest, opts ...grpc.CallOption) (*GetClassListByTeacherIDResponse, error)
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) GetClassByID(ctx context.Context, in *GetClassByIDRequest, opts ...grpc.CallOption) (*GetClassByIDResponse, error) {
	out := new(GetClassByIDResponse)
	err := c.cc.Invoke(ctx, ClassService_GetClassByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) GetClassListByTeacherID(ctx context.Context, in *GetClassListByTeacherIDRequest, opts ...grpc.CallOption) (*GetClassListByTeacherIDResponse, error) {
	out := new(GetClassListByTeacherIDResponse)
	err := c.cc.Invoke(ctx, ClassService_GetClassListByTeacherID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error) {
	out := new(CreateClassResponse)
	err := c.cc.Invoke(ctx, ClassService_CreateClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations should embed UnimplementedClassServiceServer
// for forward compatibility
type ClassServiceServer interface {
	GetClassByID(context.Context, *GetClassByIDRequest) (*GetClassByIDResponse, error)
	GetClassListByTeacherID(context.Context, *GetClassListByTeacherIDRequest) (*GetClassListByTeacherIDResponse, error)
	CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error)
}

// UnimplementedClassServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassServiceServer struct {
}

func (UnimplementedClassServiceServer) GetClassByID(context.Context, *GetClassByIDRequest) (*GetClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassByID not implemented")
}
func (UnimplementedClassServiceServer) GetClassListByTeacherID(context.Context, *GetClassListByTeacherIDRequest) (*GetClassListByTeacherIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassListByTeacherID not implemented")
}
func (UnimplementedClassServiceServer) CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	s.RegisterService(&ClassService_ServiceDesc, srv)
}

func _ClassService_GetClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).GetClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_GetClassByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).GetClassByID(ctx, req.(*GetClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_GetClassListByTeacherID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassListByTeacherIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).GetClassListByTeacherID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_GetClassListByTeacherID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).GetClassListByTeacherID(ctx, req.(*GetClassListByTeacherIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_CreateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassService_ServiceDesc is the grpc.ServiceDesc for ClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassByID",
			Handler:    _ClassService_GetClassByID_Handler,
		},
		{
			MethodName: "GetClassListByTeacherID",
			Handler:    _ClassService_GetClassListByTeacherID_Handler,
		},
		{
			MethodName: "CreateClass",
			Handler:    _ClassService_CreateClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/services.proto",
}

const (
	StudentClassService_GetStudentListByClassID_FullMethodName = "/coteacher.v1.StudentClassService/GetStudentListByClassID"
	StudentClassService_GetClassListByStudentID_FullMethodName = "/coteacher.v1.StudentClassService/GetClassListByStudentID"
	StudentClassService_CreateStudentClass_FullMethodName      = "/coteacher.v1.StudentClassService/CreateStudentClass"
	StudentClassService_DeleteStudentClass_FullMethodName      = "/coteacher.v1.StudentClassService/DeleteStudentClass"
)

// StudentClassServiceClient is the client API for StudentClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentClassServiceClient interface {
	GetStudentListByClassID(ctx context.Context, in *GetStudentListByClassIDRequest, opts ...grpc.CallOption) (*GetStudentListByClassIDResponse, error)
	GetClassListByStudentID(ctx context.Context, in *GetClassListByStudentIDRequest, opts ...grpc.CallOption) (*GetClassListByStudentIDResponse, error)
	CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error)
	DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error)
}

type studentClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentClassServiceClient(cc grpc.ClientConnInterface) StudentClassServiceClient {
	return &studentClassServiceClient{cc}
}

func (c *studentClassServiceClient) GetStudentListByClassID(ctx context.Context, in *GetStudentListByClassIDRequest, opts ...grpc.CallOption) (*GetStudentListByClassIDResponse, error) {
	out := new(GetStudentListByClassIDResponse)
	err := c.cc.Invoke(ctx, StudentClassService_GetStudentListByClassID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) GetClassListByStudentID(ctx context.Context, in *GetClassListByStudentIDRequest, opts ...grpc.CallOption) (*GetClassListByStudentIDResponse, error) {
	out := new(GetClassListByStudentIDResponse)
	err := c.cc.Invoke(ctx, StudentClassService_GetClassListByStudentID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error) {
	out := new(CreateStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_CreateStudentClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error) {
	out := new(DeleteStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_DeleteStudentClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentClassServiceServer is the server API for StudentClassService service.
// All implementations should embed UnimplementedStudentClassServiceServer
// for forward compatibility
type StudentClassServiceServer interface {
	GetStudentListByClassID(context.Context, *GetStudentListByClassIDRequest) (*GetStudentListByClassIDResponse, error)
	GetClassListByStudentID(context.Context, *GetClassListByStudentIDRequest) (*GetClassListByStudentIDResponse, error)
	CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error)
	DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error)
}

// UnimplementedStudentClassServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentClassServiceServer struct {
}

func (UnimplementedStudentClassServiceServer) GetStudentListByClassID(context.Context, *GetStudentListByClassIDRequest) (*GetStudentListByClassIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentListByClassID not implemented")
}
func (UnimplementedStudentClassServiceServer) GetClassListByStudentID(context.Context, *GetClassListByStudentIDRequest) (*GetClassListByStudentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassListByStudentID not implemented")
}
func (UnimplementedStudentClassServiceServer) CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentClass not implemented")
}
func (UnimplementedStudentClassServiceServer) DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentClass not implemented")
}

// UnsafeStudentClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentClassServiceServer will
// result in compilation errors.
type UnsafeStudentClassServiceServer interface {
	mustEmbedUnimplementedStudentClassServiceServer()
}

func RegisterStudentClassServiceServer(s grpc.ServiceRegistrar, srv StudentClassServiceServer) {
	s.RegisterService(&StudentClassService_ServiceDesc, srv)
}

func _StudentClassService_GetStudentListByClassID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentListByClassIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).GetStudentListByClassID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_GetStudentListByClassID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).GetStudentListByClassID(ctx, req.(*GetStudentListByClassIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_GetClassListByStudentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassListByStudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).GetClassListByStudentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_GetClassListByStudentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).GetClassListByStudentID(ctx, req.(*GetClassListByStudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_CreateStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).CreateStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_CreateStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).CreateStudentClass(ctx, req.(*CreateStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_DeleteStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).DeleteStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_DeleteStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).DeleteStudentClass(ctx, req.(*DeleteStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentClassService_ServiceDesc is the grpc.ServiceDesc for StudentClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.StudentClassService",
	HandlerType: (*StudentClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentListByClassID",
			Handler:    _StudentClassService_GetStudentListByClassID_Handler,
		},
		{
			MethodName: "GetClassListByStudentID",
			Handler:    _StudentClassService_GetClassListByStudentID_Handler,
		},
		{
			MethodName: "CreateStudentClass",
			Handler:    _StudentClassService_CreateStudentClass_Handler,
		},
		{
			MethodName: "DeleteStudentClass",
			Handler:    _StudentClassService_DeleteStudentClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/services.proto",
}

const (
	UserService_GetUserByID_FullMethodName    = "/coteacher.v1.UserService/GetUserByID"
	UserService_GetUserByEmail_FullMethodName = "/coteacher.v1.UserService/GetUserByEmail"
	UserService_CreateUser_FullMethodName     = "/coteacher.v1.UserService/CreateUser"
	UserService_UpdateUser_FullMethodName     = "/coteacher.v1.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName     = "/coteacher.v1.UserService/DeleteUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error) {
	out := new(GetUserByEmailResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coteacher.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UserService_GetUserByEmail_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coteacher/v1/services.proto",
}
