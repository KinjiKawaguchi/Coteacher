// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coteacher/domain/repository/ent/classinvitationcode"
	"coteacher/domain/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassInvitationCodeDelete is the builder for deleting a ClassInvitationCode entity.
type ClassInvitationCodeDelete struct {
	config
	hooks    []Hook
	mutation *ClassInvitationCodeMutation
}

// Where appends a list predicates to the ClassInvitationCodeDelete builder.
func (cicd *ClassInvitationCodeDelete) Where(ps ...predicate.ClassInvitationCode) *ClassInvitationCodeDelete {
	cicd.mutation.Where(ps...)
	return cicd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cicd *ClassInvitationCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cicd.sqlExec, cicd.mutation, cicd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cicd *ClassInvitationCodeDelete) ExecX(ctx context.Context) int {
	n, err := cicd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cicd *ClassInvitationCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(classinvitationcode.Table, sqlgraph.NewFieldSpec(classinvitationcode.FieldID, field.TypeString))
	if ps := cicd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cicd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cicd.mutation.done = true
	return affected, err
}

// ClassInvitationCodeDeleteOne is the builder for deleting a single ClassInvitationCode entity.
type ClassInvitationCodeDeleteOne struct {
	cicd *ClassInvitationCodeDelete
}

// Where appends a list predicates to the ClassInvitationCodeDelete builder.
func (cicdo *ClassInvitationCodeDeleteOne) Where(ps ...predicate.ClassInvitationCode) *ClassInvitationCodeDeleteOne {
	cicdo.cicd.mutation.Where(ps...)
	return cicdo
}

// Exec executes the deletion query.
func (cicdo *ClassInvitationCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := cicdo.cicd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{classinvitationcode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cicdo *ClassInvitationCodeDeleteOne) ExecX(ctx context.Context) {
	if err := cicdo.Exec(ctx); err != nil {
		panic(err)
	}
}
