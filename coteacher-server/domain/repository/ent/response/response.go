// Code generated by ent, DO NOT EDIT.

package response

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the response type in the database.
	Label = "response"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// FieldFormID holds the string denoting the form_id field in the database.
	FieldFormID = "form_id"
	// FieldAiResponse holds the string denoting the ai_response field in the database.
	FieldAiResponse = "ai_response"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeForm holds the string denoting the form edge name in mutations.
	EdgeForm = "form"
	// EdgeAnswer holds the string denoting the answer edge name in mutations.
	EdgeAnswer = "answer"
	// Table holds the table name of the response in the database.
	Table = "responses"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "responses"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_id"
	// FormTable is the table that holds the form relation/edge.
	FormTable = "responses"
	// FormInverseTable is the table name for the Form entity.
	// It exists in this package in order to avoid circular dependency with the "form" package.
	FormInverseTable = "forms"
	// FormColumn is the table column denoting the form relation/edge.
	FormColumn = "form_id"
	// AnswerTable is the table that holds the answer relation/edge.
	AnswerTable = "answers"
	// AnswerInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswerInverseTable = "answers"
	// AnswerColumn is the table column denoting the answer relation/edge.
	AnswerColumn = "response_id"
)

// Columns holds all SQL columns for response fields.
var Columns = []string{
	FieldID,
	FieldStudentID,
	FieldFormID,
	FieldAiResponse,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Response queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentID orders the results by the student_id field.
func ByStudentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentID, opts...).ToFunc()
}

// ByFormID orders the results by the form_id field.
func ByFormID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormID, opts...).ToFunc()
}

// ByAiResponse orders the results by the ai_response field.
func ByAiResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiResponse, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStudentField orders the results by student field.
func ByStudentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), sql.OrderByField(field, opts...))
	}
}

// ByFormField orders the results by form field.
func ByFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswerCount orders the results by answer count.
func ByAnswerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerStep(), opts...)
	}
}

// ByAnswer orders the results by answer terms.
func ByAnswer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
	)
}
func newFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
	)
}
func newAnswerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
	)
}
