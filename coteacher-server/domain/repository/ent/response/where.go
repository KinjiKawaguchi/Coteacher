// Code generated by ent, DO NOT EDIT.

package response

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldID, id))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldStudentID, v))
}

// FormID applies equality check predicate on the "form_id" field. It's identical to FormIDEQ.
func FormID(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldFormID, v))
}

// AiResponse applies equality check predicate on the "ai_response" field. It's identical to AiResponseEQ.
func AiResponse(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldAiResponse, v))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubmittedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldUpdatedAt, v))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldStudentID, vs...))
}

// FormIDEQ applies the EQ predicate on the "form_id" field.
func FormIDEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldFormID, v))
}

// FormIDNEQ applies the NEQ predicate on the "form_id" field.
func FormIDNEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldFormID, v))
}

// FormIDIn applies the In predicate on the "form_id" field.
func FormIDIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldFormID, vs...))
}

// FormIDNotIn applies the NotIn predicate on the "form_id" field.
func FormIDNotIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldFormID, vs...))
}

// AiResponseEQ applies the EQ predicate on the "ai_response" field.
func AiResponseEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldAiResponse, v))
}

// AiResponseNEQ applies the NEQ predicate on the "ai_response" field.
func AiResponseNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldAiResponse, v))
}

// AiResponseIn applies the In predicate on the "ai_response" field.
func AiResponseIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldAiResponse, vs...))
}

// AiResponseNotIn applies the NotIn predicate on the "ai_response" field.
func AiResponseNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldAiResponse, vs...))
}

// AiResponseGT applies the GT predicate on the "ai_response" field.
func AiResponseGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldAiResponse, v))
}

// AiResponseGTE applies the GTE predicate on the "ai_response" field.
func AiResponseGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldAiResponse, v))
}

// AiResponseLT applies the LT predicate on the "ai_response" field.
func AiResponseLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldAiResponse, v))
}

// AiResponseLTE applies the LTE predicate on the "ai_response" field.
func AiResponseLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldAiResponse, v))
}

// AiResponseContains applies the Contains predicate on the "ai_response" field.
func AiResponseContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldAiResponse, v))
}

// AiResponseHasPrefix applies the HasPrefix predicate on the "ai_response" field.
func AiResponseHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldAiResponse, v))
}

// AiResponseHasSuffix applies the HasSuffix predicate on the "ai_response" field.
func AiResponseHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldAiResponse, v))
}

// AiResponseEqualFold applies the EqualFold predicate on the "ai_response" field.
func AiResponseEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldAiResponse, v))
}

// AiResponseContainsFold applies the ContainsFold predicate on the "ai_response" field.
func AiResponseContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldAiResponse, v))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldSubmittedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForm applies the HasEdge predicate on the "form" edge.
func HasForm() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormWith applies the HasEdge predicate on the "form" edge with a given conditions (other predicates).
func HasFormWith(preds ...predicate.Form) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswer applies the HasEdge predicate on the "answer" edge.
func HasAnswer() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerWith applies the HasEdge predicate on the "answer" edge with a given conditions (other predicates).
func HasAnswerWith(preds ...predicate.Answer) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newAnswerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Response) predicate.Response {
	return predicate.Response(sql.NotPredicates(p))
}
