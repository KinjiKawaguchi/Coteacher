// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/answer"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/form"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/question"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/questionoption"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/textquestion"
	"github.com/google/uuid"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetFormID sets the "form_id" field.
func (qu *QuestionUpdate) SetFormID(u uuid.UUID) *QuestionUpdate {
	qu.mutation.SetFormID(u)
	return qu
}

// SetNillableFormID sets the "form_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableFormID(u *uuid.UUID) *QuestionUpdate {
	if u != nil {
		qu.SetFormID(*u)
	}
	return qu
}

// SetQuestionType sets the "question_type" field.
func (qu *QuestionUpdate) SetQuestionType(qt question.QuestionType) *QuestionUpdate {
	qu.mutation.SetQuestionType(qt)
	return qu
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuestionType(qt *question.QuestionType) *QuestionUpdate {
	if qt != nil {
		qu.SetQuestionType(*qt)
	}
	return qu
}

// SetQuestionText sets the "question_text" field.
func (qu *QuestionUpdate) SetQuestionText(s string) *QuestionUpdate {
	qu.mutation.SetQuestionText(s)
	return qu
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuestionText(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetQuestionText(*s)
	}
	return qu
}

// SetIsRequired sets the "is_required" field.
func (qu *QuestionUpdate) SetIsRequired(b bool) *QuestionUpdate {
	qu.mutation.SetIsRequired(b)
	return qu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableIsRequired(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetIsRequired(*b)
	}
	return qu
}

// SetForAiProcessing sets the "for_ai_processing" field.
func (qu *QuestionUpdate) SetForAiProcessing(b bool) *QuestionUpdate {
	qu.mutation.SetForAiProcessing(b)
	return qu
}

// SetNillableForAiProcessing sets the "for_ai_processing" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableForAiProcessing(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetForAiProcessing(*b)
	}
	return qu
}

// SetOrder sets the "order" field.
func (qu *QuestionUpdate) SetOrder(i int) *QuestionUpdate {
	qu.mutation.ResetOrder()
	qu.mutation.SetOrder(i)
	return qu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableOrder(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetOrder(*i)
	}
	return qu
}

// AddOrder adds i to the "order" field.
func (qu *QuestionUpdate) AddOrder(i int) *QuestionUpdate {
	qu.mutation.AddOrder(i)
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuestionUpdate) SetCreatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetForm sets the "form" edge to the Form entity.
func (qu *QuestionUpdate) SetForm(f *Form) *QuestionUpdate {
	return qu.SetFormID(f.ID)
}

// AddTextQuestionIDs adds the "textQuestion" edge to the TextQuestion entity by IDs.
func (qu *QuestionUpdate) AddTextQuestionIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.AddTextQuestionIDs(ids...)
	return qu
}

// AddTextQuestion adds the "textQuestion" edges to the TextQuestion entity.
func (qu *QuestionUpdate) AddTextQuestion(t ...*TextQuestion) *QuestionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.AddTextQuestionIDs(ids...)
}

// AddQuestionOptionIDs adds the "questionOption" edge to the QuestionOption entity by IDs.
func (qu *QuestionUpdate) AddQuestionOptionIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.AddQuestionOptionIDs(ids...)
	return qu
}

// AddQuestionOption adds the "questionOption" edges to the QuestionOption entity.
func (qu *QuestionUpdate) AddQuestionOption(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddQuestionOptionIDs(ids...)
}

// AddAnswerIDs adds the "answer" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddAnswerIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.AddAnswerIDs(ids...)
	return qu
}

// AddAnswer adds the "answer" edges to the Answer entity.
func (qu *QuestionUpdate) AddAnswer(a ...*Answer) *QuestionUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearForm clears the "form" edge to the Form entity.
func (qu *QuestionUpdate) ClearForm() *QuestionUpdate {
	qu.mutation.ClearForm()
	return qu
}

// ClearTextQuestion clears all "textQuestion" edges to the TextQuestion entity.
func (qu *QuestionUpdate) ClearTextQuestion() *QuestionUpdate {
	qu.mutation.ClearTextQuestion()
	return qu
}

// RemoveTextQuestionIDs removes the "textQuestion" edge to TextQuestion entities by IDs.
func (qu *QuestionUpdate) RemoveTextQuestionIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.RemoveTextQuestionIDs(ids...)
	return qu
}

// RemoveTextQuestion removes "textQuestion" edges to TextQuestion entities.
func (qu *QuestionUpdate) RemoveTextQuestion(t ...*TextQuestion) *QuestionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.RemoveTextQuestionIDs(ids...)
}

// ClearQuestionOption clears all "questionOption" edges to the QuestionOption entity.
func (qu *QuestionUpdate) ClearQuestionOption() *QuestionUpdate {
	qu.mutation.ClearQuestionOption()
	return qu
}

// RemoveQuestionOptionIDs removes the "questionOption" edge to QuestionOption entities by IDs.
func (qu *QuestionUpdate) RemoveQuestionOptionIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.RemoveQuestionOptionIDs(ids...)
	return qu
}

// RemoveQuestionOption removes "questionOption" edges to QuestionOption entities.
func (qu *QuestionUpdate) RemoveQuestionOption(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveQuestionOptionIDs(ids...)
}

// ClearAnswer clears all "answer" edges to the Answer entity.
func (qu *QuestionUpdate) ClearAnswer() *QuestionUpdate {
	qu.mutation.ClearAnswer()
	return qu
}

// RemoveAnswerIDs removes the "answer" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveAnswerIDs(ids ...uuid.UUID) *QuestionUpdate {
	qu.mutation.RemoveAnswerIDs(ids...)
	return qu
}

// RemoveAnswer removes "answer" edges to Answer entities.
func (qu *QuestionUpdate) RemoveAnswer(a ...*Answer) *QuestionUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.QuestionType(); ok {
		if err := question.QuestionTypeValidator(v); err != nil {
			return &ValidationError{Name: "question_type", err: fmt.Errorf(`ent: validator failed for field "Question.question_type": %w`, err)}
		}
	}
	if _, ok := qu.mutation.FormID(); qu.mutation.FormCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Question.form"`)
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.QuestionType(); ok {
		_spec.SetField(question.FieldQuestionType, field.TypeEnum, value)
	}
	if value, ok := qu.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if value, ok := qu.mutation.IsRequired(); ok {
		_spec.SetField(question.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := qu.mutation.ForAiProcessing(); ok {
		_spec.SetField(question.FieldForAiProcessing, field.TypeBool, value)
	}
	if value, ok := qu.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.TextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedTextQuestionIDs(); len(nodes) > 0 && !qu.mutation.TextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.TextQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.QuestionOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedQuestionOptionIDs(); len(nodes) > 0 && !qu.mutation.QuestionOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuestionOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedAnswerIDs(); len(nodes) > 0 && !qu.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetFormID sets the "form_id" field.
func (quo *QuestionUpdateOne) SetFormID(u uuid.UUID) *QuestionUpdateOne {
	quo.mutation.SetFormID(u)
	return quo
}

// SetNillableFormID sets the "form_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableFormID(u *uuid.UUID) *QuestionUpdateOne {
	if u != nil {
		quo.SetFormID(*u)
	}
	return quo
}

// SetQuestionType sets the "question_type" field.
func (quo *QuestionUpdateOne) SetQuestionType(qt question.QuestionType) *QuestionUpdateOne {
	quo.mutation.SetQuestionType(qt)
	return quo
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuestionType(qt *question.QuestionType) *QuestionUpdateOne {
	if qt != nil {
		quo.SetQuestionType(*qt)
	}
	return quo
}

// SetQuestionText sets the "question_text" field.
func (quo *QuestionUpdateOne) SetQuestionText(s string) *QuestionUpdateOne {
	quo.mutation.SetQuestionText(s)
	return quo
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuestionText(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetQuestionText(*s)
	}
	return quo
}

// SetIsRequired sets the "is_required" field.
func (quo *QuestionUpdateOne) SetIsRequired(b bool) *QuestionUpdateOne {
	quo.mutation.SetIsRequired(b)
	return quo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableIsRequired(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetIsRequired(*b)
	}
	return quo
}

// SetForAiProcessing sets the "for_ai_processing" field.
func (quo *QuestionUpdateOne) SetForAiProcessing(b bool) *QuestionUpdateOne {
	quo.mutation.SetForAiProcessing(b)
	return quo
}

// SetNillableForAiProcessing sets the "for_ai_processing" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableForAiProcessing(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetForAiProcessing(*b)
	}
	return quo
}

// SetOrder sets the "order" field.
func (quo *QuestionUpdateOne) SetOrder(i int) *QuestionUpdateOne {
	quo.mutation.ResetOrder()
	quo.mutation.SetOrder(i)
	return quo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableOrder(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetOrder(*i)
	}
	return quo
}

// AddOrder adds i to the "order" field.
func (quo *QuestionUpdateOne) AddOrder(i int) *QuestionUpdateOne {
	quo.mutation.AddOrder(i)
	return quo
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuestionUpdateOne) SetCreatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetForm sets the "form" edge to the Form entity.
func (quo *QuestionUpdateOne) SetForm(f *Form) *QuestionUpdateOne {
	return quo.SetFormID(f.ID)
}

// AddTextQuestionIDs adds the "textQuestion" edge to the TextQuestion entity by IDs.
func (quo *QuestionUpdateOne) AddTextQuestionIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.AddTextQuestionIDs(ids...)
	return quo
}

// AddTextQuestion adds the "textQuestion" edges to the TextQuestion entity.
func (quo *QuestionUpdateOne) AddTextQuestion(t ...*TextQuestion) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.AddTextQuestionIDs(ids...)
}

// AddQuestionOptionIDs adds the "questionOption" edge to the QuestionOption entity by IDs.
func (quo *QuestionUpdateOne) AddQuestionOptionIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.AddQuestionOptionIDs(ids...)
	return quo
}

// AddQuestionOption adds the "questionOption" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) AddQuestionOption(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddQuestionOptionIDs(ids...)
}

// AddAnswerIDs adds the "answer" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddAnswerIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.AddAnswerIDs(ids...)
	return quo
}

// AddAnswer adds the "answer" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddAnswer(a ...*Answer) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearForm clears the "form" edge to the Form entity.
func (quo *QuestionUpdateOne) ClearForm() *QuestionUpdateOne {
	quo.mutation.ClearForm()
	return quo
}

// ClearTextQuestion clears all "textQuestion" edges to the TextQuestion entity.
func (quo *QuestionUpdateOne) ClearTextQuestion() *QuestionUpdateOne {
	quo.mutation.ClearTextQuestion()
	return quo
}

// RemoveTextQuestionIDs removes the "textQuestion" edge to TextQuestion entities by IDs.
func (quo *QuestionUpdateOne) RemoveTextQuestionIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.RemoveTextQuestionIDs(ids...)
	return quo
}

// RemoveTextQuestion removes "textQuestion" edges to TextQuestion entities.
func (quo *QuestionUpdateOne) RemoveTextQuestion(t ...*TextQuestion) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.RemoveTextQuestionIDs(ids...)
}

// ClearQuestionOption clears all "questionOption" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) ClearQuestionOption() *QuestionUpdateOne {
	quo.mutation.ClearQuestionOption()
	return quo
}

// RemoveQuestionOptionIDs removes the "questionOption" edge to QuestionOption entities by IDs.
func (quo *QuestionUpdateOne) RemoveQuestionOptionIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.RemoveQuestionOptionIDs(ids...)
	return quo
}

// RemoveQuestionOption removes "questionOption" edges to QuestionOption entities.
func (quo *QuestionUpdateOne) RemoveQuestionOption(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveQuestionOptionIDs(ids...)
}

// ClearAnswer clears all "answer" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearAnswer() *QuestionUpdateOne {
	quo.mutation.ClearAnswer()
	return quo
}

// RemoveAnswerIDs removes the "answer" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveAnswerIDs(ids ...uuid.UUID) *QuestionUpdateOne {
	quo.mutation.RemoveAnswerIDs(ids...)
	return quo
}

// RemoveAnswer removes "answer" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveAnswer(a ...*Answer) *QuestionUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveAnswerIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.QuestionType(); ok {
		if err := question.QuestionTypeValidator(v); err != nil {
			return &ValidationError{Name: "question_type", err: fmt.Errorf(`ent: validator failed for field "Question.question_type": %w`, err)}
		}
	}
	if _, ok := quo.mutation.FormID(); quo.mutation.FormCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Question.form"`)
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.QuestionType(); ok {
		_spec.SetField(question.FieldQuestionType, field.TypeEnum, value)
	}
	if value, ok := quo.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if value, ok := quo.mutation.IsRequired(); ok {
		_spec.SetField(question.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := quo.mutation.ForAiProcessing(); ok {
		_spec.SetField(question.FieldForAiProcessing, field.TypeBool, value)
	}
	if value, ok := quo.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FormTable,
			Columns: []string{question.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.TextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedTextQuestionIDs(); len(nodes) > 0 && !quo.mutation.TextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.TextQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.TextQuestionTable,
			Columns: []string{question.TextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.QuestionOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedQuestionOptionIDs(); len(nodes) > 0 && !quo.mutation.QuestionOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuestionOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionTable,
			Columns: []string{question.QuestionOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedAnswerIDs(); len(nodes) > 0 && !quo.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswerTable,
			Columns: []string{question.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
