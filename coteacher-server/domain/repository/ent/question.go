// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/form"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/question"
	"github.com/google/uuid"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FormID holds the value of the "form_id" field.
	FormID uuid.UUID `json:"form_id,omitempty"`
	// QuestionType holds the value of the "question_type" field.
	QuestionType question.QuestionType `json:"question_type,omitempty"`
	// QuestionText holds the value of the "question_text" field.
	QuestionText string `json:"question_text,omitempty"`
	// IsRequired holds the value of the "is_required" field.
	IsRequired bool `json:"is_required,omitempty"`
	// ForAiProcessing holds the value of the "for_ai_processing" field.
	ForAiProcessing bool `json:"for_ai_processing,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges        QuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Form holds the value of the form edge.
	Form *Form `json:"form,omitempty"`
	// TextQuestion holds the value of the textQuestion edge.
	TextQuestion []*TextQuestion `json:"textQuestion,omitempty"`
	// QuestionOption holds the value of the questionOption edge.
	QuestionOption []*QuestionOption `json:"questionOption,omitempty"`
	// Answer holds the value of the answer edge.
	Answer []*Answer `json:"answer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FormOrErr returns the Form value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) FormOrErr() (*Form, error) {
	if e.loadedTypes[0] {
		if e.Form == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: form.Label}
		}
		return e.Form, nil
	}
	return nil, &NotLoadedError{edge: "form"}
}

// TextQuestionOrErr returns the TextQuestion value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) TextQuestionOrErr() ([]*TextQuestion, error) {
	if e.loadedTypes[1] {
		return e.TextQuestion, nil
	}
	return nil, &NotLoadedError{edge: "textQuestion"}
}

// QuestionOptionOrErr returns the QuestionOption value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) QuestionOptionOrErr() ([]*QuestionOption, error) {
	if e.loadedTypes[2] {
		return e.QuestionOption, nil
	}
	return nil, &NotLoadedError{edge: "questionOption"}
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) AnswerOrErr() ([]*Answer, error) {
	if e.loadedTypes[3] {
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldIsRequired, question.FieldForAiProcessing:
			values[i] = new(sql.NullBool)
		case question.FieldOrder:
			values[i] = new(sql.NullInt64)
		case question.FieldQuestionType, question.FieldQuestionText:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case question.FieldID, question.FieldFormID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				q.ID = *value
			}
		case question.FieldFormID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field form_id", values[i])
			} else if value != nil {
				q.FormID = *value
			}
		case question.FieldQuestionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question_type", values[i])
			} else if value.Valid {
				q.QuestionType = question.QuestionType(value.String)
			}
		case question.FieldQuestionText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question_text", values[i])
			} else if value.Valid {
				q.QuestionText = value.String
			}
		case question.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				q.IsRequired = value.Bool
			}
		case question.FieldForAiProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field for_ai_processing", values[i])
			} else if value.Valid {
				q.ForAiProcessing = value.Bool
			}
		case question.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				q.Order = int(value.Int64)
			}
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryForm queries the "form" edge of the Question entity.
func (q *Question) QueryForm() *FormQuery {
	return NewQuestionClient(q.config).QueryForm(q)
}

// QueryTextQuestion queries the "textQuestion" edge of the Question entity.
func (q *Question) QueryTextQuestion() *TextQuestionQuery {
	return NewQuestionClient(q.config).QueryTextQuestion(q)
}

// QueryQuestionOption queries the "questionOption" edge of the Question entity.
func (q *Question) QueryQuestionOption() *QuestionOptionQuery {
	return NewQuestionClient(q.config).QueryQuestionOption(q)
}

// QueryAnswer queries the "answer" edge of the Question entity.
func (q *Question) QueryAnswer() *AnswerQuery {
	return NewQuestionClient(q.config).QueryAnswer(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("form_id=")
	builder.WriteString(fmt.Sprintf("%v", q.FormID))
	builder.WriteString(", ")
	builder.WriteString("question_type=")
	builder.WriteString(fmt.Sprintf("%v", q.QuestionType))
	builder.WriteString(", ")
	builder.WriteString("question_text=")
	builder.WriteString(q.QuestionText)
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", q.IsRequired))
	builder.WriteString(", ")
	builder.WriteString("for_ai_processing=")
	builder.WriteString(fmt.Sprintf("%v", q.ForAiProcessing))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", q.Order))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
