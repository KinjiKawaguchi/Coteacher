// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coteacher/domain/repository/ent/class"
	"coteacher/domain/repository/ent/classinvitationcode"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ClassInvitationCode is the model entity for the ClassInvitationCode schema.
type ClassInvitationCode struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// InvitationCode holds the value of the "invitation_code" field.
	InvitationCode string `json:"invitation_code,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassInvitationCodeQuery when eager-loading is set.
	Edges                        ClassInvitationCodeEdges `json:"edges"`
	class_class_invitation_codes *string
	selectValues                 sql.SelectValues
}

// ClassInvitationCodeEdges holds the relations/edges for other nodes in the graph.
type ClassInvitationCodeEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassInvitationCodeEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClassInvitationCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case classinvitationcode.FieldIsActive:
			values[i] = new(sql.NullBool)
		case classinvitationcode.FieldID, classinvitationcode.FieldInvitationCode:
			values[i] = new(sql.NullString)
		case classinvitationcode.FieldExpirationDate:
			values[i] = new(sql.NullTime)
		case classinvitationcode.ForeignKeys[0]: // class_class_invitation_codes
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClassInvitationCode fields.
func (cic *ClassInvitationCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case classinvitationcode.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cic.ID = value.String
			}
		case classinvitationcode.FieldInvitationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_code", values[i])
			} else if value.Valid {
				cic.InvitationCode = value.String
			}
		case classinvitationcode.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				cic.ExpirationDate = value.Time
			}
		case classinvitationcode.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				cic.IsActive = value.Bool
			}
		case classinvitationcode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_class_invitation_codes", values[i])
			} else if value.Valid {
				cic.class_class_invitation_codes = new(string)
				*cic.class_class_invitation_codes = value.String
			}
		default:
			cic.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClassInvitationCode.
// This includes values selected through modifiers, order, etc.
func (cic *ClassInvitationCode) Value(name string) (ent.Value, error) {
	return cic.selectValues.Get(name)
}

// QueryClass queries the "class" edge of the ClassInvitationCode entity.
func (cic *ClassInvitationCode) QueryClass() *ClassQuery {
	return NewClassInvitationCodeClient(cic.config).QueryClass(cic)
}

// Update returns a builder for updating this ClassInvitationCode.
// Note that you need to call ClassInvitationCode.Unwrap() before calling this method if this ClassInvitationCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (cic *ClassInvitationCode) Update() *ClassInvitationCodeUpdateOne {
	return NewClassInvitationCodeClient(cic.config).UpdateOne(cic)
}

// Unwrap unwraps the ClassInvitationCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cic *ClassInvitationCode) Unwrap() *ClassInvitationCode {
	_tx, ok := cic.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClassInvitationCode is not a transactional entity")
	}
	cic.config.driver = _tx.drv
	return cic
}

// String implements the fmt.Stringer.
func (cic *ClassInvitationCode) String() string {
	var builder strings.Builder
	builder.WriteString("ClassInvitationCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cic.ID))
	builder.WriteString("invitation_code=")
	builder.WriteString(cic.InvitationCode)
	builder.WriteString(", ")
	builder.WriteString("expiration_date=")
	builder.WriteString(cic.ExpirationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", cic.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// ClassInvitationCodes is a parsable slice of ClassInvitationCode.
type ClassInvitationCodes []*ClassInvitationCode
