// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/question"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/questionoption"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/selectedoption"
	"github.com/google/uuid"
)

// QuestionOptionUpdate is the builder for updating QuestionOption entities.
type QuestionOptionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionOptionMutation
}

// Where appends a list predicates to the QuestionOptionUpdate builder.
func (qou *QuestionOptionUpdate) Where(ps ...predicate.QuestionOption) *QuestionOptionUpdate {
	qou.mutation.Where(ps...)
	return qou
}

// SetQuestionID sets the "question_id" field.
func (qou *QuestionOptionUpdate) SetQuestionID(u uuid.UUID) *QuestionOptionUpdate {
	qou.mutation.SetQuestionID(u)
	return qou
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (qou *QuestionOptionUpdate) SetNillableQuestionID(u *uuid.UUID) *QuestionOptionUpdate {
	if u != nil {
		qou.SetQuestionID(*u)
	}
	return qou
}

// SetOptionText sets the "option_text" field.
func (qou *QuestionOptionUpdate) SetOptionText(s string) *QuestionOptionUpdate {
	qou.mutation.SetOptionText(s)
	return qou
}

// SetNillableOptionText sets the "option_text" field if the given value is not nil.
func (qou *QuestionOptionUpdate) SetNillableOptionText(s *string) *QuestionOptionUpdate {
	if s != nil {
		qou.SetOptionText(*s)
	}
	return qou
}

// SetOrder sets the "order" field.
func (qou *QuestionOptionUpdate) SetOrder(i int) *QuestionOptionUpdate {
	qou.mutation.ResetOrder()
	qou.mutation.SetOrder(i)
	return qou
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qou *QuestionOptionUpdate) SetNillableOrder(i *int) *QuestionOptionUpdate {
	if i != nil {
		qou.SetOrder(*i)
	}
	return qou
}

// AddOrder adds i to the "order" field.
func (qou *QuestionOptionUpdate) AddOrder(i int) *QuestionOptionUpdate {
	qou.mutation.AddOrder(i)
	return qou
}

// SetQuestion sets the "question" edge to the Question entity.
func (qou *QuestionOptionUpdate) SetQuestion(q *Question) *QuestionOptionUpdate {
	return qou.SetQuestionID(q.ID)
}

// AddSelectedOptionIDs adds the "selectedOption" edge to the SelectedOption entity by IDs.
func (qou *QuestionOptionUpdate) AddSelectedOptionIDs(ids ...int) *QuestionOptionUpdate {
	qou.mutation.AddSelectedOptionIDs(ids...)
	return qou
}

// AddSelectedOption adds the "selectedOption" edges to the SelectedOption entity.
func (qou *QuestionOptionUpdate) AddSelectedOption(s ...*SelectedOption) *QuestionOptionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qou.AddSelectedOptionIDs(ids...)
}

// Mutation returns the QuestionOptionMutation object of the builder.
func (qou *QuestionOptionUpdate) Mutation() *QuestionOptionMutation {
	return qou.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (qou *QuestionOptionUpdate) ClearQuestion() *QuestionOptionUpdate {
	qou.mutation.ClearQuestion()
	return qou
}

// ClearSelectedOption clears all "selectedOption" edges to the SelectedOption entity.
func (qou *QuestionOptionUpdate) ClearSelectedOption() *QuestionOptionUpdate {
	qou.mutation.ClearSelectedOption()
	return qou
}

// RemoveSelectedOptionIDs removes the "selectedOption" edge to SelectedOption entities by IDs.
func (qou *QuestionOptionUpdate) RemoveSelectedOptionIDs(ids ...int) *QuestionOptionUpdate {
	qou.mutation.RemoveSelectedOptionIDs(ids...)
	return qou
}

// RemoveSelectedOption removes "selectedOption" edges to SelectedOption entities.
func (qou *QuestionOptionUpdate) RemoveSelectedOption(s ...*SelectedOption) *QuestionOptionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qou.RemoveSelectedOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qou *QuestionOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qou.sqlSave, qou.mutation, qou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qou *QuestionOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := qou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qou *QuestionOptionUpdate) Exec(ctx context.Context) error {
	_, err := qou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qou *QuestionOptionUpdate) ExecX(ctx context.Context) {
	if err := qou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qou *QuestionOptionUpdate) check() error {
	if _, ok := qou.mutation.QuestionID(); qou.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QuestionOption.question"`)
	}
	return nil
}

func (qou *QuestionOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionoption.Table, questionoption.Columns, sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID))
	if ps := qou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qou.mutation.OptionText(); ok {
		_spec.SetField(questionoption.FieldOptionText, field.TypeString, value)
	}
	if value, ok := qou.mutation.Order(); ok {
		_spec.SetField(questionoption.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qou.mutation.AddedOrder(); ok {
		_spec.AddField(questionoption.FieldOrder, field.TypeInt, value)
	}
	if qou.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionoption.QuestionTable,
			Columns: []string{questionoption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qou.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionoption.QuestionTable,
			Columns: []string{questionoption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qou.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qou.mutation.RemovedSelectedOptionIDs(); len(nodes) > 0 && !qou.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qou.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qou.mutation.done = true
	return n, nil
}

// QuestionOptionUpdateOne is the builder for updating a single QuestionOption entity.
type QuestionOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionOptionMutation
}

// SetQuestionID sets the "question_id" field.
func (qouo *QuestionOptionUpdateOne) SetQuestionID(u uuid.UUID) *QuestionOptionUpdateOne {
	qouo.mutation.SetQuestionID(u)
	return qouo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (qouo *QuestionOptionUpdateOne) SetNillableQuestionID(u *uuid.UUID) *QuestionOptionUpdateOne {
	if u != nil {
		qouo.SetQuestionID(*u)
	}
	return qouo
}

// SetOptionText sets the "option_text" field.
func (qouo *QuestionOptionUpdateOne) SetOptionText(s string) *QuestionOptionUpdateOne {
	qouo.mutation.SetOptionText(s)
	return qouo
}

// SetNillableOptionText sets the "option_text" field if the given value is not nil.
func (qouo *QuestionOptionUpdateOne) SetNillableOptionText(s *string) *QuestionOptionUpdateOne {
	if s != nil {
		qouo.SetOptionText(*s)
	}
	return qouo
}

// SetOrder sets the "order" field.
func (qouo *QuestionOptionUpdateOne) SetOrder(i int) *QuestionOptionUpdateOne {
	qouo.mutation.ResetOrder()
	qouo.mutation.SetOrder(i)
	return qouo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qouo *QuestionOptionUpdateOne) SetNillableOrder(i *int) *QuestionOptionUpdateOne {
	if i != nil {
		qouo.SetOrder(*i)
	}
	return qouo
}

// AddOrder adds i to the "order" field.
func (qouo *QuestionOptionUpdateOne) AddOrder(i int) *QuestionOptionUpdateOne {
	qouo.mutation.AddOrder(i)
	return qouo
}

// SetQuestion sets the "question" edge to the Question entity.
func (qouo *QuestionOptionUpdateOne) SetQuestion(q *Question) *QuestionOptionUpdateOne {
	return qouo.SetQuestionID(q.ID)
}

// AddSelectedOptionIDs adds the "selectedOption" edge to the SelectedOption entity by IDs.
func (qouo *QuestionOptionUpdateOne) AddSelectedOptionIDs(ids ...int) *QuestionOptionUpdateOne {
	qouo.mutation.AddSelectedOptionIDs(ids...)
	return qouo
}

// AddSelectedOption adds the "selectedOption" edges to the SelectedOption entity.
func (qouo *QuestionOptionUpdateOne) AddSelectedOption(s ...*SelectedOption) *QuestionOptionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qouo.AddSelectedOptionIDs(ids...)
}

// Mutation returns the QuestionOptionMutation object of the builder.
func (qouo *QuestionOptionUpdateOne) Mutation() *QuestionOptionMutation {
	return qouo.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (qouo *QuestionOptionUpdateOne) ClearQuestion() *QuestionOptionUpdateOne {
	qouo.mutation.ClearQuestion()
	return qouo
}

// ClearSelectedOption clears all "selectedOption" edges to the SelectedOption entity.
func (qouo *QuestionOptionUpdateOne) ClearSelectedOption() *QuestionOptionUpdateOne {
	qouo.mutation.ClearSelectedOption()
	return qouo
}

// RemoveSelectedOptionIDs removes the "selectedOption" edge to SelectedOption entities by IDs.
func (qouo *QuestionOptionUpdateOne) RemoveSelectedOptionIDs(ids ...int) *QuestionOptionUpdateOne {
	qouo.mutation.RemoveSelectedOptionIDs(ids...)
	return qouo
}

// RemoveSelectedOption removes "selectedOption" edges to SelectedOption entities.
func (qouo *QuestionOptionUpdateOne) RemoveSelectedOption(s ...*SelectedOption) *QuestionOptionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qouo.RemoveSelectedOptionIDs(ids...)
}

// Where appends a list predicates to the QuestionOptionUpdate builder.
func (qouo *QuestionOptionUpdateOne) Where(ps ...predicate.QuestionOption) *QuestionOptionUpdateOne {
	qouo.mutation.Where(ps...)
	return qouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qouo *QuestionOptionUpdateOne) Select(field string, fields ...string) *QuestionOptionUpdateOne {
	qouo.fields = append([]string{field}, fields...)
	return qouo
}

// Save executes the query and returns the updated QuestionOption entity.
func (qouo *QuestionOptionUpdateOne) Save(ctx context.Context) (*QuestionOption, error) {
	return withHooks(ctx, qouo.sqlSave, qouo.mutation, qouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qouo *QuestionOptionUpdateOne) SaveX(ctx context.Context) *QuestionOption {
	node, err := qouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qouo *QuestionOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := qouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qouo *QuestionOptionUpdateOne) ExecX(ctx context.Context) {
	if err := qouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qouo *QuestionOptionUpdateOne) check() error {
	if _, ok := qouo.mutation.QuestionID(); qouo.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QuestionOption.question"`)
	}
	return nil
}

func (qouo *QuestionOptionUpdateOne) sqlSave(ctx context.Context) (_node *QuestionOption, err error) {
	if err := qouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionoption.Table, questionoption.Columns, sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID))
	id, ok := qouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionoption.FieldID)
		for _, f := range fields {
			if !questionoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qouo.mutation.OptionText(); ok {
		_spec.SetField(questionoption.FieldOptionText, field.TypeString, value)
	}
	if value, ok := qouo.mutation.Order(); ok {
		_spec.SetField(questionoption.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qouo.mutation.AddedOrder(); ok {
		_spec.AddField(questionoption.FieldOrder, field.TypeInt, value)
	}
	if qouo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionoption.QuestionTable,
			Columns: []string{questionoption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qouo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionoption.QuestionTable,
			Columns: []string{questionoption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qouo.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qouo.mutation.RemovedSelectedOptionIDs(); len(nodes) > 0 && !qouo.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qouo.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionOption{config: qouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qouo.mutation.done = true
	return _node, nil
}
