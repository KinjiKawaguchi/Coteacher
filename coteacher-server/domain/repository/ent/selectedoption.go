// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/answer"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/questionoption"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/selectedoption"
	"github.com/google/uuid"
)

// SelectedOption is the model entity for the SelectedOption schema.
type SelectedOption struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OptionID holds the value of the "option_id" field.
	OptionID uuid.UUID `json:"option_id,omitempty"`
	// AnswerID holds the value of the "answer_id" field.
	AnswerID uuid.UUID `json:"answer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SelectedOptionQuery when eager-loading is set.
	Edges        SelectedOptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SelectedOptionEdges holds the relations/edges for other nodes in the graph.
type SelectedOptionEdges struct {
	// Answer holds the value of the answer edge.
	Answer *Answer `json:"answer,omitempty"`
	// Option holds the value of the option edge.
	Option *QuestionOption `json:"option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectedOptionEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[0] {
		if e.Answer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// OptionOrErr returns the Option value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectedOptionEdges) OptionOrErr() (*QuestionOption, error) {
	if e.loadedTypes[1] {
		if e.Option == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: questionoption.Label}
		}
		return e.Option, nil
	}
	return nil, &NotLoadedError{edge: "option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SelectedOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case selectedoption.FieldID:
			values[i] = new(sql.NullInt64)
		case selectedoption.FieldOptionID, selectedoption.FieldAnswerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SelectedOption fields.
func (so *SelectedOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case selectedoption.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			so.ID = int(value.Int64)
		case selectedoption.FieldOptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field option_id", values[i])
			} else if value != nil {
				so.OptionID = *value
			}
		case selectedoption.FieldAnswerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field answer_id", values[i])
			} else if value != nil {
				so.AnswerID = *value
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SelectedOption.
// This includes values selected through modifiers, order, etc.
func (so *SelectedOption) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// QueryAnswer queries the "answer" edge of the SelectedOption entity.
func (so *SelectedOption) QueryAnswer() *AnswerQuery {
	return NewSelectedOptionClient(so.config).QueryAnswer(so)
}

// QueryOption queries the "option" edge of the SelectedOption entity.
func (so *SelectedOption) QueryOption() *QuestionOptionQuery {
	return NewSelectedOptionClient(so.config).QueryOption(so)
}

// Update returns a builder for updating this SelectedOption.
// Note that you need to call SelectedOption.Unwrap() before calling this method if this SelectedOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SelectedOption) Update() *SelectedOptionUpdateOne {
	return NewSelectedOptionClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SelectedOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SelectedOption) Unwrap() *SelectedOption {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SelectedOption is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SelectedOption) String() string {
	var builder strings.Builder
	builder.WriteString("SelectedOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("option_id=")
	builder.WriteString(fmt.Sprintf("%v", so.OptionID))
	builder.WriteString(", ")
	builder.WriteString("answer_id=")
	builder.WriteString(fmt.Sprintf("%v", so.AnswerID))
	builder.WriteByte(')')
	return builder.String()
}

// SelectedOptions is a parsable slice of SelectedOption.
type SelectedOptions []*SelectedOption
