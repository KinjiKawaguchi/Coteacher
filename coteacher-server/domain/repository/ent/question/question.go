// Code generated by ent, DO NOT EDIT.

package question

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFormID holds the string denoting the form_id field in the database.
	FieldFormID = "form_id"
	// FieldQuestionType holds the string denoting the question_type field in the database.
	FieldQuestionType = "question_type"
	// FieldQuestionText holds the string denoting the question_text field in the database.
	FieldQuestionText = "question_text"
	// FieldIsRequired holds the string denoting the is_required field in the database.
	FieldIsRequired = "is_required"
	// FieldForAiProcessing holds the string denoting the for_ai_processing field in the database.
	FieldForAiProcessing = "for_ai_processing"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeForm holds the string denoting the form edge name in mutations.
	EdgeForm = "form"
	// EdgeTextQuestion holds the string denoting the textquestion edge name in mutations.
	EdgeTextQuestion = "textQuestion"
	// EdgeQuestionOption holds the string denoting the questionoption edge name in mutations.
	EdgeQuestionOption = "questionOption"
	// EdgeAnswer holds the string denoting the answer edge name in mutations.
	EdgeAnswer = "answer"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// FormTable is the table that holds the form relation/edge.
	FormTable = "questions"
	// FormInverseTable is the table name for the Form entity.
	// It exists in this package in order to avoid circular dependency with the "form" package.
	FormInverseTable = "forms"
	// FormColumn is the table column denoting the form relation/edge.
	FormColumn = "form_id"
	// TextQuestionTable is the table that holds the textQuestion relation/edge.
	TextQuestionTable = "text_questions"
	// TextQuestionInverseTable is the table name for the TextQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "textquestion" package.
	TextQuestionInverseTable = "text_questions"
	// TextQuestionColumn is the table column denoting the textQuestion relation/edge.
	TextQuestionColumn = "question_id"
	// QuestionOptionTable is the table that holds the questionOption relation/edge.
	QuestionOptionTable = "question_options"
	// QuestionOptionInverseTable is the table name for the QuestionOption entity.
	// It exists in this package in order to avoid circular dependency with the "questionoption" package.
	QuestionOptionInverseTable = "question_options"
	// QuestionOptionColumn is the table column denoting the questionOption relation/edge.
	QuestionOptionColumn = "question_id"
	// AnswerTable is the table that holds the answer relation/edge.
	AnswerTable = "answers"
	// AnswerInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswerInverseTable = "answers"
	// AnswerColumn is the table column denoting the answer relation/edge.
	AnswerColumn = "question_id"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldFormID,
	FieldQuestionType,
	FieldQuestionText,
	FieldIsRequired,
	FieldForAiProcessing,
	FieldOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// QuestionType defines the type for the "question_type" enum field.
type QuestionType string

// QuestionType values.
const (
	QuestionTypeCheckbox       QuestionType = "checkbox"
	QuestionTypeList           QuestionType = "list"
	QuestionTypeRadio          QuestionType = "radio"
	QuestionTypeMultipleChoice QuestionType = "multiple_choice"
	QuestionTypeParagraphText  QuestionType = "paragraph_text"
	QuestionTypeText           QuestionType = "text"
	QuestionTypeUnspecified    QuestionType = "unspecified"
)

func (qt QuestionType) String() string {
	return string(qt)
}

// QuestionTypeValidator is a validator for the "question_type" field enum values. It is called by the builders before save.
func QuestionTypeValidator(qt QuestionType) error {
	switch qt {
	case QuestionTypeCheckbox, QuestionTypeList, QuestionTypeRadio, QuestionTypeMultipleChoice, QuestionTypeParagraphText, QuestionTypeText, QuestionTypeUnspecified:
		return nil
	default:
		return fmt.Errorf("question: invalid enum value for question_type field: %q", qt)
	}
}

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFormID orders the results by the form_id field.
func ByFormID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormID, opts...).ToFunc()
}

// ByQuestionType orders the results by the question_type field.
func ByQuestionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionType, opts...).ToFunc()
}

// ByQuestionText orders the results by the question_text field.
func ByQuestionText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionText, opts...).ToFunc()
}

// ByIsRequired orders the results by the is_required field.
func ByIsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequired, opts...).ToFunc()
}

// ByForAiProcessing orders the results by the for_ai_processing field.
func ByForAiProcessing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForAiProcessing, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFormField orders the results by form field.
func ByFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormStep(), sql.OrderByField(field, opts...))
	}
}

// ByTextQuestionCount orders the results by textQuestion count.
func ByTextQuestionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTextQuestionStep(), opts...)
	}
}

// ByTextQuestion orders the results by textQuestion terms.
func ByTextQuestion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTextQuestionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionOptionCount orders the results by questionOption count.
func ByQuestionOptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionOptionStep(), opts...)
	}
}

// ByQuestionOption orders the results by questionOption terms.
func ByQuestionOption(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionOptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnswerCount orders the results by answer count.
func ByAnswerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerStep(), opts...)
	}
}

// ByAnswer orders the results by answer terms.
func ByAnswer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
	)
}
func newTextQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TextQuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TextQuestionTable, TextQuestionColumn),
	)
}
func newQuestionOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionOptionTable, QuestionOptionColumn),
	)
}
func newAnswerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
	)
}
