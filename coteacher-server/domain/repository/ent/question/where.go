// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// FormID applies equality check predicate on the "form_id" field. It's identical to FormIDEQ.
func FormID(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldFormID, v))
}

// QuestionText applies equality check predicate on the "question_text" field. It's identical to QuestionTextEQ.
func QuestionText(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// IsRequired applies equality check predicate on the "is_required" field. It's identical to IsRequiredEQ.
func IsRequired(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIsRequired, v))
}

// ForAiProcessing applies equality check predicate on the "for_ai_processing" field. It's identical to ForAiProcessingEQ.
func ForAiProcessing(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldForAiProcessing, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// FormIDEQ applies the EQ predicate on the "form_id" field.
func FormIDEQ(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldFormID, v))
}

// FormIDNEQ applies the NEQ predicate on the "form_id" field.
func FormIDNEQ(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldFormID, v))
}

// FormIDIn applies the In predicate on the "form_id" field.
func FormIDIn(vs ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldFormID, vs...))
}

// FormIDNotIn applies the NotIn predicate on the "form_id" field.
func FormIDNotIn(vs ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldFormID, vs...))
}

// QuestionTypeEQ applies the EQ predicate on the "question_type" field.
func QuestionTypeEQ(v QuestionType) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionType, v))
}

// QuestionTypeNEQ applies the NEQ predicate on the "question_type" field.
func QuestionTypeNEQ(v QuestionType) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionType, v))
}

// QuestionTypeIn applies the In predicate on the "question_type" field.
func QuestionTypeIn(vs ...QuestionType) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionType, vs...))
}

// QuestionTypeNotIn applies the NotIn predicate on the "question_type" field.
func QuestionTypeNotIn(vs ...QuestionType) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionType, vs...))
}

// QuestionTextEQ applies the EQ predicate on the "question_text" field.
func QuestionTextEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// QuestionTextNEQ applies the NEQ predicate on the "question_text" field.
func QuestionTextNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionText, v))
}

// QuestionTextIn applies the In predicate on the "question_text" field.
func QuestionTextIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionText, vs...))
}

// QuestionTextNotIn applies the NotIn predicate on the "question_text" field.
func QuestionTextNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionText, vs...))
}

// QuestionTextGT applies the GT predicate on the "question_text" field.
func QuestionTextGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionText, v))
}

// QuestionTextGTE applies the GTE predicate on the "question_text" field.
func QuestionTextGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionText, v))
}

// QuestionTextLT applies the LT predicate on the "question_text" field.
func QuestionTextLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionText, v))
}

// QuestionTextLTE applies the LTE predicate on the "question_text" field.
func QuestionTextLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionText, v))
}

// QuestionTextContains applies the Contains predicate on the "question_text" field.
func QuestionTextContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuestionText, v))
}

// QuestionTextHasPrefix applies the HasPrefix predicate on the "question_text" field.
func QuestionTextHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuestionText, v))
}

// QuestionTextHasSuffix applies the HasSuffix predicate on the "question_text" field.
func QuestionTextHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuestionText, v))
}

// QuestionTextEqualFold applies the EqualFold predicate on the "question_text" field.
func QuestionTextEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuestionText, v))
}

// QuestionTextContainsFold applies the ContainsFold predicate on the "question_text" field.
func QuestionTextContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuestionText, v))
}

// IsRequiredEQ applies the EQ predicate on the "is_required" field.
func IsRequiredEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIsRequired, v))
}

// IsRequiredNEQ applies the NEQ predicate on the "is_required" field.
func IsRequiredNEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldIsRequired, v))
}

// ForAiProcessingEQ applies the EQ predicate on the "for_ai_processing" field.
func ForAiProcessingEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldForAiProcessing, v))
}

// ForAiProcessingNEQ applies the NEQ predicate on the "for_ai_processing" field.
func ForAiProcessingNEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldForAiProcessing, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasForm applies the HasEdge predicate on the "form" edge.
func HasForm() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormWith applies the HasEdge predicate on the "form" edge with a given conditions (other predicates).
func HasFormWith(preds ...predicate.Form) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTextQuestion applies the HasEdge predicate on the "textQuestion" edge.
func HasTextQuestion() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TextQuestionTable, TextQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTextQuestionWith applies the HasEdge predicate on the "textQuestion" edge with a given conditions (other predicates).
func HasTextQuestionWith(preds ...predicate.TextQuestion) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newTextQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionOption applies the HasEdge predicate on the "questionOption" edge.
func HasQuestionOption() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionOptionTable, QuestionOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionOptionWith applies the HasEdge predicate on the "questionOption" edge with a given conditions (other predicates).
func HasQuestionOptionWith(preds ...predicate.QuestionOption) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newQuestionOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswer applies the HasEdge predicate on the "answer" edge.
func HasAnswer() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerWith applies the HasEdge predicate on the "answer" edge with a given conditions (other predicates).
func HasAnswerWith(preds ...predicate.Answer) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newAnswerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
