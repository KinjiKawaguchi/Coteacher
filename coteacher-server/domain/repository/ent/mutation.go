// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coteacher/domain/repository/ent/class"
	"coteacher/domain/repository/ent/classinvitationcode"
	"coteacher/domain/repository/ent/predicate"
	"coteacher/domain/repository/ent/studentclass"
	"coteacher/domain/repository/ent/user"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClass               = "Class"
	TypeClassInvitationCode = "ClassInvitationCode"
	TypeStudentClass        = "StudentClass"
	TypeUser                = "User"
)

// ClassMutation represents an operation that mutates the Class nodes in the graph.
type ClassMutation struct {
	config
	op                            Op
	typ                           string
	id                            *string
	name                          *string
	clearedFields                 map[string]struct{}
	users                         map[string]struct{}
	removedusers                  map[string]struct{}
	clearedusers                  bool
	class_invitation_codes        map[string]struct{}
	removedclass_invitation_codes map[string]struct{}
	clearedclass_invitation_codes bool
	student_classes               map[int]struct{}
	removedstudent_classes        map[int]struct{}
	clearedstudent_classes        bool
	done                          bool
	oldValue                      func(context.Context) (*Class, error)
	predicates                    []predicate.Class
}

var _ ent.Mutation = (*ClassMutation)(nil)

// classOption allows management of the mutation configuration using functional options.
type classOption func(*ClassMutation)

// newClassMutation creates new mutation for the Class entity.
func newClassMutation(c config, op Op, opts ...classOption) *ClassMutation {
	m := &ClassMutation{
		config:        c,
		op:            op,
		typ:           TypeClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassID sets the ID field of the mutation.
func withClassID(id string) classOption {
	return func(m *ClassMutation) {
		var (
			err   error
			once  sync.Once
			value *Class
		)
		m.oldValue = func(ctx context.Context) (*Class, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Class.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClass sets the old Class of the mutation.
func withClass(node *Class) classOption {
	return func(m *ClassMutation) {
		m.oldValue = func(context.Context) (*Class, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Class entities.
func (m *ClassMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Class.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClassMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClassMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClassMutation) ResetName() {
	m.name = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *ClassMutation) AddUserIDs(ids ...string) {
	if m.users == nil {
		m.users = make(map[string]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *ClassMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *ClassMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *ClassMutation) RemoveUserIDs(ids ...string) {
	if m.removedusers == nil {
		m.removedusers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *ClassMutation) RemovedUsersIDs() (ids []string) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *ClassMutation) UsersIDs() (ids []string) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *ClassMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddClassInvitationCodeIDs adds the "class_invitation_codes" edge to the ClassInvitationCode entity by ids.
func (m *ClassMutation) AddClassInvitationCodeIDs(ids ...string) {
	if m.class_invitation_codes == nil {
		m.class_invitation_codes = make(map[string]struct{})
	}
	for i := range ids {
		m.class_invitation_codes[ids[i]] = struct{}{}
	}
}

// ClearClassInvitationCodes clears the "class_invitation_codes" edge to the ClassInvitationCode entity.
func (m *ClassMutation) ClearClassInvitationCodes() {
	m.clearedclass_invitation_codes = true
}

// ClassInvitationCodesCleared reports if the "class_invitation_codes" edge to the ClassInvitationCode entity was cleared.
func (m *ClassMutation) ClassInvitationCodesCleared() bool {
	return m.clearedclass_invitation_codes
}

// RemoveClassInvitationCodeIDs removes the "class_invitation_codes" edge to the ClassInvitationCode entity by IDs.
func (m *ClassMutation) RemoveClassInvitationCodeIDs(ids ...string) {
	if m.removedclass_invitation_codes == nil {
		m.removedclass_invitation_codes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.class_invitation_codes, ids[i])
		m.removedclass_invitation_codes[ids[i]] = struct{}{}
	}
}

// RemovedClassInvitationCodes returns the removed IDs of the "class_invitation_codes" edge to the ClassInvitationCode entity.
func (m *ClassMutation) RemovedClassInvitationCodesIDs() (ids []string) {
	for id := range m.removedclass_invitation_codes {
		ids = append(ids, id)
	}
	return
}

// ClassInvitationCodesIDs returns the "class_invitation_codes" edge IDs in the mutation.
func (m *ClassMutation) ClassInvitationCodesIDs() (ids []string) {
	for id := range m.class_invitation_codes {
		ids = append(ids, id)
	}
	return
}

// ResetClassInvitationCodes resets all changes to the "class_invitation_codes" edge.
func (m *ClassMutation) ResetClassInvitationCodes() {
	m.class_invitation_codes = nil
	m.clearedclass_invitation_codes = false
	m.removedclass_invitation_codes = nil
}

// AddStudentClassIDs adds the "student_classes" edge to the StudentClass entity by ids.
func (m *ClassMutation) AddStudentClassIDs(ids ...int) {
	if m.student_classes == nil {
		m.student_classes = make(map[int]struct{})
	}
	for i := range ids {
		m.student_classes[ids[i]] = struct{}{}
	}
}

// ClearStudentClasses clears the "student_classes" edge to the StudentClass entity.
func (m *ClassMutation) ClearStudentClasses() {
	m.clearedstudent_classes = true
}

// StudentClassesCleared reports if the "student_classes" edge to the StudentClass entity was cleared.
func (m *ClassMutation) StudentClassesCleared() bool {
	return m.clearedstudent_classes
}

// RemoveStudentClassIDs removes the "student_classes" edge to the StudentClass entity by IDs.
func (m *ClassMutation) RemoveStudentClassIDs(ids ...int) {
	if m.removedstudent_classes == nil {
		m.removedstudent_classes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.student_classes, ids[i])
		m.removedstudent_classes[ids[i]] = struct{}{}
	}
}

// RemovedStudentClasses returns the removed IDs of the "student_classes" edge to the StudentClass entity.
func (m *ClassMutation) RemovedStudentClassesIDs() (ids []int) {
	for id := range m.removedstudent_classes {
		ids = append(ids, id)
	}
	return
}

// StudentClassesIDs returns the "student_classes" edge IDs in the mutation.
func (m *ClassMutation) StudentClassesIDs() (ids []int) {
	for id := range m.student_classes {
		ids = append(ids, id)
	}
	return
}

// ResetStudentClasses resets all changes to the "student_classes" edge.
func (m *ClassMutation) ResetStudentClasses() {
	m.student_classes = nil
	m.clearedstudent_classes = false
	m.removedstudent_classes = nil
}

// Where appends a list predicates to the ClassMutation builder.
func (m *ClassMutation) Where(ps ...predicate.Class) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Class, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Class).
func (m *ClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, class.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case class.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case class.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Class field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case class.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Class numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Class nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassMutation) ResetField(name string) error {
	switch name {
	case class.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, class.EdgeUsers)
	}
	if m.class_invitation_codes != nil {
		edges = append(edges, class.EdgeClassInvitationCodes)
	}
	if m.student_classes != nil {
		edges = append(edges, class.EdgeStudentClasses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeClassInvitationCodes:
		ids := make([]ent.Value, 0, len(m.class_invitation_codes))
		for id := range m.class_invitation_codes {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeStudentClasses:
		ids := make([]ent.Value, 0, len(m.student_classes))
		for id := range m.student_classes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, class.EdgeUsers)
	}
	if m.removedclass_invitation_codes != nil {
		edges = append(edges, class.EdgeClassInvitationCodes)
	}
	if m.removedstudent_classes != nil {
		edges = append(edges, class.EdgeStudentClasses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeClassInvitationCodes:
		ids := make([]ent.Value, 0, len(m.removedclass_invitation_codes))
		for id := range m.removedclass_invitation_codes {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeStudentClasses:
		ids := make([]ent.Value, 0, len(m.removedstudent_classes))
		for id := range m.removedstudent_classes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, class.EdgeUsers)
	}
	if m.clearedclass_invitation_codes {
		edges = append(edges, class.EdgeClassInvitationCodes)
	}
	if m.clearedstudent_classes {
		edges = append(edges, class.EdgeStudentClasses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassMutation) EdgeCleared(name string) bool {
	switch name {
	case class.EdgeUsers:
		return m.clearedusers
	case class.EdgeClassInvitationCodes:
		return m.clearedclass_invitation_codes
	case class.EdgeStudentClasses:
		return m.clearedstudent_classes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Class unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassMutation) ResetEdge(name string) error {
	switch name {
	case class.EdgeUsers:
		m.ResetUsers()
		return nil
	case class.EdgeClassInvitationCodes:
		m.ResetClassInvitationCodes()
		return nil
	case class.EdgeStudentClasses:
		m.ResetStudentClasses()
		return nil
	}
	return fmt.Errorf("unknown Class edge %s", name)
}

// ClassInvitationCodeMutation represents an operation that mutates the ClassInvitationCode nodes in the graph.
type ClassInvitationCodeMutation struct {
	config
	op              Op
	typ             string
	id              *string
	invitation_code *string
	expiration_date *time.Time
	is_active       *bool
	clearedFields   map[string]struct{}
	class           *string
	clearedclass    bool
	done            bool
	oldValue        func(context.Context) (*ClassInvitationCode, error)
	predicates      []predicate.ClassInvitationCode
}

var _ ent.Mutation = (*ClassInvitationCodeMutation)(nil)

// classinvitationcodeOption allows management of the mutation configuration using functional options.
type classinvitationcodeOption func(*ClassInvitationCodeMutation)

// newClassInvitationCodeMutation creates new mutation for the ClassInvitationCode entity.
func newClassInvitationCodeMutation(c config, op Op, opts ...classinvitationcodeOption) *ClassInvitationCodeMutation {
	m := &ClassInvitationCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeClassInvitationCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassInvitationCodeID sets the ID field of the mutation.
func withClassInvitationCodeID(id string) classinvitationcodeOption {
	return func(m *ClassInvitationCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *ClassInvitationCode
		)
		m.oldValue = func(ctx context.Context) (*ClassInvitationCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClassInvitationCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClassInvitationCode sets the old ClassInvitationCode of the mutation.
func withClassInvitationCode(node *ClassInvitationCode) classinvitationcodeOption {
	return func(m *ClassInvitationCodeMutation) {
		m.oldValue = func(context.Context) (*ClassInvitationCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassInvitationCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassInvitationCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ClassInvitationCode entities.
func (m *ClassInvitationCodeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassInvitationCodeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassInvitationCodeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClassInvitationCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInvitationCode sets the "invitation_code" field.
func (m *ClassInvitationCodeMutation) SetInvitationCode(s string) {
	m.invitation_code = &s
}

// InvitationCode returns the value of the "invitation_code" field in the mutation.
func (m *ClassInvitationCodeMutation) InvitationCode() (r string, exists bool) {
	v := m.invitation_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationCode returns the old "invitation_code" field's value of the ClassInvitationCode entity.
// If the ClassInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassInvitationCodeMutation) OldInvitationCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvitationCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvitationCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationCode: %w", err)
	}
	return oldValue.InvitationCode, nil
}

// ResetInvitationCode resets all changes to the "invitation_code" field.
func (m *ClassInvitationCodeMutation) ResetInvitationCode() {
	m.invitation_code = nil
}

// SetExpirationDate sets the "expiration_date" field.
func (m *ClassInvitationCodeMutation) SetExpirationDate(t time.Time) {
	m.expiration_date = &t
}

// ExpirationDate returns the value of the "expiration_date" field in the mutation.
func (m *ClassInvitationCodeMutation) ExpirationDate() (r time.Time, exists bool) {
	v := m.expiration_date
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationDate returns the old "expiration_date" field's value of the ClassInvitationCode entity.
// If the ClassInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassInvitationCodeMutation) OldExpirationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationDate: %w", err)
	}
	return oldValue.ExpirationDate, nil
}

// ResetExpirationDate resets all changes to the "expiration_date" field.
func (m *ClassInvitationCodeMutation) ResetExpirationDate() {
	m.expiration_date = nil
}

// SetIsActive sets the "is_active" field.
func (m *ClassInvitationCodeMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ClassInvitationCodeMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ClassInvitationCode entity.
// If the ClassInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassInvitationCodeMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ClassInvitationCodeMutation) ResetIsActive() {
	m.is_active = nil
}

// SetClassID sets the "class" edge to the Class entity by id.
func (m *ClassInvitationCodeMutation) SetClassID(id string) {
	m.class = &id
}

// ClearClass clears the "class" edge to the Class entity.
func (m *ClassInvitationCodeMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *ClassInvitationCodeMutation) ClassCleared() bool {
	return m.clearedclass
}

// ClassID returns the "class" edge ID in the mutation.
func (m *ClassInvitationCodeMutation) ClassID() (id string, exists bool) {
	if m.class != nil {
		return *m.class, true
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClassID instead. It exists only for internal usage by the builders.
func (m *ClassInvitationCodeMutation) ClassIDs() (ids []string) {
	if id := m.class; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *ClassInvitationCodeMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
}

// Where appends a list predicates to the ClassInvitationCodeMutation builder.
func (m *ClassInvitationCodeMutation) Where(ps ...predicate.ClassInvitationCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassInvitationCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassInvitationCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClassInvitationCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassInvitationCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassInvitationCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClassInvitationCode).
func (m *ClassInvitationCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassInvitationCodeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.invitation_code != nil {
		fields = append(fields, classinvitationcode.FieldInvitationCode)
	}
	if m.expiration_date != nil {
		fields = append(fields, classinvitationcode.FieldExpirationDate)
	}
	if m.is_active != nil {
		fields = append(fields, classinvitationcode.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassInvitationCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case classinvitationcode.FieldInvitationCode:
		return m.InvitationCode()
	case classinvitationcode.FieldExpirationDate:
		return m.ExpirationDate()
	case classinvitationcode.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassInvitationCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case classinvitationcode.FieldInvitationCode:
		return m.OldInvitationCode(ctx)
	case classinvitationcode.FieldExpirationDate:
		return m.OldExpirationDate(ctx)
	case classinvitationcode.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown ClassInvitationCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassInvitationCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case classinvitationcode.FieldInvitationCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationCode(v)
		return nil
	case classinvitationcode.FieldExpirationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationDate(v)
		return nil
	case classinvitationcode.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown ClassInvitationCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassInvitationCodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassInvitationCodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassInvitationCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClassInvitationCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassInvitationCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassInvitationCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassInvitationCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClassInvitationCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassInvitationCodeMutation) ResetField(name string) error {
	switch name {
	case classinvitationcode.FieldInvitationCode:
		m.ResetInvitationCode()
		return nil
	case classinvitationcode.FieldExpirationDate:
		m.ResetExpirationDate()
		return nil
	case classinvitationcode.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown ClassInvitationCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassInvitationCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.class != nil {
		edges = append(edges, classinvitationcode.EdgeClass)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassInvitationCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case classinvitationcode.EdgeClass:
		if id := m.class; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassInvitationCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassInvitationCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassInvitationCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclass {
		edges = append(edges, classinvitationcode.EdgeClass)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassInvitationCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case classinvitationcode.EdgeClass:
		return m.clearedclass
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassInvitationCodeMutation) ClearEdge(name string) error {
	switch name {
	case classinvitationcode.EdgeClass:
		m.ClearClass()
		return nil
	}
	return fmt.Errorf("unknown ClassInvitationCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassInvitationCodeMutation) ResetEdge(name string) error {
	switch name {
	case classinvitationcode.EdgeClass:
		m.ResetClass()
		return nil
	}
	return fmt.Errorf("unknown ClassInvitationCode edge %s", name)
}

// StudentClassMutation represents an operation that mutates the StudentClass nodes in the graph.
type StudentClassMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	class         *string
	clearedclass  bool
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*StudentClass, error)
	predicates    []predicate.StudentClass
}

var _ ent.Mutation = (*StudentClassMutation)(nil)

// studentclassOption allows management of the mutation configuration using functional options.
type studentclassOption func(*StudentClassMutation)

// newStudentClassMutation creates new mutation for the StudentClass entity.
func newStudentClassMutation(c config, op Op, opts ...studentclassOption) *StudentClassMutation {
	m := &StudentClassMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentClassID sets the ID field of the mutation.
func withStudentClassID(id int) studentclassOption {
	return func(m *StudentClassMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentClass
		)
		m.oldValue = func(ctx context.Context) (*StudentClass, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentClass.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentClass sets the old StudentClass of the mutation.
func withStudentClass(node *StudentClass) studentclassOption {
	return func(m *StudentClassMutation) {
		m.oldValue = func(context.Context) (*StudentClass, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentClass.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClassID sets the "class" edge to the Class entity by id.
func (m *StudentClassMutation) SetClassID(id string) {
	m.class = &id
}

// ClearClass clears the "class" edge to the Class entity.
func (m *StudentClassMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *StudentClassMutation) ClassCleared() bool {
	return m.clearedclass
}

// ClassID returns the "class" edge ID in the mutation.
func (m *StudentClassMutation) ClassID() (id string, exists bool) {
	if m.class != nil {
		return *m.class, true
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClassID instead. It exists only for internal usage by the builders.
func (m *StudentClassMutation) ClassIDs() (ids []string) {
	if id := m.class; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *StudentClassMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *StudentClassMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *StudentClassMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *StudentClassMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *StudentClassMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *StudentClassMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *StudentClassMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the StudentClassMutation builder.
func (m *StudentClassMutation) Where(ps ...predicate.StudentClass) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StudentClass, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StudentClass).
func (m *StudentClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentClassMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentClassMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown StudentClass field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentClass field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentClassMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentClassMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentClassMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown StudentClass numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentClass nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentClassMutation) ResetField(name string) error {
	return fmt.Errorf("unknown StudentClass field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.class != nil {
		edges = append(edges, studentclass.EdgeClass)
	}
	if m.user != nil {
		edges = append(edges, studentclass.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentClassMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentclass.EdgeClass:
		if id := m.class; id != nil {
			return []ent.Value{*id}
		}
	case studentclass.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentClassMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclass {
		edges = append(edges, studentclass.EdgeClass)
	}
	if m.cleareduser {
		edges = append(edges, studentclass.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentClassMutation) EdgeCleared(name string) bool {
	switch name {
	case studentclass.EdgeClass:
		return m.clearedclass
	case studentclass.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentClassMutation) ClearEdge(name string) error {
	switch name {
	case studentclass.EdgeClass:
		m.ClearClass()
		return nil
	case studentclass.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown StudentClass unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentClassMutation) ResetEdge(name string) error {
	switch name {
	case studentclass.EdgeClass:
		m.ResetClass()
		return nil
	case studentclass.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown StudentClass edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	name                   *string
	email                  *string
	_UserType              *user.UserType
	clearedFields          map[string]struct{}
	student_classes        map[int]struct{}
	removedstudent_classes map[int]struct{}
	clearedstudent_classes bool
	classes                map[string]struct{}
	removedclasses         map[string]struct{}
	clearedclasses         bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetUserType sets the "UserType" field.
func (m *UserMutation) SetUserType(ut user.UserType) {
	m._UserType = &ut
}

// UserType returns the value of the "UserType" field in the mutation.
func (m *UserMutation) UserType() (r user.UserType, exists bool) {
	v := m._UserType
	if v == nil {
		return
	}
	return *v, true
}

// OldUserType returns the old "UserType" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserType(ctx context.Context) (v user.UserType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserType: %w", err)
	}
	return oldValue.UserType, nil
}

// ResetUserType resets all changes to the "UserType" field.
func (m *UserMutation) ResetUserType() {
	m._UserType = nil
}

// AddStudentClassIDs adds the "student_classes" edge to the StudentClass entity by ids.
func (m *UserMutation) AddStudentClassIDs(ids ...int) {
	if m.student_classes == nil {
		m.student_classes = make(map[int]struct{})
	}
	for i := range ids {
		m.student_classes[ids[i]] = struct{}{}
	}
}

// ClearStudentClasses clears the "student_classes" edge to the StudentClass entity.
func (m *UserMutation) ClearStudentClasses() {
	m.clearedstudent_classes = true
}

// StudentClassesCleared reports if the "student_classes" edge to the StudentClass entity was cleared.
func (m *UserMutation) StudentClassesCleared() bool {
	return m.clearedstudent_classes
}

// RemoveStudentClassIDs removes the "student_classes" edge to the StudentClass entity by IDs.
func (m *UserMutation) RemoveStudentClassIDs(ids ...int) {
	if m.removedstudent_classes == nil {
		m.removedstudent_classes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.student_classes, ids[i])
		m.removedstudent_classes[ids[i]] = struct{}{}
	}
}

// RemovedStudentClasses returns the removed IDs of the "student_classes" edge to the StudentClass entity.
func (m *UserMutation) RemovedStudentClassesIDs() (ids []int) {
	for id := range m.removedstudent_classes {
		ids = append(ids, id)
	}
	return
}

// StudentClassesIDs returns the "student_classes" edge IDs in the mutation.
func (m *UserMutation) StudentClassesIDs() (ids []int) {
	for id := range m.student_classes {
		ids = append(ids, id)
	}
	return
}

// ResetStudentClasses resets all changes to the "student_classes" edge.
func (m *UserMutation) ResetStudentClasses() {
	m.student_classes = nil
	m.clearedstudent_classes = false
	m.removedstudent_classes = nil
}

// AddClassIDs adds the "classes" edge to the Class entity by ids.
func (m *UserMutation) AddClassIDs(ids ...string) {
	if m.classes == nil {
		m.classes = make(map[string]struct{})
	}
	for i := range ids {
		m.classes[ids[i]] = struct{}{}
	}
}

// ClearClasses clears the "classes" edge to the Class entity.
func (m *UserMutation) ClearClasses() {
	m.clearedclasses = true
}

// ClassesCleared reports if the "classes" edge to the Class entity was cleared.
func (m *UserMutation) ClassesCleared() bool {
	return m.clearedclasses
}

// RemoveClassIDs removes the "classes" edge to the Class entity by IDs.
func (m *UserMutation) RemoveClassIDs(ids ...string) {
	if m.removedclasses == nil {
		m.removedclasses = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.classes, ids[i])
		m.removedclasses[ids[i]] = struct{}{}
	}
}

// RemovedClasses returns the removed IDs of the "classes" edge to the Class entity.
func (m *UserMutation) RemovedClassesIDs() (ids []string) {
	for id := range m.removedclasses {
		ids = append(ids, id)
	}
	return
}

// ClassesIDs returns the "classes" edge IDs in the mutation.
func (m *UserMutation) ClassesIDs() (ids []string) {
	for id := range m.classes {
		ids = append(ids, id)
	}
	return
}

// ResetClasses resets all changes to the "classes" edge.
func (m *UserMutation) ResetClasses() {
	m.classes = nil
	m.clearedclasses = false
	m.removedclasses = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._UserType != nil {
		fields = append(fields, user.FieldUserType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldUserType:
		return m.UserType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUserType:
		return m.OldUserType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUserType:
		v, ok := value.(user.UserType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUserType:
		m.ResetUserType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.student_classes != nil {
		edges = append(edges, user.EdgeStudentClasses)
	}
	if m.classes != nil {
		edges = append(edges, user.EdgeClasses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStudentClasses:
		ids := make([]ent.Value, 0, len(m.student_classes))
		for id := range m.student_classes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.classes))
		for id := range m.classes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstudent_classes != nil {
		edges = append(edges, user.EdgeStudentClasses)
	}
	if m.removedclasses != nil {
		edges = append(edges, user.EdgeClasses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStudentClasses:
		ids := make([]ent.Value, 0, len(m.removedstudent_classes))
		for id := range m.removedstudent_classes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.removedclasses))
		for id := range m.removedclasses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudent_classes {
		edges = append(edges, user.EdgeStudentClasses)
	}
	if m.clearedclasses {
		edges = append(edges, user.EdgeClasses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeStudentClasses:
		return m.clearedstudent_classes
	case user.EdgeClasses:
		return m.clearedclasses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeStudentClasses:
		m.ResetStudentClasses()
		return nil
	case user.EdgeClasses:
		m.ResetClasses()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
