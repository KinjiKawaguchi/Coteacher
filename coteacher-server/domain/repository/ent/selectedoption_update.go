// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/answer"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/questionoption"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/selectedoption"
	"github.com/google/uuid"
)

// SelectedOptionUpdate is the builder for updating SelectedOption entities.
type SelectedOptionUpdate struct {
	config
	hooks    []Hook
	mutation *SelectedOptionMutation
}

// Where appends a list predicates to the SelectedOptionUpdate builder.
func (sou *SelectedOptionUpdate) Where(ps ...predicate.SelectedOption) *SelectedOptionUpdate {
	sou.mutation.Where(ps...)
	return sou
}

// SetOptionID sets the "option_id" field.
func (sou *SelectedOptionUpdate) SetOptionID(u uuid.UUID) *SelectedOptionUpdate {
	sou.mutation.SetOptionID(u)
	return sou
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (sou *SelectedOptionUpdate) SetNillableOptionID(u *uuid.UUID) *SelectedOptionUpdate {
	if u != nil {
		sou.SetOptionID(*u)
	}
	return sou
}

// SetAnswerID sets the "answer_id" field.
func (sou *SelectedOptionUpdate) SetAnswerID(u uuid.UUID) *SelectedOptionUpdate {
	sou.mutation.SetAnswerID(u)
	return sou
}

// SetNillableAnswerID sets the "answer_id" field if the given value is not nil.
func (sou *SelectedOptionUpdate) SetNillableAnswerID(u *uuid.UUID) *SelectedOptionUpdate {
	if u != nil {
		sou.SetAnswerID(*u)
	}
	return sou
}

// SetAnswer sets the "answer" edge to the Answer entity.
func (sou *SelectedOptionUpdate) SetAnswer(a *Answer) *SelectedOptionUpdate {
	return sou.SetAnswerID(a.ID)
}

// SetOption sets the "option" edge to the QuestionOption entity.
func (sou *SelectedOptionUpdate) SetOption(q *QuestionOption) *SelectedOptionUpdate {
	return sou.SetOptionID(q.ID)
}

// Mutation returns the SelectedOptionMutation object of the builder.
func (sou *SelectedOptionUpdate) Mutation() *SelectedOptionMutation {
	return sou.mutation
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (sou *SelectedOptionUpdate) ClearAnswer() *SelectedOptionUpdate {
	sou.mutation.ClearAnswer()
	return sou
}

// ClearOption clears the "option" edge to the QuestionOption entity.
func (sou *SelectedOptionUpdate) ClearOption() *SelectedOptionUpdate {
	sou.mutation.ClearOption()
	return sou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SelectedOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sou.sqlSave, sou.mutation, sou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SelectedOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SelectedOptionUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SelectedOptionUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sou *SelectedOptionUpdate) check() error {
	if _, ok := sou.mutation.AnswerID(); sou.mutation.AnswerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SelectedOption.answer"`)
	}
	if _, ok := sou.mutation.OptionID(); sou.mutation.OptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SelectedOption.option"`)
	}
	return nil
}

func (sou *SelectedOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectedoption.Table, selectedoption.Columns, sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt))
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sou.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.AnswerTable,
			Columns: []string{selectedoption.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.AnswerTable,
			Columns: []string{selectedoption.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sou.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.OptionTable,
			Columns: []string{selectedoption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.OptionTable,
			Columns: []string{selectedoption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectedoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sou.mutation.done = true
	return n, nil
}

// SelectedOptionUpdateOne is the builder for updating a single SelectedOption entity.
type SelectedOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SelectedOptionMutation
}

// SetOptionID sets the "option_id" field.
func (souo *SelectedOptionUpdateOne) SetOptionID(u uuid.UUID) *SelectedOptionUpdateOne {
	souo.mutation.SetOptionID(u)
	return souo
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (souo *SelectedOptionUpdateOne) SetNillableOptionID(u *uuid.UUID) *SelectedOptionUpdateOne {
	if u != nil {
		souo.SetOptionID(*u)
	}
	return souo
}

// SetAnswerID sets the "answer_id" field.
func (souo *SelectedOptionUpdateOne) SetAnswerID(u uuid.UUID) *SelectedOptionUpdateOne {
	souo.mutation.SetAnswerID(u)
	return souo
}

// SetNillableAnswerID sets the "answer_id" field if the given value is not nil.
func (souo *SelectedOptionUpdateOne) SetNillableAnswerID(u *uuid.UUID) *SelectedOptionUpdateOne {
	if u != nil {
		souo.SetAnswerID(*u)
	}
	return souo
}

// SetAnswer sets the "answer" edge to the Answer entity.
func (souo *SelectedOptionUpdateOne) SetAnswer(a *Answer) *SelectedOptionUpdateOne {
	return souo.SetAnswerID(a.ID)
}

// SetOption sets the "option" edge to the QuestionOption entity.
func (souo *SelectedOptionUpdateOne) SetOption(q *QuestionOption) *SelectedOptionUpdateOne {
	return souo.SetOptionID(q.ID)
}

// Mutation returns the SelectedOptionMutation object of the builder.
func (souo *SelectedOptionUpdateOne) Mutation() *SelectedOptionMutation {
	return souo.mutation
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (souo *SelectedOptionUpdateOne) ClearAnswer() *SelectedOptionUpdateOne {
	souo.mutation.ClearAnswer()
	return souo
}

// ClearOption clears the "option" edge to the QuestionOption entity.
func (souo *SelectedOptionUpdateOne) ClearOption() *SelectedOptionUpdateOne {
	souo.mutation.ClearOption()
	return souo
}

// Where appends a list predicates to the SelectedOptionUpdate builder.
func (souo *SelectedOptionUpdateOne) Where(ps ...predicate.SelectedOption) *SelectedOptionUpdateOne {
	souo.mutation.Where(ps...)
	return souo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SelectedOptionUpdateOne) Select(field string, fields ...string) *SelectedOptionUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SelectedOption entity.
func (souo *SelectedOptionUpdateOne) Save(ctx context.Context) (*SelectedOption, error) {
	return withHooks(ctx, souo.sqlSave, souo.mutation, souo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SelectedOptionUpdateOne) SaveX(ctx context.Context) *SelectedOption {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SelectedOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SelectedOptionUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (souo *SelectedOptionUpdateOne) check() error {
	if _, ok := souo.mutation.AnswerID(); souo.mutation.AnswerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SelectedOption.answer"`)
	}
	if _, ok := souo.mutation.OptionID(); souo.mutation.OptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SelectedOption.option"`)
	}
	return nil
}

func (souo *SelectedOptionUpdateOne) sqlSave(ctx context.Context) (_node *SelectedOption, err error) {
	if err := souo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectedoption.Table, selectedoption.Columns, sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt))
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SelectedOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, selectedoption.FieldID)
		for _, f := range fields {
			if !selectedoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != selectedoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if souo.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.AnswerTable,
			Columns: []string{selectedoption.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.AnswerTable,
			Columns: []string{selectedoption.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if souo.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.OptionTable,
			Columns: []string{selectedoption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectedoption.OptionTable,
			Columns: []string{selectedoption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SelectedOption{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectedoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	souo.mutation.done = true
	return _node, nil
}
