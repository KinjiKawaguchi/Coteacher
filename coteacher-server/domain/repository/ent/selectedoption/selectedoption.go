// Code generated by ent, DO NOT EDIT.

package selectedoption

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the selectedoption type in the database.
	Label = "selected_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOptionID holds the string denoting the option_id field in the database.
	FieldOptionID = "option_id"
	// FieldAnswerID holds the string denoting the answer_id field in the database.
	FieldAnswerID = "answer_id"
	// EdgeAnswer holds the string denoting the answer edge name in mutations.
	EdgeAnswer = "answer"
	// EdgeOption holds the string denoting the option edge name in mutations.
	EdgeOption = "option"
	// Table holds the table name of the selectedoption in the database.
	Table = "selected_options"
	// AnswerTable is the table that holds the answer relation/edge.
	AnswerTable = "selected_options"
	// AnswerInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswerInverseTable = "answers"
	// AnswerColumn is the table column denoting the answer relation/edge.
	AnswerColumn = "answer_id"
	// OptionTable is the table that holds the option relation/edge.
	OptionTable = "selected_options"
	// OptionInverseTable is the table name for the QuestionOption entity.
	// It exists in this package in order to avoid circular dependency with the "questionoption" package.
	OptionInverseTable = "question_options"
	// OptionColumn is the table column denoting the option relation/edge.
	OptionColumn = "option_id"
)

// Columns holds all SQL columns for selectedoption fields.
var Columns = []string{
	FieldID,
	FieldOptionID,
	FieldAnswerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SelectedOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOptionID orders the results by the option_id field.
func ByOptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionID, opts...).ToFunc()
}

// ByAnswerID orders the results by the answer_id field.
func ByAnswerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerID, opts...).ToFunc()
}

// ByAnswerField orders the results by answer field.
func ByAnswerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerStep(), sql.OrderByField(field, opts...))
	}
}

// ByOptionField orders the results by option field.
func ByOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOptionStep(), sql.OrderByField(field, opts...))
	}
}
func newAnswerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AnswerTable, AnswerColumn),
	)
}
func newOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OptionTable, OptionColumn),
	)
}
