// Code generated by ent, DO NOT EDIT.

package selectedoption

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldLTE(FieldID, id))
}

// OptionID applies equality check predicate on the "option_id" field. It's identical to OptionIDEQ.
func OptionID(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldOptionID, v))
}

// AnswerID applies equality check predicate on the "answer_id" field. It's identical to AnswerIDEQ.
func AnswerID(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldAnswerID, v))
}

// OptionIDEQ applies the EQ predicate on the "option_id" field.
func OptionIDEQ(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldOptionID, v))
}

// OptionIDNEQ applies the NEQ predicate on the "option_id" field.
func OptionIDNEQ(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNEQ(FieldOptionID, v))
}

// OptionIDIn applies the In predicate on the "option_id" field.
func OptionIDIn(vs ...uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldIn(FieldOptionID, vs...))
}

// OptionIDNotIn applies the NotIn predicate on the "option_id" field.
func OptionIDNotIn(vs ...uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNotIn(FieldOptionID, vs...))
}

// AnswerIDEQ applies the EQ predicate on the "answer_id" field.
func AnswerIDEQ(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldEQ(FieldAnswerID, v))
}

// AnswerIDNEQ applies the NEQ predicate on the "answer_id" field.
func AnswerIDNEQ(v uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNEQ(FieldAnswerID, v))
}

// AnswerIDIn applies the In predicate on the "answer_id" field.
func AnswerIDIn(vs ...uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldIn(FieldAnswerID, vs...))
}

// AnswerIDNotIn applies the NotIn predicate on the "answer_id" field.
func AnswerIDNotIn(vs ...uuid.UUID) predicate.SelectedOption {
	return predicate.SelectedOption(sql.FieldNotIn(FieldAnswerID, vs...))
}

// HasAnswer applies the HasEdge predicate on the "answer" edge.
func HasAnswer() predicate.SelectedOption {
	return predicate.SelectedOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerWith applies the HasEdge predicate on the "answer" edge with a given conditions (other predicates).
func HasAnswerWith(preds ...predicate.Answer) predicate.SelectedOption {
	return predicate.SelectedOption(func(s *sql.Selector) {
		step := newAnswerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOption applies the HasEdge predicate on the "option" edge.
func HasOption() predicate.SelectedOption {
	return predicate.SelectedOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OptionTable, OptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionWith applies the HasEdge predicate on the "option" edge with a given conditions (other predicates).
func HasOptionWith(preds ...predicate.QuestionOption) predicate.SelectedOption {
	return predicate.SelectedOption(func(s *sql.Selector) {
		step := newOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SelectedOption) predicate.SelectedOption {
	return predicate.SelectedOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SelectedOption) predicate.SelectedOption {
	return predicate.SelectedOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SelectedOption) predicate.SelectedOption {
	return predicate.SelectedOption(sql.NotPredicates(p))
}
