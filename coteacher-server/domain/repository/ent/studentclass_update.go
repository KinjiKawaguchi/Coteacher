// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coteacher/domain/repository/ent/class"
	"coteacher/domain/repository/ent/predicate"
	"coteacher/domain/repository/ent/student"
	"coteacher/domain/repository/ent/studentclass"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StudentClassUpdate is the builder for updating StudentClass entities.
type StudentClassUpdate struct {
	config
	hooks    []Hook
	mutation *StudentClassMutation
}

// Where appends a list predicates to the StudentClassUpdate builder.
func (scu *StudentClassUpdate) Where(ps ...predicate.StudentClass) *StudentClassUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetStudentID sets the "student_id" field.
func (scu *StudentClassUpdate) SetStudentID(u uuid.UUID) *StudentClassUpdate {
	scu.mutation.SetStudentID(u)
	return scu
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (scu *StudentClassUpdate) SetNillableStudentID(u *uuid.UUID) *StudentClassUpdate {
	if u != nil {
		scu.SetStudentID(*u)
	}
	return scu
}

// SetClassID sets the "class_id" field.
func (scu *StudentClassUpdate) SetClassID(u uuid.UUID) *StudentClassUpdate {
	scu.mutation.SetClassID(u)
	return scu
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (scu *StudentClassUpdate) SetNillableClassID(u *uuid.UUID) *StudentClassUpdate {
	if u != nil {
		scu.SetClassID(*u)
	}
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *StudentClassUpdate) SetCreatedAt(t time.Time) *StudentClassUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *StudentClassUpdate) SetNillableCreatedAt(t *time.Time) *StudentClassUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *StudentClassUpdate) SetUpdatedAt(t time.Time) *StudentClassUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scu *StudentClassUpdate) SetNillableUpdatedAt(t *time.Time) *StudentClassUpdate {
	if t != nil {
		scu.SetUpdatedAt(*t)
	}
	return scu
}

// SetStudent sets the "student" edge to the Student entity.
func (scu *StudentClassUpdate) SetStudent(s *Student) *StudentClassUpdate {
	return scu.SetStudentID(s.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (scu *StudentClassUpdate) SetClass(c *Class) *StudentClassUpdate {
	return scu.SetClassID(c.ID)
}

// Mutation returns the StudentClassMutation object of the builder.
func (scu *StudentClassUpdate) Mutation() *StudentClassMutation {
	return scu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (scu *StudentClassUpdate) ClearStudent() *StudentClassUpdate {
	scu.mutation.ClearStudent()
	return scu
}

// ClearClass clears the "class" edge to the Class entity.
func (scu *StudentClassUpdate) ClearClass() *StudentClassUpdate {
	scu.mutation.ClearClass()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *StudentClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *StudentClassUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *StudentClassUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *StudentClassUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *StudentClassUpdate) check() error {
	if _, ok := scu.mutation.StudentID(); scu.mutation.StudentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentClass.student"`)
	}
	if _, ok := scu.mutation.ClassID(); scu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentClass.class"`)
	}
	return nil
}

func (scu *StudentClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(studentclass.Table, studentclass.Columns, sqlgraph.NewFieldSpec(studentclass.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(studentclass.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(studentclass.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.StudentTable,
			Columns: []string{studentclass.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.StudentTable,
			Columns: []string{studentclass.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.ClassTable,
			Columns: []string{studentclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.ClassTable,
			Columns: []string{studentclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// StudentClassUpdateOne is the builder for updating a single StudentClass entity.
type StudentClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentClassMutation
}

// SetStudentID sets the "student_id" field.
func (scuo *StudentClassUpdateOne) SetStudentID(u uuid.UUID) *StudentClassUpdateOne {
	scuo.mutation.SetStudentID(u)
	return scuo
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (scuo *StudentClassUpdateOne) SetNillableStudentID(u *uuid.UUID) *StudentClassUpdateOne {
	if u != nil {
		scuo.SetStudentID(*u)
	}
	return scuo
}

// SetClassID sets the "class_id" field.
func (scuo *StudentClassUpdateOne) SetClassID(u uuid.UUID) *StudentClassUpdateOne {
	scuo.mutation.SetClassID(u)
	return scuo
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (scuo *StudentClassUpdateOne) SetNillableClassID(u *uuid.UUID) *StudentClassUpdateOne {
	if u != nil {
		scuo.SetClassID(*u)
	}
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *StudentClassUpdateOne) SetCreatedAt(t time.Time) *StudentClassUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *StudentClassUpdateOne) SetNillableCreatedAt(t *time.Time) *StudentClassUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *StudentClassUpdateOne) SetUpdatedAt(t time.Time) *StudentClassUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scuo *StudentClassUpdateOne) SetNillableUpdatedAt(t *time.Time) *StudentClassUpdateOne {
	if t != nil {
		scuo.SetUpdatedAt(*t)
	}
	return scuo
}

// SetStudent sets the "student" edge to the Student entity.
func (scuo *StudentClassUpdateOne) SetStudent(s *Student) *StudentClassUpdateOne {
	return scuo.SetStudentID(s.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (scuo *StudentClassUpdateOne) SetClass(c *Class) *StudentClassUpdateOne {
	return scuo.SetClassID(c.ID)
}

// Mutation returns the StudentClassMutation object of the builder.
func (scuo *StudentClassUpdateOne) Mutation() *StudentClassMutation {
	return scuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (scuo *StudentClassUpdateOne) ClearStudent() *StudentClassUpdateOne {
	scuo.mutation.ClearStudent()
	return scuo
}

// ClearClass clears the "class" edge to the Class entity.
func (scuo *StudentClassUpdateOne) ClearClass() *StudentClassUpdateOne {
	scuo.mutation.ClearClass()
	return scuo
}

// Where appends a list predicates to the StudentClassUpdate builder.
func (scuo *StudentClassUpdateOne) Where(ps ...predicate.StudentClass) *StudentClassUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *StudentClassUpdateOne) Select(field string, fields ...string) *StudentClassUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated StudentClass entity.
func (scuo *StudentClassUpdateOne) Save(ctx context.Context) (*StudentClass, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *StudentClassUpdateOne) SaveX(ctx context.Context) *StudentClass {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *StudentClassUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *StudentClassUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *StudentClassUpdateOne) check() error {
	if _, ok := scuo.mutation.StudentID(); scuo.mutation.StudentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentClass.student"`)
	}
	if _, ok := scuo.mutation.ClassID(); scuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentClass.class"`)
	}
	return nil
}

func (scuo *StudentClassUpdateOne) sqlSave(ctx context.Context) (_node *StudentClass, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(studentclass.Table, studentclass.Columns, sqlgraph.NewFieldSpec(studentclass.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudentClass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studentclass.FieldID)
		for _, f := range fields {
			if !studentclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studentclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(studentclass.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(studentclass.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.StudentTable,
			Columns: []string{studentclass.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.StudentTable,
			Columns: []string{studentclass.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.ClassTable,
			Columns: []string{studentclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentclass.ClassTable,
			Columns: []string{studentclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StudentClass{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
