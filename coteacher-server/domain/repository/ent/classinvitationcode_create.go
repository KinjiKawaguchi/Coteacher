// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coteacher/domain/repository/ent/class"
	"coteacher/domain/repository/ent/classinvitationcode"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ClassInvitationCodeCreate is the builder for creating a ClassInvitationCode entity.
type ClassInvitationCodeCreate struct {
	config
	mutation *ClassInvitationCodeMutation
	hooks    []Hook
}

// SetClassID sets the "class_id" field.
func (cicc *ClassInvitationCodeCreate) SetClassID(u uuid.UUID) *ClassInvitationCodeCreate {
	cicc.mutation.SetClassID(u)
	return cicc
}

// SetInvitationCode sets the "invitation_code" field.
func (cicc *ClassInvitationCodeCreate) SetInvitationCode(s string) *ClassInvitationCodeCreate {
	cicc.mutation.SetInvitationCode(s)
	return cicc
}

// SetExpirationDate sets the "expiration_date" field.
func (cicc *ClassInvitationCodeCreate) SetExpirationDate(t time.Time) *ClassInvitationCodeCreate {
	cicc.mutation.SetExpirationDate(t)
	return cicc
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (cicc *ClassInvitationCodeCreate) SetNillableExpirationDate(t *time.Time) *ClassInvitationCodeCreate {
	if t != nil {
		cicc.SetExpirationDate(*t)
	}
	return cicc
}

// SetIsActive sets the "is_active" field.
func (cicc *ClassInvitationCodeCreate) SetIsActive(b bool) *ClassInvitationCodeCreate {
	cicc.mutation.SetIsActive(b)
	return cicc
}

// SetCreatedAt sets the "created_at" field.
func (cicc *ClassInvitationCodeCreate) SetCreatedAt(t time.Time) *ClassInvitationCodeCreate {
	cicc.mutation.SetCreatedAt(t)
	return cicc
}

// SetUpdatedAt sets the "updated_at" field.
func (cicc *ClassInvitationCodeCreate) SetUpdatedAt(t time.Time) *ClassInvitationCodeCreate {
	cicc.mutation.SetUpdatedAt(t)
	return cicc
}

// SetID sets the "id" field.
func (cicc *ClassInvitationCodeCreate) SetID(u uuid.UUID) *ClassInvitationCodeCreate {
	cicc.mutation.SetID(u)
	return cicc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cicc *ClassInvitationCodeCreate) SetNillableID(u *uuid.UUID) *ClassInvitationCodeCreate {
	if u != nil {
		cicc.SetID(*u)
	}
	return cicc
}

// SetClass sets the "class" edge to the Class entity.
func (cicc *ClassInvitationCodeCreate) SetClass(c *Class) *ClassInvitationCodeCreate {
	return cicc.SetClassID(c.ID)
}

// Mutation returns the ClassInvitationCodeMutation object of the builder.
func (cicc *ClassInvitationCodeCreate) Mutation() *ClassInvitationCodeMutation {
	return cicc.mutation
}

// Save creates the ClassInvitationCode in the database.
func (cicc *ClassInvitationCodeCreate) Save(ctx context.Context) (*ClassInvitationCode, error) {
	cicc.defaults()
	return withHooks(ctx, cicc.sqlSave, cicc.mutation, cicc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cicc *ClassInvitationCodeCreate) SaveX(ctx context.Context) *ClassInvitationCode {
	v, err := cicc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicc *ClassInvitationCodeCreate) Exec(ctx context.Context) error {
	_, err := cicc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicc *ClassInvitationCodeCreate) ExecX(ctx context.Context) {
	if err := cicc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cicc *ClassInvitationCodeCreate) defaults() {
	if _, ok := cicc.mutation.ID(); !ok {
		v := classinvitationcode.DefaultID()
		cicc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cicc *ClassInvitationCodeCreate) check() error {
	if _, ok := cicc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class_id", err: errors.New(`ent: missing required field "ClassInvitationCode.class_id"`)}
	}
	if _, ok := cicc.mutation.InvitationCode(); !ok {
		return &ValidationError{Name: "invitation_code", err: errors.New(`ent: missing required field "ClassInvitationCode.invitation_code"`)}
	}
	if v, ok := cicc.mutation.InvitationCode(); ok {
		if err := classinvitationcode.InvitationCodeValidator(v); err != nil {
			return &ValidationError{Name: "invitation_code", err: fmt.Errorf(`ent: validator failed for field "ClassInvitationCode.invitation_code": %w`, err)}
		}
	}
	if _, ok := cicc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ClassInvitationCode.is_active"`)}
	}
	if _, ok := cicc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ClassInvitationCode.created_at"`)}
	}
	if _, ok := cicc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ClassInvitationCode.updated_at"`)}
	}
	if _, ok := cicc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required edge "ClassInvitationCode.class"`)}
	}
	return nil
}

func (cicc *ClassInvitationCodeCreate) sqlSave(ctx context.Context) (*ClassInvitationCode, error) {
	if err := cicc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cicc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cicc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cicc.mutation.id = &_node.ID
	cicc.mutation.done = true
	return _node, nil
}

func (cicc *ClassInvitationCodeCreate) createSpec() (*ClassInvitationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &ClassInvitationCode{config: cicc.config}
		_spec = sqlgraph.NewCreateSpec(classinvitationcode.Table, sqlgraph.NewFieldSpec(classinvitationcode.FieldID, field.TypeUUID))
	)
	if id, ok := cicc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cicc.mutation.InvitationCode(); ok {
		_spec.SetField(classinvitationcode.FieldInvitationCode, field.TypeString, value)
		_node.InvitationCode = value
	}
	if value, ok := cicc.mutation.ExpirationDate(); ok {
		_spec.SetField(classinvitationcode.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if value, ok := cicc.mutation.IsActive(); ok {
		_spec.SetField(classinvitationcode.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cicc.mutation.CreatedAt(); ok {
		_spec.SetField(classinvitationcode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cicc.mutation.UpdatedAt(); ok {
		_spec.SetField(classinvitationcode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cicc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classinvitationcode.ClassTable,
			Columns: []string{classinvitationcode.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassInvitationCodeCreateBulk is the builder for creating many ClassInvitationCode entities in bulk.
type ClassInvitationCodeCreateBulk struct {
	config
	err      error
	builders []*ClassInvitationCodeCreate
}

// Save creates the ClassInvitationCode entities in the database.
func (ciccb *ClassInvitationCodeCreateBulk) Save(ctx context.Context) ([]*ClassInvitationCode, error) {
	if ciccb.err != nil {
		return nil, ciccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ciccb.builders))
	nodes := make([]*ClassInvitationCode, len(ciccb.builders))
	mutators := make([]Mutator, len(ciccb.builders))
	for i := range ciccb.builders {
		func(i int, root context.Context) {
			builder := ciccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassInvitationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ciccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ciccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ciccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ciccb *ClassInvitationCodeCreateBulk) SaveX(ctx context.Context) []*ClassInvitationCode {
	v, err := ciccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ciccb *ClassInvitationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ciccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciccb *ClassInvitationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := ciccb.Exec(ctx); err != nil {
		panic(err)
	}
}
