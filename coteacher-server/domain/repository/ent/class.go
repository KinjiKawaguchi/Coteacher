// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coteacher/domain/repository/ent/class"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Class is the model entity for the Class schema.
type Class struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassQuery when eager-loading is set.
	Edges        ClassEdges `json:"edges"`
	user_classes *string
	selectValues sql.SelectValues
}

// ClassEdges holds the relations/edges for other nodes in the graph.
type ClassEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// ClassInvitationCodes holds the value of the class_invitation_codes edge.
	ClassInvitationCodes []*ClassInvitationCode `json:"class_invitation_codes,omitempty"`
	// StudentClasses holds the value of the student_classes edge.
	StudentClasses []*StudentClass `json:"student_classes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ClassInvitationCodesOrErr returns the ClassInvitationCodes value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) ClassInvitationCodesOrErr() ([]*ClassInvitationCode, error) {
	if e.loadedTypes[1] {
		return e.ClassInvitationCodes, nil
	}
	return nil, &NotLoadedError{edge: "class_invitation_codes"}
}

// StudentClassesOrErr returns the StudentClasses value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) StudentClassesOrErr() ([]*StudentClass, error) {
	if e.loadedTypes[2] {
		return e.StudentClasses, nil
	}
	return nil, &NotLoadedError{edge: "student_classes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class.FieldID, class.FieldName:
			values[i] = new(sql.NullString)
		case class.ForeignKeys[0]: // user_classes
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class fields.
func (c *Class) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case class.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case class.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_classes", values[i])
			} else if value.Valid {
				c.user_classes = new(string)
				*c.user_classes = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Class.
// This includes values selected through modifiers, order, etc.
func (c *Class) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Class entity.
func (c *Class) QueryUsers() *UserQuery {
	return NewClassClient(c.config).QueryUsers(c)
}

// QueryClassInvitationCodes queries the "class_invitation_codes" edge of the Class entity.
func (c *Class) QueryClassInvitationCodes() *ClassInvitationCodeQuery {
	return NewClassClient(c.config).QueryClassInvitationCodes(c)
}

// QueryStudentClasses queries the "student_classes" edge of the Class entity.
func (c *Class) QueryStudentClasses() *StudentClassQuery {
	return NewClassClient(c.config).QueryStudentClasses(c)
}

// Update returns a builder for updating this Class.
// Note that you need to call Class.Unwrap() before calling this method if this Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Class) Update() *ClassUpdateOne {
	return NewClassClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Class) Unwrap() *Class {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Class) String() string {
	var builder strings.Builder
	builder.WriteString("Class(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Classes is a parsable slice of Class.
type Classes []*Class
