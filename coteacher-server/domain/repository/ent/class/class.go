// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeClassInvitationCodes holds the string denoting the class_invitation_codes edge name in mutations.
	EdgeClassInvitationCodes = "class_invitation_codes"
	// EdgeStudentClasses holds the string denoting the student_classes edge name in mutations.
	EdgeStudentClasses = "student_classes"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "class_users"
	// ClassInvitationCodesTable is the table that holds the class_invitation_codes relation/edge.
	ClassInvitationCodesTable = "class_invitation_codes"
	// ClassInvitationCodesInverseTable is the table name for the ClassInvitationCode entity.
	// It exists in this package in order to avoid circular dependency with the "classinvitationcode" package.
	ClassInvitationCodesInverseTable = "class_invitation_codes"
	// ClassInvitationCodesColumn is the table column denoting the class_invitation_codes relation/edge.
	ClassInvitationCodesColumn = "class_class_invitation_codes"
	// StudentClassesTable is the table that holds the student_classes relation/edge.
	StudentClassesTable = "student_classes"
	// StudentClassesInverseTable is the table name for the StudentClass entity.
	// It exists in this package in order to avoid circular dependency with the "studentclass" package.
	StudentClassesInverseTable = "student_classes"
	// StudentClassesColumn is the table column denoting the student_classes relation/edge.
	StudentClassesColumn = "class_student_classes"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_classes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Class queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClassInvitationCodesCount orders the results by class_invitation_codes count.
func ByClassInvitationCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassInvitationCodesStep(), opts...)
	}
}

// ByClassInvitationCodes orders the results by class_invitation_codes terms.
func ByClassInvitationCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassInvitationCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStudentClassesCount orders the results by student_classes count.
func ByStudentClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStudentClassesStep(), opts...)
	}
}

// ByStudentClasses orders the results by student_classes terms.
func ByStudentClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newClassInvitationCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInvitationCodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassInvitationCodesTable, ClassInvitationCodesColumn),
	)
}
func newStudentClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StudentClassesTable, StudentClassesColumn),
	)
}
