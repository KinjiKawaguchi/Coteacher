// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTeacherID holds the string denoting the teacher_id field in the database.
	FieldTeacherID = "teacher_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// EdgeClassStudents holds the string denoting the classstudents edge name in mutations.
	EdgeClassStudents = "classStudents"
	// EdgeInvitationCodes holds the string denoting the invitationcodes edge name in mutations.
	EdgeInvitationCodes = "invitationCodes"
	// EdgeForms holds the string denoting the forms edge name in mutations.
	EdgeForms = "forms"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// TeacherTable is the table that holds the teacher relation/edge.
	TeacherTable = "classes"
	// TeacherInverseTable is the table name for the Teacher entity.
	// It exists in this package in order to avoid circular dependency with the "teacher" package.
	TeacherInverseTable = "teachers"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "teacher_id"
	// ClassStudentsTable is the table that holds the classStudents relation/edge.
	ClassStudentsTable = "student_classes"
	// ClassStudentsInverseTable is the table name for the StudentClass entity.
	// It exists in this package in order to avoid circular dependency with the "studentclass" package.
	ClassStudentsInverseTable = "student_classes"
	// ClassStudentsColumn is the table column denoting the classStudents relation/edge.
	ClassStudentsColumn = "class_id"
	// InvitationCodesTable is the table that holds the invitationCodes relation/edge.
	InvitationCodesTable = "class_invitation_codes"
	// InvitationCodesInverseTable is the table name for the ClassInvitationCode entity.
	// It exists in this package in order to avoid circular dependency with the "classinvitationcode" package.
	InvitationCodesInverseTable = "class_invitation_codes"
	// InvitationCodesColumn is the table column denoting the invitationCodes relation/edge.
	InvitationCodesColumn = "class_id"
	// FormsTable is the table that holds the forms relation/edge.
	FormsTable = "forms"
	// FormsInverseTable is the table name for the Form entity.
	// It exists in this package in order to avoid circular dependency with the "form" package.
	FormsInverseTable = "forms"
	// FormsColumn is the table column denoting the forms relation/edge.
	FormsColumn = "class_id"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTeacherID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Class queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTeacherID orders the results by the teacher_id field.
func ByTeacherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeacherID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTeacherField orders the results by teacher field.
func ByTeacherField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeacherStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassStudentsCount orders the results by classStudents count.
func ByClassStudentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassStudentsStep(), opts...)
	}
}

// ByClassStudents orders the results by classStudents terms.
func ByClassStudents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStudentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitationCodesCount orders the results by invitationCodes count.
func ByInvitationCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitationCodesStep(), opts...)
	}
}

// ByInvitationCodes orders the results by invitationCodes terms.
func ByInvitationCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitationCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFormsCount orders the results by forms count.
func ByFormsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFormsStep(), opts...)
	}
}

// ByForms orders the results by forms terms.
func ByForms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeacherStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeacherInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
	)
}
func newClassStudentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassStudentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassStudentsTable, ClassStudentsColumn),
	)
}
func newInvitationCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitationCodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvitationCodesTable, InvitationCodesColumn),
	)
}
func newFormsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FormsTable, FormsColumn),
	)
}
