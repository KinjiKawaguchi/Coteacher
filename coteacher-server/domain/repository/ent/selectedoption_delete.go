// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/selectedoption"
)

// SelectedOptionDelete is the builder for deleting a SelectedOption entity.
type SelectedOptionDelete struct {
	config
	hooks    []Hook
	mutation *SelectedOptionMutation
}

// Where appends a list predicates to the SelectedOptionDelete builder.
func (sod *SelectedOptionDelete) Where(ps ...predicate.SelectedOption) *SelectedOptionDelete {
	sod.mutation.Where(ps...)
	return sod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sod *SelectedOptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sod.sqlExec, sod.mutation, sod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sod *SelectedOptionDelete) ExecX(ctx context.Context) int {
	n, err := sod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sod *SelectedOptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(selectedoption.Table, sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt))
	if ps := sod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sod.mutation.done = true
	return affected, err
}

// SelectedOptionDeleteOne is the builder for deleting a single SelectedOption entity.
type SelectedOptionDeleteOne struct {
	sod *SelectedOptionDelete
}

// Where appends a list predicates to the SelectedOptionDelete builder.
func (sodo *SelectedOptionDeleteOne) Where(ps ...predicate.SelectedOption) *SelectedOptionDeleteOne {
	sodo.sod.mutation.Where(ps...)
	return sodo
}

// Exec executes the deletion query.
func (sodo *SelectedOptionDeleteOne) Exec(ctx context.Context) error {
	n, err := sodo.sod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{selectedoption.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sodo *SelectedOptionDeleteOne) ExecX(ctx context.Context) {
	if err := sodo.Exec(ctx); err != nil {
		panic(err)
	}
}
