// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/question"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/questionoption"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/selectedoption"
	"github.com/google/uuid"
)

// QuestionOptionCreate is the builder for creating a QuestionOption entity.
type QuestionOptionCreate struct {
	config
	mutation *QuestionOptionMutation
	hooks    []Hook
}

// SetQuestionID sets the "question_id" field.
func (qoc *QuestionOptionCreate) SetQuestionID(u uuid.UUID) *QuestionOptionCreate {
	qoc.mutation.SetQuestionID(u)
	return qoc
}

// SetOptionText sets the "option_text" field.
func (qoc *QuestionOptionCreate) SetOptionText(s string) *QuestionOptionCreate {
	qoc.mutation.SetOptionText(s)
	return qoc
}

// SetOrder sets the "order" field.
func (qoc *QuestionOptionCreate) SetOrder(i int) *QuestionOptionCreate {
	qoc.mutation.SetOrder(i)
	return qoc
}

// SetID sets the "id" field.
func (qoc *QuestionOptionCreate) SetID(u uuid.UUID) *QuestionOptionCreate {
	qoc.mutation.SetID(u)
	return qoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qoc *QuestionOptionCreate) SetNillableID(u *uuid.UUID) *QuestionOptionCreate {
	if u != nil {
		qoc.SetID(*u)
	}
	return qoc
}

// SetQuestion sets the "question" edge to the Question entity.
func (qoc *QuestionOptionCreate) SetQuestion(q *Question) *QuestionOptionCreate {
	return qoc.SetQuestionID(q.ID)
}

// AddSelectedOptionIDs adds the "selectedOption" edge to the SelectedOption entity by IDs.
func (qoc *QuestionOptionCreate) AddSelectedOptionIDs(ids ...int) *QuestionOptionCreate {
	qoc.mutation.AddSelectedOptionIDs(ids...)
	return qoc
}

// AddSelectedOption adds the "selectedOption" edges to the SelectedOption entity.
func (qoc *QuestionOptionCreate) AddSelectedOption(s ...*SelectedOption) *QuestionOptionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qoc.AddSelectedOptionIDs(ids...)
}

// Mutation returns the QuestionOptionMutation object of the builder.
func (qoc *QuestionOptionCreate) Mutation() *QuestionOptionMutation {
	return qoc.mutation
}

// Save creates the QuestionOption in the database.
func (qoc *QuestionOptionCreate) Save(ctx context.Context) (*QuestionOption, error) {
	qoc.defaults()
	return withHooks(ctx, qoc.sqlSave, qoc.mutation, qoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qoc *QuestionOptionCreate) SaveX(ctx context.Context) *QuestionOption {
	v, err := qoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qoc *QuestionOptionCreate) Exec(ctx context.Context) error {
	_, err := qoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qoc *QuestionOptionCreate) ExecX(ctx context.Context) {
	if err := qoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qoc *QuestionOptionCreate) defaults() {
	if _, ok := qoc.mutation.ID(); !ok {
		v := questionoption.DefaultID()
		qoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qoc *QuestionOptionCreate) check() error {
	if _, ok := qoc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "QuestionOption.question_id"`)}
	}
	if _, ok := qoc.mutation.OptionText(); !ok {
		return &ValidationError{Name: "option_text", err: errors.New(`ent: missing required field "QuestionOption.option_text"`)}
	}
	if _, ok := qoc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "QuestionOption.order"`)}
	}
	if _, ok := qoc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "QuestionOption.question"`)}
	}
	return nil
}

func (qoc *QuestionOptionCreate) sqlSave(ctx context.Context) (*QuestionOption, error) {
	if err := qoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qoc.mutation.id = &_node.ID
	qoc.mutation.done = true
	return _node, nil
}

func (qoc *QuestionOptionCreate) createSpec() (*QuestionOption, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionOption{config: qoc.config}
		_spec = sqlgraph.NewCreateSpec(questionoption.Table, sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID))
	)
	if id, ok := qoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qoc.mutation.OptionText(); ok {
		_spec.SetField(questionoption.FieldOptionText, field.TypeString, value)
		_node.OptionText = value
	}
	if value, ok := qoc.mutation.Order(); ok {
		_spec.SetField(questionoption.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := qoc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionoption.QuestionTable,
			Columns: []string{questionoption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qoc.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionoption.SelectedOptionTable,
			Columns: []string{questionoption.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectedoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionOptionCreateBulk is the builder for creating many QuestionOption entities in bulk.
type QuestionOptionCreateBulk struct {
	config
	err      error
	builders []*QuestionOptionCreate
}

// Save creates the QuestionOption entities in the database.
func (qocb *QuestionOptionCreateBulk) Save(ctx context.Context) ([]*QuestionOption, error) {
	if qocb.err != nil {
		return nil, qocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qocb.builders))
	nodes := make([]*QuestionOption, len(qocb.builders))
	mutators := make([]Mutator, len(qocb.builders))
	for i := range qocb.builders {
		func(i int, root context.Context) {
			builder := qocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qocb *QuestionOptionCreateBulk) SaveX(ctx context.Context) []*QuestionOption {
	v, err := qocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qocb *QuestionOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := qocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qocb *QuestionOptionCreateBulk) ExecX(ctx context.Context) {
	if err := qocb.Exec(ctx); err != nil {
		panic(err)
	}
}
