// Code generated by ent, DO NOT EDIT.

package classinvitationcode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLTE(FieldID, id))
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldClassID, v))
}

// InvitationCode applies equality check predicate on the "invitation_code" field. It's identical to InvitationCodeEQ.
func InvitationCode(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldInvitationCode, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldExpirationDate, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...uuid.UUID) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldClassID, vs...))
}

// InvitationCodeEQ applies the EQ predicate on the "invitation_code" field.
func InvitationCodeEQ(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldInvitationCode, v))
}

// InvitationCodeNEQ applies the NEQ predicate on the "invitation_code" field.
func InvitationCodeNEQ(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldInvitationCode, v))
}

// InvitationCodeIn applies the In predicate on the "invitation_code" field.
func InvitationCodeIn(vs ...string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldInvitationCode, vs...))
}

// InvitationCodeNotIn applies the NotIn predicate on the "invitation_code" field.
func InvitationCodeNotIn(vs ...string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldInvitationCode, vs...))
}

// InvitationCodeGT applies the GT predicate on the "invitation_code" field.
func InvitationCodeGT(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGT(FieldInvitationCode, v))
}

// InvitationCodeGTE applies the GTE predicate on the "invitation_code" field.
func InvitationCodeGTE(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGTE(FieldInvitationCode, v))
}

// InvitationCodeLT applies the LT predicate on the "invitation_code" field.
func InvitationCodeLT(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLT(FieldInvitationCode, v))
}

// InvitationCodeLTE applies the LTE predicate on the "invitation_code" field.
func InvitationCodeLTE(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLTE(FieldInvitationCode, v))
}

// InvitationCodeContains applies the Contains predicate on the "invitation_code" field.
func InvitationCodeContains(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldContains(FieldInvitationCode, v))
}

// InvitationCodeHasPrefix applies the HasPrefix predicate on the "invitation_code" field.
func InvitationCodeHasPrefix(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldHasPrefix(FieldInvitationCode, v))
}

// InvitationCodeHasSuffix applies the HasSuffix predicate on the "invitation_code" field.
func InvitationCodeHasSuffix(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldHasSuffix(FieldInvitationCode, v))
}

// InvitationCodeEqualFold applies the EqualFold predicate on the "invitation_code" field.
func InvitationCodeEqualFold(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEqualFold(FieldInvitationCode, v))
}

// InvitationCodeContainsFold applies the ContainsFold predicate on the "invitation_code" field.
func InvitationCodeContainsFold(v string) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldContainsFold(FieldInvitationCode, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLTE(FieldExpirationDate, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClassInvitationCode) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClassInvitationCode) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClassInvitationCode) predicate.ClassInvitationCode {
	return predicate.ClassInvitationCode(sql.NotPredicates(p))
}
