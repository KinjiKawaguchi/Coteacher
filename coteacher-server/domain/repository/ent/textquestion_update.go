// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/predicate"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/question"
	"github.com/KinjiKawaguchi/Coteacher/coteacher-server/domain/repository/ent/textquestion"
	"github.com/google/uuid"
)

// TextQuestionUpdate is the builder for updating TextQuestion entities.
type TextQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *TextQuestionMutation
}

// Where appends a list predicates to the TextQuestionUpdate builder.
func (tqu *TextQuestionUpdate) Where(ps ...predicate.TextQuestion) *TextQuestionUpdate {
	tqu.mutation.Where(ps...)
	return tqu
}

// SetQuestionID sets the "question_id" field.
func (tqu *TextQuestionUpdate) SetQuestionID(u uuid.UUID) *TextQuestionUpdate {
	tqu.mutation.SetQuestionID(u)
	return tqu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqu *TextQuestionUpdate) SetNillableQuestionID(u *uuid.UUID) *TextQuestionUpdate {
	if u != nil {
		tqu.SetQuestionID(*u)
	}
	return tqu
}

// SetMaxLength sets the "max_length" field.
func (tqu *TextQuestionUpdate) SetMaxLength(i int) *TextQuestionUpdate {
	tqu.mutation.ResetMaxLength()
	tqu.mutation.SetMaxLength(i)
	return tqu
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (tqu *TextQuestionUpdate) SetNillableMaxLength(i *int) *TextQuestionUpdate {
	if i != nil {
		tqu.SetMaxLength(*i)
	}
	return tqu
}

// AddMaxLength adds i to the "max_length" field.
func (tqu *TextQuestionUpdate) AddMaxLength(i int) *TextQuestionUpdate {
	tqu.mutation.AddMaxLength(i)
	return tqu
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqu *TextQuestionUpdate) SetQuestion(q *Question) *TextQuestionUpdate {
	return tqu.SetQuestionID(q.ID)
}

// Mutation returns the TextQuestionMutation object of the builder.
func (tqu *TextQuestionUpdate) Mutation() *TextQuestionMutation {
	return tqu.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tqu *TextQuestionUpdate) ClearQuestion() *TextQuestionUpdate {
	tqu.mutation.ClearQuestion()
	return tqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqu *TextQuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tqu.sqlSave, tqu.mutation, tqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqu *TextQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := tqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqu *TextQuestionUpdate) Exec(ctx context.Context) error {
	_, err := tqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqu *TextQuestionUpdate) ExecX(ctx context.Context) {
	if err := tqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqu *TextQuestionUpdate) check() error {
	if _, ok := tqu.mutation.QuestionID(); tqu.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TextQuestion.question"`)
	}
	return nil
}

func (tqu *TextQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(textquestion.Table, textquestion.Columns, sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID))
	if ps := tqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqu.mutation.MaxLength(); ok {
		_spec.SetField(textquestion.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := tqu.mutation.AddedMaxLength(); ok {
		_spec.AddField(textquestion.FieldMaxLength, field.TypeInt, value)
	}
	if tqu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   textquestion.QuestionTable,
			Columns: []string{textquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   textquestion.QuestionTable,
			Columns: []string{textquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tqu.mutation.done = true
	return n, nil
}

// TextQuestionUpdateOne is the builder for updating a single TextQuestion entity.
type TextQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TextQuestionMutation
}

// SetQuestionID sets the "question_id" field.
func (tquo *TextQuestionUpdateOne) SetQuestionID(u uuid.UUID) *TextQuestionUpdateOne {
	tquo.mutation.SetQuestionID(u)
	return tquo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tquo *TextQuestionUpdateOne) SetNillableQuestionID(u *uuid.UUID) *TextQuestionUpdateOne {
	if u != nil {
		tquo.SetQuestionID(*u)
	}
	return tquo
}

// SetMaxLength sets the "max_length" field.
func (tquo *TextQuestionUpdateOne) SetMaxLength(i int) *TextQuestionUpdateOne {
	tquo.mutation.ResetMaxLength()
	tquo.mutation.SetMaxLength(i)
	return tquo
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (tquo *TextQuestionUpdateOne) SetNillableMaxLength(i *int) *TextQuestionUpdateOne {
	if i != nil {
		tquo.SetMaxLength(*i)
	}
	return tquo
}

// AddMaxLength adds i to the "max_length" field.
func (tquo *TextQuestionUpdateOne) AddMaxLength(i int) *TextQuestionUpdateOne {
	tquo.mutation.AddMaxLength(i)
	return tquo
}

// SetQuestion sets the "question" edge to the Question entity.
func (tquo *TextQuestionUpdateOne) SetQuestion(q *Question) *TextQuestionUpdateOne {
	return tquo.SetQuestionID(q.ID)
}

// Mutation returns the TextQuestionMutation object of the builder.
func (tquo *TextQuestionUpdateOne) Mutation() *TextQuestionMutation {
	return tquo.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tquo *TextQuestionUpdateOne) ClearQuestion() *TextQuestionUpdateOne {
	tquo.mutation.ClearQuestion()
	return tquo
}

// Where appends a list predicates to the TextQuestionUpdate builder.
func (tquo *TextQuestionUpdateOne) Where(ps ...predicate.TextQuestion) *TextQuestionUpdateOne {
	tquo.mutation.Where(ps...)
	return tquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tquo *TextQuestionUpdateOne) Select(field string, fields ...string) *TextQuestionUpdateOne {
	tquo.fields = append([]string{field}, fields...)
	return tquo
}

// Save executes the query and returns the updated TextQuestion entity.
func (tquo *TextQuestionUpdateOne) Save(ctx context.Context) (*TextQuestion, error) {
	return withHooks(ctx, tquo.sqlSave, tquo.mutation, tquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tquo *TextQuestionUpdateOne) SaveX(ctx context.Context) *TextQuestion {
	node, err := tquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tquo *TextQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := tquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tquo *TextQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := tquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tquo *TextQuestionUpdateOne) check() error {
	if _, ok := tquo.mutation.QuestionID(); tquo.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TextQuestion.question"`)
	}
	return nil
}

func (tquo *TextQuestionUpdateOne) sqlSave(ctx context.Context) (_node *TextQuestion, err error) {
	if err := tquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(textquestion.Table, textquestion.Columns, sqlgraph.NewFieldSpec(textquestion.FieldID, field.TypeUUID))
	id, ok := tquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TextQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, textquestion.FieldID)
		for _, f := range fields {
			if !textquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != textquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tquo.mutation.MaxLength(); ok {
		_spec.SetField(textquestion.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := tquo.mutation.AddedMaxLength(); ok {
		_spec.AddField(textquestion.FieldMaxLength, field.TypeInt, value)
	}
	if tquo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   textquestion.QuestionTable,
			Columns: []string{textquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tquo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   textquestion.QuestionTable,
			Columns: []string{textquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TextQuestion{config: tquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tquo.mutation.done = true
	return _node, nil
}
