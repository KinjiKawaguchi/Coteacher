// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/health_check.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message coteacher.v1.UnaryRequest
 */
export class UnaryRequest extends Message<UnaryRequest> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<UnaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UnaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnaryRequest {
    return new UnaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnaryRequest {
    return new UnaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnaryRequest {
    return new UnaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnaryRequest | PlainMessage<UnaryRequest> | undefined, b: UnaryRequest | PlainMessage<UnaryRequest> | undefined): boolean {
    return proto3.util.equals(UnaryRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UnaryResponse
 */
export class UnaryResponse extends Message<UnaryResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<UnaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UnaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnaryResponse {
    return new UnaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnaryResponse {
    return new UnaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnaryResponse {
    return new UnaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnaryResponse | PlainMessage<UnaryResponse> | undefined, b: UnaryResponse | PlainMessage<UnaryResponse> | undefined): boolean {
    return proto3.util.equals(UnaryResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ServerStreamingRequest
 */
export class ServerStreamingRequest extends Message<ServerStreamingRequest> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<ServerStreamingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ServerStreamingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStreamingRequest {
    return new ServerStreamingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStreamingRequest {
    return new ServerStreamingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStreamingRequest {
    return new ServerStreamingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ServerStreamingRequest | PlainMessage<ServerStreamingRequest> | undefined, b: ServerStreamingRequest | PlainMessage<ServerStreamingRequest> | undefined): boolean {
    return proto3.util.equals(ServerStreamingRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ServerStreamingResponse
 */
export class ServerStreamingResponse extends Message<ServerStreamingResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<ServerStreamingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ServerStreamingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStreamingResponse {
    return new ServerStreamingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStreamingResponse {
    return new ServerStreamingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStreamingResponse {
    return new ServerStreamingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ServerStreamingResponse | PlainMessage<ServerStreamingResponse> | undefined, b: ServerStreamingResponse | PlainMessage<ServerStreamingResponse> | undefined): boolean {
    return proto3.util.equals(ServerStreamingResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ClientStreamingRequest
 */
export class ClientStreamingRequest extends Message<ClientStreamingRequest> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<ClientStreamingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ClientStreamingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamingRequest {
    return new ClientStreamingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamingRequest {
    return new ClientStreamingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamingRequest {
    return new ClientStreamingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamingRequest | PlainMessage<ClientStreamingRequest> | undefined, b: ClientStreamingRequest | PlainMessage<ClientStreamingRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamingRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ClientStreamingResponse
 */
export class ClientStreamingResponse extends Message<ClientStreamingResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<ClientStreamingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ClientStreamingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamingResponse {
    return new ClientStreamingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamingResponse {
    return new ClientStreamingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamingResponse {
    return new ClientStreamingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamingResponse | PlainMessage<ClientStreamingResponse> | undefined, b: ClientStreamingResponse | PlainMessage<ClientStreamingResponse> | undefined): boolean {
    return proto3.util.equals(ClientStreamingResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.BidirectionalStreamingRequest
 */
export class BidirectionalStreamingRequest extends Message<BidirectionalStreamingRequest> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<BidirectionalStreamingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.BidirectionalStreamingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BidirectionalStreamingRequest {
    return new BidirectionalStreamingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BidirectionalStreamingRequest {
    return new BidirectionalStreamingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BidirectionalStreamingRequest {
    return new BidirectionalStreamingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BidirectionalStreamingRequest | PlainMessage<BidirectionalStreamingRequest> | undefined, b: BidirectionalStreamingRequest | PlainMessage<BidirectionalStreamingRequest> | undefined): boolean {
    return proto3.util.equals(BidirectionalStreamingRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.BidirectionalStreamingResponse
 */
export class BidirectionalStreamingResponse extends Message<BidirectionalStreamingResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<BidirectionalStreamingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.BidirectionalStreamingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BidirectionalStreamingResponse {
    return new BidirectionalStreamingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BidirectionalStreamingResponse {
    return new BidirectionalStreamingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BidirectionalStreamingResponse {
    return new BidirectionalStreamingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BidirectionalStreamingResponse | PlainMessage<BidirectionalStreamingResponse> | undefined, b: BidirectionalStreamingResponse | PlainMessage<BidirectionalStreamingResponse> | undefined): boolean {
    return proto3.util.equals(BidirectionalStreamingResponse, a, b);
  }
}

