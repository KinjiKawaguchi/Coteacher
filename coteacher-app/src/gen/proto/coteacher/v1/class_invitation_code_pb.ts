// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/class_invitation_code.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ClassInvitationCode } from "./resources_pb";

/**
 * @generated from message coteacher.v1.CreateClassInvitationCodeRequest
 */
export class CreateClassInvitationCodeRequest extends Message<CreateClassInvitationCodeRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: google.protobuf.Timestamp expiration_date = 2;
   */
  expirationDate?: Timestamp;

  constructor(data?: PartialMessage<CreateClassInvitationCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateClassInvitationCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClassInvitationCodeRequest {
    return new CreateClassInvitationCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClassInvitationCodeRequest {
    return new CreateClassInvitationCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClassInvitationCodeRequest {
    return new CreateClassInvitationCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClassInvitationCodeRequest | PlainMessage<CreateClassInvitationCodeRequest> | undefined, b: CreateClassInvitationCodeRequest | PlainMessage<CreateClassInvitationCodeRequest> | undefined): boolean {
    return proto3.util.equals(CreateClassInvitationCodeRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CreateClassInvitationCodeResponse
 */
export class CreateClassInvitationCodeResponse extends Message<CreateClassInvitationCodeResponse> {
  /**
   * @generated from field: coteacher.v1.ClassInvitationCode class_invitation_code = 1;
   */
  classInvitationCode?: ClassInvitationCode;

  constructor(data?: PartialMessage<CreateClassInvitationCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateClassInvitationCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_invitation_code", kind: "message", T: ClassInvitationCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClassInvitationCodeResponse {
    return new CreateClassInvitationCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClassInvitationCodeResponse {
    return new CreateClassInvitationCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClassInvitationCodeResponse {
    return new CreateClassInvitationCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClassInvitationCodeResponse | PlainMessage<CreateClassInvitationCodeResponse> | undefined, b: CreateClassInvitationCodeResponse | PlainMessage<CreateClassInvitationCodeResponse> | undefined): boolean {
    return proto3.util.equals(CreateClassInvitationCodeResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassInvitationCodeByIDRequest
 */
export class GetClassInvitationCodeByIDRequest extends Message<GetClassInvitationCodeByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetClassInvitationCodeByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassInvitationCodeByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassInvitationCodeByIDRequest {
    return new GetClassInvitationCodeByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassInvitationCodeByIDRequest {
    return new GetClassInvitationCodeByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassInvitationCodeByIDRequest {
    return new GetClassInvitationCodeByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassInvitationCodeByIDRequest | PlainMessage<GetClassInvitationCodeByIDRequest> | undefined, b: GetClassInvitationCodeByIDRequest | PlainMessage<GetClassInvitationCodeByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetClassInvitationCodeByIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassInvitationCodeByIDResponse
 */
export class GetClassInvitationCodeByIDResponse extends Message<GetClassInvitationCodeByIDResponse> {
  /**
   * @generated from field: coteacher.v1.ClassInvitationCode class_invitation_code = 1;
   */
  classInvitationCode?: ClassInvitationCode;

  constructor(data?: PartialMessage<GetClassInvitationCodeByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassInvitationCodeByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_invitation_code", kind: "message", T: ClassInvitationCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassInvitationCodeByIDResponse {
    return new GetClassInvitationCodeByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassInvitationCodeByIDResponse {
    return new GetClassInvitationCodeByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassInvitationCodeByIDResponse {
    return new GetClassInvitationCodeByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassInvitationCodeByIDResponse | PlainMessage<GetClassInvitationCodeByIDResponse> | undefined, b: GetClassInvitationCodeByIDResponse | PlainMessage<GetClassInvitationCodeByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetClassInvitationCodeByIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassInvitationCodeListByClassIDRequest
 */
export class GetClassInvitationCodeListByClassIDRequest extends Message<GetClassInvitationCodeListByClassIDRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  constructor(data?: PartialMessage<GetClassInvitationCodeListByClassIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassInvitationCodeListByClassIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassInvitationCodeListByClassIDRequest {
    return new GetClassInvitationCodeListByClassIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassInvitationCodeListByClassIDRequest {
    return new GetClassInvitationCodeListByClassIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassInvitationCodeListByClassIDRequest {
    return new GetClassInvitationCodeListByClassIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassInvitationCodeListByClassIDRequest | PlainMessage<GetClassInvitationCodeListByClassIDRequest> | undefined, b: GetClassInvitationCodeListByClassIDRequest | PlainMessage<GetClassInvitationCodeListByClassIDRequest> | undefined): boolean {
    return proto3.util.equals(GetClassInvitationCodeListByClassIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassInvitationCodeListByClassIDResponse
 */
export class GetClassInvitationCodeListByClassIDResponse extends Message<GetClassInvitationCodeListByClassIDResponse> {
  /**
   * @generated from field: repeated coteacher.v1.ClassInvitationCode class_invitation_code_list = 1;
   */
  classInvitationCodeList: ClassInvitationCode[] = [];

  constructor(data?: PartialMessage<GetClassInvitationCodeListByClassIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassInvitationCodeListByClassIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_invitation_code_list", kind: "message", T: ClassInvitationCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassInvitationCodeListByClassIDResponse {
    return new GetClassInvitationCodeListByClassIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassInvitationCodeListByClassIDResponse {
    return new GetClassInvitationCodeListByClassIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassInvitationCodeListByClassIDResponse {
    return new GetClassInvitationCodeListByClassIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassInvitationCodeListByClassIDResponse | PlainMessage<GetClassInvitationCodeListByClassIDResponse> | undefined, b: GetClassInvitationCodeListByClassIDResponse | PlainMessage<GetClassInvitationCodeListByClassIDResponse> | undefined): boolean {
    return proto3.util.equals(GetClassInvitationCodeListByClassIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateClassInvitationCodeRequest
 */
export class UpdateClassInvitationCodeRequest extends Message<UpdateClassInvitationCodeRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp expiration_date = 2;
   */
  expirationDate?: Timestamp;

  /**
   * @generated from field: bool is_active = 3;
   */
  isActive = false;

  constructor(data?: PartialMessage<UpdateClassInvitationCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateClassInvitationCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_date", kind: "message", T: Timestamp },
    { no: 3, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClassInvitationCodeRequest {
    return new UpdateClassInvitationCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClassInvitationCodeRequest {
    return new UpdateClassInvitationCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClassInvitationCodeRequest {
    return new UpdateClassInvitationCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClassInvitationCodeRequest | PlainMessage<UpdateClassInvitationCodeRequest> | undefined, b: UpdateClassInvitationCodeRequest | PlainMessage<UpdateClassInvitationCodeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClassInvitationCodeRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateClassInvitationCodeResponse
 */
export class UpdateClassInvitationCodeResponse extends Message<UpdateClassInvitationCodeResponse> {
  /**
   * @generated from field: coteacher.v1.ClassInvitationCode class_invitation_code = 1;
   */
  classInvitationCode?: ClassInvitationCode;

  constructor(data?: PartialMessage<UpdateClassInvitationCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateClassInvitationCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_invitation_code", kind: "message", T: ClassInvitationCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClassInvitationCodeResponse {
    return new UpdateClassInvitationCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClassInvitationCodeResponse {
    return new UpdateClassInvitationCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClassInvitationCodeResponse {
    return new UpdateClassInvitationCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClassInvitationCodeResponse | PlainMessage<UpdateClassInvitationCodeResponse> | undefined, b: UpdateClassInvitationCodeResponse | PlainMessage<UpdateClassInvitationCodeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateClassInvitationCodeResponse, a, b);
  }
}

