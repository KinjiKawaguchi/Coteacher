// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/form.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Form } from "./resources_pb";

/**
 * @generated from message coteacher.v1.CreateFormRequest
 */
export class CreateFormRequest extends Message<CreateFormRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: coteacher.v1.Form form = 2;
   */
  form?: Form;

  constructor(data?: PartialMessage<CreateFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFormRequest {
    return new CreateFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFormRequest {
    return new CreateFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFormRequest {
    return new CreateFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFormRequest | PlainMessage<CreateFormRequest> | undefined, b: CreateFormRequest | PlainMessage<CreateFormRequest> | undefined): boolean {
    return proto3.util.equals(CreateFormRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CreateFormResponse
 */
export class CreateFormResponse extends Message<CreateFormResponse> {
  /**
   * @generated from field: coteacher.v1.Form form = 1;
   */
  form?: Form;

  constructor(data?: PartialMessage<CreateFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFormResponse {
    return new CreateFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFormResponse {
    return new CreateFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFormResponse {
    return new CreateFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFormResponse | PlainMessage<CreateFormResponse> | undefined, b: CreateFormResponse | PlainMessage<CreateFormResponse> | undefined): boolean {
    return proto3.util.equals(CreateFormResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetFormByIDRequest
 */
export class GetFormByIDRequest extends Message<GetFormByIDRequest> {
  /**
   * @generated from field: string form_id = 1;
   */
  formId = "";

  constructor(data?: PartialMessage<GetFormByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetFormByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormByIDRequest {
    return new GetFormByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormByIDRequest {
    return new GetFormByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormByIDRequest {
    return new GetFormByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormByIDRequest | PlainMessage<GetFormByIDRequest> | undefined, b: GetFormByIDRequest | PlainMessage<GetFormByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetFormByIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetFormByIDResponse
 */
export class GetFormByIDResponse extends Message<GetFormByIDResponse> {
  /**
   * @generated from field: coteacher.v1.Form form = 1;
   */
  form?: Form;

  constructor(data?: PartialMessage<GetFormByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetFormByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormByIDResponse {
    return new GetFormByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormByIDResponse {
    return new GetFormByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormByIDResponse {
    return new GetFormByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormByIDResponse | PlainMessage<GetFormByIDResponse> | undefined, b: GetFormByIDResponse | PlainMessage<GetFormByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetFormByIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetFormListByClassIDRequest
 */
export class GetFormListByClassIDRequest extends Message<GetFormListByClassIDRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  constructor(data?: PartialMessage<GetFormListByClassIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetFormListByClassIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormListByClassIDRequest {
    return new GetFormListByClassIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormListByClassIDRequest {
    return new GetFormListByClassIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormListByClassIDRequest {
    return new GetFormListByClassIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormListByClassIDRequest | PlainMessage<GetFormListByClassIDRequest> | undefined, b: GetFormListByClassIDRequest | PlainMessage<GetFormListByClassIDRequest> | undefined): boolean {
    return proto3.util.equals(GetFormListByClassIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetFormListByClassIDResponse
 */
export class GetFormListByClassIDResponse extends Message<GetFormListByClassIDResponse> {
  /**
   * @generated from field: repeated coteacher.v1.Form forms = 1;
   */
  forms: Form[] = [];

  constructor(data?: PartialMessage<GetFormListByClassIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetFormListByClassIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forms", kind: "message", T: Form, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormListByClassIDResponse {
    return new GetFormListByClassIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormListByClassIDResponse {
    return new GetFormListByClassIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormListByClassIDResponse {
    return new GetFormListByClassIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormListByClassIDResponse | PlainMessage<GetFormListByClassIDResponse> | undefined, b: GetFormListByClassIDResponse | PlainMessage<GetFormListByClassIDResponse> | undefined): boolean {
    return proto3.util.equals(GetFormListByClassIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateFormRequest
 */
export class UpdateFormRequest extends Message<UpdateFormRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: coteacher.v1.Form form = 2;
   */
  form?: Form;

  constructor(data?: PartialMessage<UpdateFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFormRequest {
    return new UpdateFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFormRequest {
    return new UpdateFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFormRequest {
    return new UpdateFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFormRequest | PlainMessage<UpdateFormRequest> | undefined, b: UpdateFormRequest | PlainMessage<UpdateFormRequest> | undefined): boolean {
    return proto3.util.equals(UpdateFormRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateFormResponse
 */
export class UpdateFormResponse extends Message<UpdateFormResponse> {
  /**
   * @generated from field: coteacher.v1.Form form = 1;
   */
  form?: Form;

  constructor(data?: PartialMessage<UpdateFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFormResponse {
    return new UpdateFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFormResponse {
    return new UpdateFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFormResponse {
    return new UpdateFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFormResponse | PlainMessage<UpdateFormResponse> | undefined, b: UpdateFormResponse | PlainMessage<UpdateFormResponse> | undefined): boolean {
    return proto3.util.equals(UpdateFormResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteFormRequest
 */
export class DeleteFormRequest extends Message<DeleteFormRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string form_id = 2;
   */
  formId = "";

  constructor(data?: PartialMessage<DeleteFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "form_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFormRequest {
    return new DeleteFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFormRequest {
    return new DeleteFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFormRequest {
    return new DeleteFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFormRequest | PlainMessage<DeleteFormRequest> | undefined, b: DeleteFormRequest | PlainMessage<DeleteFormRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFormRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteFormResponse
 */
export class DeleteFormResponse extends Message<DeleteFormResponse> {
  /**
   * @generated from field: coteacher.v1.Form form = 1;
   */
  form?: Form;

  constructor(data?: PartialMessage<DeleteFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFormResponse {
    return new DeleteFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFormResponse {
    return new DeleteFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFormResponse {
    return new DeleteFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFormResponse | PlainMessage<DeleteFormResponse> | undefined, b: DeleteFormResponse | PlainMessage<DeleteFormResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFormResponse, a, b);
  }
}

