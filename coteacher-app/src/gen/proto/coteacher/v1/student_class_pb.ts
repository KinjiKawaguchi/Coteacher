// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/student_class.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Class, StudentClass, User } from "./resources_pb";

/**
 * @generated from message coteacher.v1.CreateStudentClassRequest
 */
export class CreateStudentClassRequest extends Message<CreateStudentClassRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<CreateStudentClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateStudentClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStudentClassRequest {
    return new CreateStudentClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStudentClassRequest {
    return new CreateStudentClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStudentClassRequest {
    return new CreateStudentClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStudentClassRequest | PlainMessage<CreateStudentClassRequest> | undefined, b: CreateStudentClassRequest | PlainMessage<CreateStudentClassRequest> | undefined): boolean {
    return proto3.util.equals(CreateStudentClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CreateStudentClassResponse
 */
export class CreateStudentClassResponse extends Message<CreateStudentClassResponse> {
  /**
   * @generated from field: coteacher.v1.StudentClass student_class = 1;
   */
  studentClass?: StudentClass;

  constructor(data?: PartialMessage<CreateStudentClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateStudentClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_class", kind: "message", T: StudentClass },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStudentClassResponse {
    return new CreateStudentClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStudentClassResponse {
    return new CreateStudentClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStudentClassResponse {
    return new CreateStudentClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStudentClassResponse | PlainMessage<CreateStudentClassResponse> | undefined, b: CreateStudentClassResponse | PlainMessage<CreateStudentClassResponse> | undefined): boolean {
    return proto3.util.equals(CreateStudentClassResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetStudentListByClassIDRequest
 */
export class GetStudentListByClassIDRequest extends Message<GetStudentListByClassIDRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  constructor(data?: PartialMessage<GetStudentListByClassIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetStudentListByClassIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentListByClassIDRequest {
    return new GetStudentListByClassIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentListByClassIDRequest {
    return new GetStudentListByClassIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentListByClassIDRequest {
    return new GetStudentListByClassIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentListByClassIDRequest | PlainMessage<GetStudentListByClassIDRequest> | undefined, b: GetStudentListByClassIDRequest | PlainMessage<GetStudentListByClassIDRequest> | undefined): boolean {
    return proto3.util.equals(GetStudentListByClassIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetStudentListByClassIDResponse
 */
export class GetStudentListByClassIDResponse extends Message<GetStudentListByClassIDResponse> {
  /**
   * @generated from field: repeated coteacher.v1.User students = 1;
   */
  students: User[] = [];

  constructor(data?: PartialMessage<GetStudentListByClassIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetStudentListByClassIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "students", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentListByClassIDResponse {
    return new GetStudentListByClassIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentListByClassIDResponse {
    return new GetStudentListByClassIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentListByClassIDResponse {
    return new GetStudentListByClassIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentListByClassIDResponse | PlainMessage<GetStudentListByClassIDResponse> | undefined, b: GetStudentListByClassIDResponse | PlainMessage<GetStudentListByClassIDResponse> | undefined): boolean {
    return proto3.util.equals(GetStudentListByClassIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassListByStudentIDRequest
 */
export class GetClassListByStudentIDRequest extends Message<GetClassListByStudentIDRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  constructor(data?: PartialMessage<GetClassListByStudentIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassListByStudentIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassListByStudentIDRequest {
    return new GetClassListByStudentIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassListByStudentIDRequest {
    return new GetClassListByStudentIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassListByStudentIDRequest {
    return new GetClassListByStudentIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassListByStudentIDRequest | PlainMessage<GetClassListByStudentIDRequest> | undefined, b: GetClassListByStudentIDRequest | PlainMessage<GetClassListByStudentIDRequest> | undefined): boolean {
    return proto3.util.equals(GetClassListByStudentIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassListByStudentIDResponse
 */
export class GetClassListByStudentIDResponse extends Message<GetClassListByStudentIDResponse> {
  /**
   * @generated from field: repeated coteacher.v1.Class classes = 1;
   */
  classes: Class[] = [];

  constructor(data?: PartialMessage<GetClassListByStudentIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassListByStudentIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classes", kind: "message", T: Class, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassListByStudentIDResponse {
    return new GetClassListByStudentIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassListByStudentIDResponse {
    return new GetClassListByStudentIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassListByStudentIDResponse {
    return new GetClassListByStudentIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassListByStudentIDResponse | PlainMessage<GetClassListByStudentIDResponse> | undefined, b: GetClassListByStudentIDResponse | PlainMessage<GetClassListByStudentIDResponse> | undefined): boolean {
    return proto3.util.equals(GetClassListByStudentIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteStudentClassRequest
 */
export class DeleteStudentClassRequest extends Message<DeleteStudentClassRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<DeleteStudentClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteStudentClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStudentClassRequest {
    return new DeleteStudentClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStudentClassRequest {
    return new DeleteStudentClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStudentClassRequest {
    return new DeleteStudentClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStudentClassRequest | PlainMessage<DeleteStudentClassRequest> | undefined, b: DeleteStudentClassRequest | PlainMessage<DeleteStudentClassRequest> | undefined): boolean {
    return proto3.util.equals(DeleteStudentClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteStudentClassResponse
 */
export class DeleteStudentClassResponse extends Message<DeleteStudentClassResponse> {
  /**
   * @generated from field: coteacher.v1.StudentClass student_class = 1;
   */
  studentClass?: StudentClass;

  constructor(data?: PartialMessage<DeleteStudentClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteStudentClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_class", kind: "message", T: StudentClass },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStudentClassResponse {
    return new DeleteStudentClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStudentClassResponse {
    return new DeleteStudentClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStudentClassResponse {
    return new DeleteStudentClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStudentClassResponse | PlainMessage<DeleteStudentClassResponse> | undefined, b: DeleteStudentClassResponse | PlainMessage<DeleteStudentClassResponse> | undefined): boolean {
    return proto3.util.equals(DeleteStudentClassResponse, a, b);
  }
}

