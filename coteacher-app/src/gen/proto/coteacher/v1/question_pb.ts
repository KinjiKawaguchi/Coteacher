// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/question.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Question } from "./resources_pb";

/**
 * @generated from message coteacher.v1.GetQuestionListByFormIdRequest
 */
export class GetQuestionListByFormIdRequest extends Message<GetQuestionListByFormIdRequest> {
  /**
   * @generated from field: string form_id = 1;
   */
  formId = "";

  constructor(data?: PartialMessage<GetQuestionListByFormIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetQuestionListByFormIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionListByFormIdRequest {
    return new GetQuestionListByFormIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionListByFormIdRequest {
    return new GetQuestionListByFormIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionListByFormIdRequest {
    return new GetQuestionListByFormIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetQuestionListByFormIdRequest | PlainMessage<GetQuestionListByFormIdRequest> | undefined, b: GetQuestionListByFormIdRequest | PlainMessage<GetQuestionListByFormIdRequest> | undefined): boolean {
    return proto3.util.equals(GetQuestionListByFormIdRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetQuestionListByFormIdResponse
 */
export class GetQuestionListByFormIdResponse extends Message<GetQuestionListByFormIdResponse> {
  /**
   * @generated from field: repeated coteacher.v1.Question questions = 1;
   */
  questions: Question[] = [];

  constructor(data?: PartialMessage<GetQuestionListByFormIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetQuestionListByFormIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQuestionListByFormIdResponse {
    return new GetQuestionListByFormIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQuestionListByFormIdResponse {
    return new GetQuestionListByFormIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQuestionListByFormIdResponse {
    return new GetQuestionListByFormIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetQuestionListByFormIdResponse | PlainMessage<GetQuestionListByFormIdResponse> | undefined, b: GetQuestionListByFormIdResponse | PlainMessage<GetQuestionListByFormIdResponse> | undefined): boolean {
    return proto3.util.equals(GetQuestionListByFormIdResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.SaveQuestionListRequest
 */
export class SaveQuestionListRequest extends Message<SaveQuestionListRequest> {
  /**
   * @generated from field: repeated coteacher.v1.Question questions = 1;
   */
  questions: Question[] = [];

  constructor(data?: PartialMessage<SaveQuestionListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.SaveQuestionListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveQuestionListRequest {
    return new SaveQuestionListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveQuestionListRequest {
    return new SaveQuestionListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveQuestionListRequest {
    return new SaveQuestionListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SaveQuestionListRequest | PlainMessage<SaveQuestionListRequest> | undefined, b: SaveQuestionListRequest | PlainMessage<SaveQuestionListRequest> | undefined): boolean {
    return proto3.util.equals(SaveQuestionListRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.SaveQuestionListResponse
 */
export class SaveQuestionListResponse extends Message<SaveQuestionListResponse> {
  /**
   * @generated from field: repeated coteacher.v1.Question questions = 1;
   */
  questions: Question[] = [];

  constructor(data?: PartialMessage<SaveQuestionListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.SaveQuestionListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "questions", kind: "message", T: Question, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveQuestionListResponse {
    return new SaveQuestionListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveQuestionListResponse {
    return new SaveQuestionListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveQuestionListResponse {
    return new SaveQuestionListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SaveQuestionListResponse | PlainMessage<SaveQuestionListResponse> | undefined, b: SaveQuestionListResponse | PlainMessage<SaveQuestionListResponse> | undefined): boolean {
    return proto3.util.equals(SaveQuestionListResponse, a, b);
  }
}

