// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/class.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Class } from "./resources_pb";

/**
 * @generated from message coteacher.v1.CreateClassRequest
 */
export class CreateClassRequest extends Message<CreateClassRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string teacher_id = 2;
   */
  teacherId = "";

  constructor(data?: PartialMessage<CreateClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "teacher_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClassRequest {
    return new CreateClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClassRequest {
    return new CreateClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClassRequest {
    return new CreateClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClassRequest | PlainMessage<CreateClassRequest> | undefined, b: CreateClassRequest | PlainMessage<CreateClassRequest> | undefined): boolean {
    return proto3.util.equals(CreateClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CreateClassResponse
 */
export class CreateClassResponse extends Message<CreateClassResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<CreateClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CreateClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClassResponse {
    return new CreateClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClassResponse {
    return new CreateClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClassResponse {
    return new CreateClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClassResponse | PlainMessage<CreateClassResponse> | undefined, b: CreateClassResponse | PlainMessage<CreateClassResponse> | undefined): boolean {
    return proto3.util.equals(CreateClassResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassByIDRequest
 */
export class GetClassByIDRequest extends Message<GetClassByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetClassByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassByIDRequest {
    return new GetClassByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassByIDRequest {
    return new GetClassByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassByIDRequest {
    return new GetClassByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassByIDRequest | PlainMessage<GetClassByIDRequest> | undefined, b: GetClassByIDRequest | PlainMessage<GetClassByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetClassByIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassByIDResponse
 */
export class GetClassByIDResponse extends Message<GetClassByIDResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<GetClassByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassByIDResponse {
    return new GetClassByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassByIDResponse {
    return new GetClassByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassByIDResponse {
    return new GetClassByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassByIDResponse | PlainMessage<GetClassByIDResponse> | undefined, b: GetClassByIDResponse | PlainMessage<GetClassByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetClassByIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassListByTeacherIDRequest
 */
export class GetClassListByTeacherIDRequest extends Message<GetClassListByTeacherIDRequest> {
  /**
   * @generated from field: string teacher_id = 1;
   */
  teacherId = "";

  constructor(data?: PartialMessage<GetClassListByTeacherIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassListByTeacherIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teacher_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassListByTeacherIDRequest {
    return new GetClassListByTeacherIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassListByTeacherIDRequest {
    return new GetClassListByTeacherIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassListByTeacherIDRequest {
    return new GetClassListByTeacherIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassListByTeacherIDRequest | PlainMessage<GetClassListByTeacherIDRequest> | undefined, b: GetClassListByTeacherIDRequest | PlainMessage<GetClassListByTeacherIDRequest> | undefined): boolean {
    return proto3.util.equals(GetClassListByTeacherIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.GetClassListByTeacherIDResponse
 */
export class GetClassListByTeacherIDResponse extends Message<GetClassListByTeacherIDResponse> {
  /**
   * @generated from field: repeated coteacher.v1.Class classes = 1;
   */
  classes: Class[] = [];

  constructor(data?: PartialMessage<GetClassListByTeacherIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.GetClassListByTeacherIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classes", kind: "message", T: Class, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClassListByTeacherIDResponse {
    return new GetClassListByTeacherIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClassListByTeacherIDResponse {
    return new GetClassListByTeacherIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClassListByTeacherIDResponse {
    return new GetClassListByTeacherIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClassListByTeacherIDResponse | PlainMessage<GetClassListByTeacherIDResponse> | undefined, b: GetClassListByTeacherIDResponse | PlainMessage<GetClassListByTeacherIDResponse> | undefined): boolean {
    return proto3.util.equals(GetClassListByTeacherIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateClassRequest
 */
export class UpdateClassRequest extends Message<UpdateClassRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string teacher_id = 3;
   */
  teacherId = "";

  constructor(data?: PartialMessage<UpdateClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "teacher_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClassRequest {
    return new UpdateClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClassRequest {
    return new UpdateClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClassRequest {
    return new UpdateClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClassRequest | PlainMessage<UpdateClassRequest> | undefined, b: UpdateClassRequest | PlainMessage<UpdateClassRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.UpdateClassResponse
 */
export class UpdateClassResponse extends Message<UpdateClassResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<UpdateClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.UpdateClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClassResponse {
    return new UpdateClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClassResponse {
    return new UpdateClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClassResponse {
    return new UpdateClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClassResponse | PlainMessage<UpdateClassResponse> | undefined, b: UpdateClassResponse | PlainMessage<UpdateClassResponse> | undefined): boolean {
    return proto3.util.equals(UpdateClassResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteClassRequest
 */
export class DeleteClassRequest extends Message<DeleteClassRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClassRequest {
    return new DeleteClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClassRequest {
    return new DeleteClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClassRequest {
    return new DeleteClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClassRequest | PlainMessage<DeleteClassRequest> | undefined, b: DeleteClassRequest | PlainMessage<DeleteClassRequest> | undefined): boolean {
    return proto3.util.equals(DeleteClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.DeleteClassResponse
 */
export class DeleteClassResponse extends Message<DeleteClassResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<DeleteClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.DeleteClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClassResponse {
    return new DeleteClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClassResponse {
    return new DeleteClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClassResponse {
    return new DeleteClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClassResponse | PlainMessage<DeleteClassResponse> | undefined, b: DeleteClassResponse | PlainMessage<DeleteClassResponse> | undefined): boolean {
    return proto3.util.equals(DeleteClassResponse, a, b);
  }
}

