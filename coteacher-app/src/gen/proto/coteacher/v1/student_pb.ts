// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/student.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Class } from "./resources_pb";

/**
 * @generated from message coteacher.v1.CheckStudentExistsByIDRequest
 */
export class CheckStudentExistsByIDRequest extends Message<CheckStudentExistsByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CheckStudentExistsByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckStudentExistsByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckStudentExistsByIDRequest {
    return new CheckStudentExistsByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckStudentExistsByIDRequest {
    return new CheckStudentExistsByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckStudentExistsByIDRequest {
    return new CheckStudentExistsByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckStudentExistsByIDRequest | PlainMessage<CheckStudentExistsByIDRequest> | undefined, b: CheckStudentExistsByIDRequest | PlainMessage<CheckStudentExistsByIDRequest> | undefined): boolean {
    return proto3.util.equals(CheckStudentExistsByIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckStudentExistsByIDResponse
 */
export class CheckStudentExistsByIDResponse extends Message<CheckStudentExistsByIDResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<CheckStudentExistsByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckStudentExistsByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckStudentExistsByIDResponse {
    return new CheckStudentExistsByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckStudentExistsByIDResponse {
    return new CheckStudentExistsByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckStudentExistsByIDResponse {
    return new CheckStudentExistsByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckStudentExistsByIDResponse | PlainMessage<CheckStudentExistsByIDResponse> | undefined, b: CheckStudentExistsByIDResponse | PlainMessage<CheckStudentExistsByIDResponse> | undefined): boolean {
    return proto3.util.equals(CheckStudentExistsByIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckStudentExistsByEmailRequest
 */
export class CheckStudentExistsByEmailRequest extends Message<CheckStudentExistsByEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<CheckStudentExistsByEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckStudentExistsByEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckStudentExistsByEmailRequest {
    return new CheckStudentExistsByEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckStudentExistsByEmailRequest {
    return new CheckStudentExistsByEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckStudentExistsByEmailRequest {
    return new CheckStudentExistsByEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckStudentExistsByEmailRequest | PlainMessage<CheckStudentExistsByEmailRequest> | undefined, b: CheckStudentExistsByEmailRequest | PlainMessage<CheckStudentExistsByEmailRequest> | undefined): boolean {
    return proto3.util.equals(CheckStudentExistsByEmailRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckStudentExistsByEmailResponse
 */
export class CheckStudentExistsByEmailResponse extends Message<CheckStudentExistsByEmailResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<CheckStudentExistsByEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckStudentExistsByEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckStudentExistsByEmailResponse {
    return new CheckStudentExistsByEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckStudentExistsByEmailResponse {
    return new CheckStudentExistsByEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckStudentExistsByEmailResponse {
    return new CheckStudentExistsByEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckStudentExistsByEmailResponse | PlainMessage<CheckStudentExistsByEmailResponse> | undefined, b: CheckStudentExistsByEmailResponse | PlainMessage<CheckStudentExistsByEmailResponse> | undefined): boolean {
    return proto3.util.equals(CheckStudentExistsByEmailResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ParticipateClassRequest
 */
export class ParticipateClassRequest extends Message<ParticipateClassRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string invitaion_code = 2;
   */
  invitaionCode = "";

  constructor(data?: PartialMessage<ParticipateClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ParticipateClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "invitaion_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipateClassRequest {
    return new ParticipateClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipateClassRequest {
    return new ParticipateClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipateClassRequest {
    return new ParticipateClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipateClassRequest | PlainMessage<ParticipateClassRequest> | undefined, b: ParticipateClassRequest | PlainMessage<ParticipateClassRequest> | undefined): boolean {
    return proto3.util.equals(ParticipateClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.ParticipateClassResponse
 */
export class ParticipateClassResponse extends Message<ParticipateClassResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<ParticipateClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.ParticipateClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipateClassResponse {
    return new ParticipateClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipateClassResponse {
    return new ParticipateClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipateClassResponse {
    return new ParticipateClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipateClassResponse | PlainMessage<ParticipateClassResponse> | undefined, b: ParticipateClassResponse | PlainMessage<ParticipateClassResponse> | undefined): boolean {
    return proto3.util.equals(ParticipateClassResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.QuitClassRequest
 */
export class QuitClassRequest extends Message<QuitClassRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<QuitClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.QuitClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuitClassRequest {
    return new QuitClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuitClassRequest {
    return new QuitClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuitClassRequest {
    return new QuitClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuitClassRequest | PlainMessage<QuitClassRequest> | undefined, b: QuitClassRequest | PlainMessage<QuitClassRequest> | undefined): boolean {
    return proto3.util.equals(QuitClassRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.QuitClassResponse
 */
export class QuitClassResponse extends Message<QuitClassResponse> {
  /**
   * @generated from field: coteacher.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<QuitClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.QuitClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuitClassResponse {
    return new QuitClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuitClassResponse {
    return new QuitClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuitClassResponse {
    return new QuitClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuitClassResponse | PlainMessage<QuitClassResponse> | undefined, b: QuitClassResponse | PlainMessage<QuitClassResponse> | undefined): boolean {
    return proto3.util.equals(QuitClassResponse, a, b);
  }
}

