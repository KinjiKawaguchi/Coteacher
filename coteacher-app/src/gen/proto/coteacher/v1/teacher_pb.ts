// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file coteacher/v1/teacher.proto (package coteacher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message coteacher.v1.CheckTeacherExistsByIDRequest
 */
export class CheckTeacherExistsByIDRequest extends Message<CheckTeacherExistsByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CheckTeacherExistsByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckTeacherExistsByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTeacherExistsByIDRequest {
    return new CheckTeacherExistsByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTeacherExistsByIDRequest {
    return new CheckTeacherExistsByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTeacherExistsByIDRequest {
    return new CheckTeacherExistsByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTeacherExistsByIDRequest | PlainMessage<CheckTeacherExistsByIDRequest> | undefined, b: CheckTeacherExistsByIDRequest | PlainMessage<CheckTeacherExistsByIDRequest> | undefined): boolean {
    return proto3.util.equals(CheckTeacherExistsByIDRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckTeacherExistsByIDResponse
 */
export class CheckTeacherExistsByIDResponse extends Message<CheckTeacherExistsByIDResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<CheckTeacherExistsByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckTeacherExistsByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTeacherExistsByIDResponse {
    return new CheckTeacherExistsByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTeacherExistsByIDResponse {
    return new CheckTeacherExistsByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTeacherExistsByIDResponse {
    return new CheckTeacherExistsByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTeacherExistsByIDResponse | PlainMessage<CheckTeacherExistsByIDResponse> | undefined, b: CheckTeacherExistsByIDResponse | PlainMessage<CheckTeacherExistsByIDResponse> | undefined): boolean {
    return proto3.util.equals(CheckTeacherExistsByIDResponse, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckTeacherExistsByEmailRequest
 */
export class CheckTeacherExistsByEmailRequest extends Message<CheckTeacherExistsByEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<CheckTeacherExistsByEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckTeacherExistsByEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTeacherExistsByEmailRequest {
    return new CheckTeacherExistsByEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTeacherExistsByEmailRequest {
    return new CheckTeacherExistsByEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTeacherExistsByEmailRequest {
    return new CheckTeacherExistsByEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTeacherExistsByEmailRequest | PlainMessage<CheckTeacherExistsByEmailRequest> | undefined, b: CheckTeacherExistsByEmailRequest | PlainMessage<CheckTeacherExistsByEmailRequest> | undefined): boolean {
    return proto3.util.equals(CheckTeacherExistsByEmailRequest, a, b);
  }
}

/**
 * @generated from message coteacher.v1.CheckTeacherExistsByEmailResponse
 */
export class CheckTeacherExistsByEmailResponse extends Message<CheckTeacherExistsByEmailResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<CheckTeacherExistsByEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coteacher.v1.CheckTeacherExistsByEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTeacherExistsByEmailResponse {
    return new CheckTeacherExistsByEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTeacherExistsByEmailResponse {
    return new CheckTeacherExistsByEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTeacherExistsByEmailResponse {
    return new CheckTeacherExistsByEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTeacherExistsByEmailResponse | PlainMessage<CheckTeacherExistsByEmailResponse> | undefined, b: CheckTeacherExistsByEmailResponse | PlainMessage<CheckTeacherExistsByEmailResponse> | undefined): boolean {
    return proto3.util.equals(CheckTeacherExistsByEmailResponse, a, b);
  }
}

