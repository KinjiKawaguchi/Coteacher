# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from coteacher.v1 import class_pb2 as coteacher_dot_v1_dot_class__pb2


class ClassServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateClass = channel.unary_unary(
                '/coteacher.v1.ClassService/CreateClass',
                request_serializer=coteacher_dot_v1_dot_class__pb2.CreateClassRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.CreateClassResponse.FromString,
                )
        self.GetClassByID = channel.unary_unary(
                '/coteacher.v1.ClassService/GetClassByID',
                request_serializer=coteacher_dot_v1_dot_class__pb2.GetClassByIDRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.GetClassByIDResponse.FromString,
                )
        self.GetClassListByTeacherID = channel.unary_unary(
                '/coteacher.v1.ClassService/GetClassListByTeacherID',
                request_serializer=coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDResponse.FromString,
                )
        self.UpdateClass = channel.unary_unary(
                '/coteacher.v1.ClassService/UpdateClass',
                request_serializer=coteacher_dot_v1_dot_class__pb2.UpdateClassRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.UpdateClassResponse.FromString,
                )
        self.DeleteClass = channel.unary_unary(
                '/coteacher.v1.ClassService/DeleteClass',
                request_serializer=coteacher_dot_v1_dot_class__pb2.DeleteClassRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.DeleteClassResponse.FromString,
                )
        self.CheckClassEditPermission = channel.unary_unary(
                '/coteacher.v1.ClassService/CheckClassEditPermission',
                request_serializer=coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionResponse.FromString,
                )
        self.CheckClassViewPermission = channel.unary_unary(
                '/coteacher.v1.ClassService/CheckClassViewPermission',
                request_serializer=coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionRequest.SerializeToString,
                response_deserializer=coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionResponse.FromString,
                )


class ClassServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClassByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClassListByTeacherID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckClassEditPermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckClassViewPermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClassServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateClass': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClass,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.CreateClassRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.CreateClassResponse.SerializeToString,
            ),
            'GetClassByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClassByID,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.GetClassByIDRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.GetClassByIDResponse.SerializeToString,
            ),
            'GetClassListByTeacherID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClassListByTeacherID,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDResponse.SerializeToString,
            ),
            'UpdateClass': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClass,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.UpdateClassRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.UpdateClassResponse.SerializeToString,
            ),
            'DeleteClass': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClass,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.DeleteClassRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.DeleteClassResponse.SerializeToString,
            ),
            'CheckClassEditPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckClassEditPermission,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionResponse.SerializeToString,
            ),
            'CheckClassViewPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckClassViewPermission,
                    request_deserializer=coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionRequest.FromString,
                    response_serializer=coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coteacher.v1.ClassService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClassService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/CreateClass',
            coteacher_dot_v1_dot_class__pb2.CreateClassRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.CreateClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClassByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/GetClassByID',
            coteacher_dot_v1_dot_class__pb2.GetClassByIDRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.GetClassByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClassListByTeacherID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/GetClassListByTeacherID',
            coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.GetClassListByTeacherIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/UpdateClass',
            coteacher_dot_v1_dot_class__pb2.UpdateClassRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.UpdateClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/DeleteClass',
            coteacher_dot_v1_dot_class__pb2.DeleteClassRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.DeleteClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckClassEditPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/CheckClassEditPermission',
            coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.CheckClassEditPermissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckClassViewPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coteacher.v1.ClassService/CheckClassViewPermission',
            coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionRequest.SerializeToString,
            coteacher_dot_v1_dot_class__pb2.CheckClassViewPermissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
